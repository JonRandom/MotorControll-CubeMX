
CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080018b0  080018b0  000118b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800192c  0800192c  00011934  2**0
                  CONTENTS
  4 .ARM          00000000  0800192c  0800192c  00011934  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800192c  08001934  00011934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800192c  0800192c  0001192c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001930  08001930  00011930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000000  08001934  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08001934  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011934  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e7d  00000000  00000000  0001195d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d36  00000000  00000000  0001b7da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000658  00000000  00000000  0001c510  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  0001cb68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003535  00000000  00000000  0001d150  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003182  00000000  00000000  00020685  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00019e46  00000000  00000000  00023807  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003d64d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001894  00000000  00000000  0003d6c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08001898 	.word	0x08001898

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08001898 	.word	0x08001898

0800014c <ADC_StartCalibration>:
* Input          : - ADCx: where x can be 1 or 2 to select the ADC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	689b      	ldr	r3, [r3, #8]
 8000158:	f043 0204 	orr.w	r2, r3, #4
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	609a      	str	r2, [r3, #8]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <ADC_GetCalibrationStatus>:
* Input          : - ADCx: where x can be 1 or 2 to select the ADC peripheral.
* Output         : None
* Return         : The new state of ADC calibration (SET or RESET).
*******************************************************************************/
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 800016a:	b480      	push	{r7}
 800016c:	b085      	sub	sp, #20
 800016e:	af00      	add	r7, sp, #0
 8000170:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000172:	2300      	movs	r3, #0
 8000174:	73fb      	strb	r3, [r7, #15]

  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (u16)RESET)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	689b      	ldr	r3, [r3, #8]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	2b00      	cmp	r3, #0
 8000180:	d002      	beq.n	8000188 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000182:	2301      	movs	r3, #1
 8000184:	73fb      	strb	r3, [r7, #15]
 8000186:	e001      	b.n	800018c <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000188:	2300      	movs	r3, #0
 800018a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
}
 800018e:	4618      	mov	r0, r3
 8000190:	3714      	adds	r7, #20
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
  u32 tmppriority = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80001a0:	2300      	movs	r3, #0
 80001a2:	61fb      	str	r3, [r7, #28]
 80001a4:	2300      	movs	r3, #0
 80001a6:	61bb      	str	r3, [r7, #24]
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
  u32 tmppre = 0, tmpsub = 0x0F;
 80001ac:	2300      	movs	r3, #0
 80001ae:	613b      	str	r3, [r7, #16]
 80001b0:	230f      	movs	r3, #15
 80001b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	78db      	ldrb	r3, [r3, #3]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d007      	beq.n	80001cc <NVIC_Init+0x34>
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	78db      	ldrb	r3, [r3, #3]
 80001c0:	2b01      	cmp	r3, #1
 80001c2:	d003      	beq.n	80001cc <NVIC_Init+0x34>
 80001c4:	217a      	movs	r1, #122	; 0x7a
 80001c6:	489c      	ldr	r0, [pc, #624]	; (8000438 <NVIC_Init+0x2a0>)
 80001c8:	f001 fa58 	bl	800167c <assert_failed>
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	f000 80b6 	beq.w	8000342 <NVIC_Init+0x1aa>
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	2b01      	cmp	r3, #1
 80001dc:	f000 80b1 	beq.w	8000342 <NVIC_Init+0x1aa>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	2b02      	cmp	r3, #2
 80001e6:	f000 80ac 	beq.w	8000342 <NVIC_Init+0x1aa>
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	2b03      	cmp	r3, #3
 80001f0:	f000 80a7 	beq.w	8000342 <NVIC_Init+0x1aa>
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b04      	cmp	r3, #4
 80001fa:	f000 80a2 	beq.w	8000342 <NVIC_Init+0x1aa>
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b05      	cmp	r3, #5
 8000204:	f000 809d 	beq.w	8000342 <NVIC_Init+0x1aa>
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	2b06      	cmp	r3, #6
 800020e:	f000 8098 	beq.w	8000342 <NVIC_Init+0x1aa>
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	781b      	ldrb	r3, [r3, #0]
 8000216:	2b07      	cmp	r3, #7
 8000218:	f000 8093 	beq.w	8000342 <NVIC_Init+0x1aa>
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	2b08      	cmp	r3, #8
 8000222:	f000 808e 	beq.w	8000342 <NVIC_Init+0x1aa>
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b09      	cmp	r3, #9
 800022c:	f000 8089 	beq.w	8000342 <NVIC_Init+0x1aa>
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b0a      	cmp	r3, #10
 8000236:	f000 8084 	beq.w	8000342 <NVIC_Init+0x1aa>
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b0b      	cmp	r3, #11
 8000240:	d07f      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b0c      	cmp	r3, #12
 8000248:	d07b      	beq.n	8000342 <NVIC_Init+0x1aa>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b0d      	cmp	r3, #13
 8000250:	d077      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	781b      	ldrb	r3, [r3, #0]
 8000256:	2b0e      	cmp	r3, #14
 8000258:	d073      	beq.n	8000342 <NVIC_Init+0x1aa>
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	2b0f      	cmp	r3, #15
 8000260:	d06f      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	2b10      	cmp	r3, #16
 8000268:	d06b      	beq.n	8000342 <NVIC_Init+0x1aa>
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2b11      	cmp	r3, #17
 8000270:	d067      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b12      	cmp	r3, #18
 8000278:	d063      	beq.n	8000342 <NVIC_Init+0x1aa>
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	2b13      	cmp	r3, #19
 8000280:	d05f      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b14      	cmp	r3, #20
 8000288:	d05b      	beq.n	8000342 <NVIC_Init+0x1aa>
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	2b15      	cmp	r3, #21
 8000290:	d057      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	2b16      	cmp	r3, #22
 8000298:	d053      	beq.n	8000342 <NVIC_Init+0x1aa>
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b17      	cmp	r3, #23
 80002a0:	d04f      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b18      	cmp	r3, #24
 80002a8:	d04b      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	2b19      	cmp	r3, #25
 80002b0:	d047      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	2b1a      	cmp	r3, #26
 80002b8:	d043      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b1b      	cmp	r3, #27
 80002c0:	d03f      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b1c      	cmp	r3, #28
 80002c8:	d03b      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	2b1d      	cmp	r3, #29
 80002d0:	d037      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2b1e      	cmp	r3, #30
 80002d8:	d033      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b1f      	cmp	r3, #31
 80002e0:	d02f      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b20      	cmp	r3, #32
 80002e8:	d02b      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2b21      	cmp	r3, #33	; 0x21
 80002f0:	d027      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b22      	cmp	r3, #34	; 0x22
 80002f8:	d023      	beq.n	8000342 <NVIC_Init+0x1aa>
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	781b      	ldrb	r3, [r3, #0]
 80002fe:	2b23      	cmp	r3, #35	; 0x23
 8000300:	d01f      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	2b24      	cmp	r3, #36	; 0x24
 8000308:	d01b      	beq.n	8000342 <NVIC_Init+0x1aa>
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b25      	cmp	r3, #37	; 0x25
 8000310:	d017      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	2b26      	cmp	r3, #38	; 0x26
 8000318:	d013      	beq.n	8000342 <NVIC_Init+0x1aa>
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	2b27      	cmp	r3, #39	; 0x27
 8000320:	d00f      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b28      	cmp	r3, #40	; 0x28
 8000328:	d00b      	beq.n	8000342 <NVIC_Init+0x1aa>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b29      	cmp	r3, #41	; 0x29
 8000330:	d007      	beq.n	8000342 <NVIC_Init+0x1aa>
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	2b2a      	cmp	r3, #42	; 0x2a
 8000338:	d003      	beq.n	8000342 <NVIC_Init+0x1aa>
 800033a:	217b      	movs	r1, #123	; 0x7b
 800033c:	483e      	ldr	r0, [pc, #248]	; (8000438 <NVIC_Init+0x2a0>)
 800033e:	f001 f99d 	bl	800167c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	785b      	ldrb	r3, [r3, #1]
 8000346:	2b0f      	cmp	r3, #15
 8000348:	d903      	bls.n	8000352 <NVIC_Init+0x1ba>
 800034a:	217c      	movs	r1, #124	; 0x7c
 800034c:	483a      	ldr	r0, [pc, #232]	; (8000438 <NVIC_Init+0x2a0>)
 800034e:	f001 f995 	bl	800167c <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	789b      	ldrb	r3, [r3, #2]
 8000356:	2b0f      	cmp	r3, #15
 8000358:	d903      	bls.n	8000362 <NVIC_Init+0x1ca>
 800035a:	217d      	movs	r1, #125	; 0x7d
 800035c:	4836      	ldr	r0, [pc, #216]	; (8000438 <NVIC_Init+0x2a0>)
 800035e:	f001 f98d 	bl	800167c <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	78db      	ldrb	r3, [r3, #3]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d06c      	beq.n	8000444 <NVIC_Init+0x2ac>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 800036a:	4b34      	ldr	r3, [pc, #208]	; (800043c <NVIC_Init+0x2a4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	43db      	mvns	r3, r3
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	f003 0307 	and.w	r3, r3, #7
 8000378:	61fb      	str	r3, [r7, #28]
    tmppre = (0x4 - tmppriority);
 800037a:	69fb      	ldr	r3, [r7, #28]
 800037c:	f1c3 0304 	rsb	r3, r3, #4
 8000380:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	69fb      	ldr	r3, [r7, #28]
 8000386:	fa22 f303 	lsr.w	r3, r2, r3
 800038a:	60fb      	str	r3, [r7, #12]
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	785b      	ldrb	r3, [r3, #1]
 8000390:	461a      	mov	r2, r3
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	fa02 f303 	lsl.w	r3, r2, r3
 8000398:	61fb      	str	r3, [r7, #28]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	789b      	ldrb	r3, [r3, #2]
 800039e:	461a      	mov	r2, r3
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	4013      	ands	r3, r2
 80003a4:	69fa      	ldr	r2, [r7, #28]
 80003a6:	4313      	orrs	r3, r2
 80003a8:	61fb      	str	r3, [r7, #28]

    tmppriority = tmppriority << 0x04;
 80003aa:	69fb      	ldr	r3, [r7, #28]
 80003ac:	011b      	lsls	r3, r3, #4
 80003ae:	61fb      	str	r3, [r7, #28]
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	f003 0303 	and.w	r3, r3, #3
 80003b8:	00db      	lsls	r3, r3, #3
 80003ba:	69fa      	ldr	r2, [r7, #28]
 80003bc:	fa02 f303 	lsl.w	r3, r2, r3
 80003c0:	61fb      	str	r3, [r7, #28]
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 80003c2:	4b1f      	ldr	r3, [pc, #124]	; (8000440 <NVIC_Init+0x2a8>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	7812      	ldrb	r2, [r2, #0]
 80003ca:	0892      	lsrs	r2, r2, #2
 80003cc:	b2d2      	uxtb	r2, r2
 80003ce:	32c0      	adds	r2, #192	; 0xc0
 80003d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003d4:	61bb      	str	r3, [r7, #24]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	f003 0303 	and.w	r3, r3, #3
 80003de:	00db      	lsls	r3, r3, #3
 80003e0:	22ff      	movs	r2, #255	; 0xff
 80003e2:	fa02 f303 	lsl.w	r3, r2, r3
 80003e6:	617b      	str	r3, [r7, #20]
    tmpreg &= ~tmpmask;
 80003e8:	697b      	ldr	r3, [r7, #20]
 80003ea:	43db      	mvns	r3, r3
 80003ec:	69ba      	ldr	r2, [r7, #24]
 80003ee:	4013      	ands	r3, r2
 80003f0:	61bb      	str	r3, [r7, #24]
    tmppriority &= tmpmask;  
 80003f2:	69fa      	ldr	r2, [r7, #28]
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	4013      	ands	r3, r2
 80003f8:	61fb      	str	r3, [r7, #28]
    tmpreg |= tmppriority;
 80003fa:	69ba      	ldr	r2, [r7, #24]
 80003fc:	69fb      	ldr	r3, [r7, #28]
 80003fe:	4313      	orrs	r3, r2
 8000400:	61bb      	str	r3, [r7, #24]

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 8000402:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <NVIC_Init+0x2a8>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	687a      	ldr	r2, [r7, #4]
 8000408:	7812      	ldrb	r2, [r2, #0]
 800040a:	0892      	lsrs	r2, r2, #2
 800040c:	b2d2      	uxtb	r2, r2
 800040e:	32c0      	adds	r2, #192	; 0xc0
 8000410:	69b9      	ldr	r1, [r7, #24]
 8000412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	f003 021f 	and.w	r2, r3, #31
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800041e:	4b08      	ldr	r3, [pc, #32]	; (8000440 <NVIC_Init+0x2a8>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	6879      	ldr	r1, [r7, #4]
 8000424:	7809      	ldrb	r1, [r1, #0]
 8000426:	0949      	lsrs	r1, r1, #5
 8000428:	b2c9      	uxtb	r1, r1
 800042a:	4608      	mov	r0, r1
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800042c:	2101      	movs	r1, #1
 800042e:	fa01 f202 	lsl.w	r2, r1, r2
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000432:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
 8000436:	e016      	b.n	8000466 <NVIC_Init+0x2ce>
 8000438:	080018b0 	.word	0x080018b0
 800043c:	20000024 	.word	0x20000024
 8000440:	2000003c 	.word	0x2000003c
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	f003 021f 	and.w	r2, r3, #31
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <NVIC_Init+0x2d8>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	6879      	ldr	r1, [r7, #4]
 8000452:	7809      	ldrb	r1, [r1, #0]
 8000454:	0949      	lsrs	r1, r1, #5
 8000456:	b2c9      	uxtb	r1, r1
 8000458:	4608      	mov	r0, r1
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800045a:	2101      	movs	r1, #1
 800045c:	4091      	lsls	r1, r2
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800045e:	f100 0220 	add.w	r2, r0, #32
 8000462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000466:	bf00      	nop
 8000468:	3720      	adds	r7, #32
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	2000003c 	.word	0x2000003c

08000474 <RCC_PLLCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLLCmd(FunctionalState NewState)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d007      	beq.n	8000494 <RCC_PLLCmd+0x20>
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b01      	cmp	r3, #1
 8000488:	d004      	beq.n	8000494 <RCC_PLLCmd+0x20>
 800048a:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <RCC_PLLCmd+0x30>)
 8000490:	f001 f8f4 	bl	800167c <assert_failed>

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <RCC_PLLCmd+0x34>)
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	6013      	str	r3, [r2, #0]
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	080018e8 	.word	0x080018e8
 80004a8:	42420060 	.word	0x42420060

080004ac <RCC_SYSCLKConfig>:
*                       - RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_SYSCLKConfig(u32 RCC_SYSCLKSource)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d00a      	beq.n	80004d4 <RCC_SYSCLKConfig+0x28>
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d007      	beq.n	80004d4 <RCC_SYSCLKConfig+0x28>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	d004      	beq.n	80004d4 <RCC_SYSCLKConfig+0x28>
 80004ca:	f240 115b 	movw	r1, #347	; 0x15b
 80004ce:	480b      	ldr	r0, [pc, #44]	; (80004fc <RCC_SYSCLKConfig+0x50>)
 80004d0:	f001 f8d4 	bl	800167c <assert_failed>

  tmpreg = RCC->CFGR;
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <RCC_SYSCLKConfig+0x54>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f023 0303 	bic.w	r3, r3, #3
 80004e2:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80004e4:	68fa      	ldr	r2, [r7, #12]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4313      	orrs	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <RCC_SYSCLKConfig+0x54>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	68fa      	ldr	r2, [r7, #12]
 80004f2:	605a      	str	r2, [r3, #4]
}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	080018e8 	.word	0x080018e8
 8000500:	20000058 	.word	0x20000058

08000504 <RCC_GetSYSCLKSource>:
*                       - 0x00: HSI used as system clock
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <RCC_GetSYSCLKSource+0x1c>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	f003 030c 	and.w	r3, r3, #12
 8000514:	b2db      	uxtb	r3, r3
}
 8000516:	4618      	mov	r0, r3
 8000518:	46bd      	mov	sp, r7
 800051a:	bc80      	pop	{r7}
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	20000058 	.word	0x20000058

08000524 <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f423 43bc 	bic.w	r3, r3, #24064	; 0x5e00
 8000536:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
 800053a:	2b00      	cmp	r3, #0
 800053c:	d102      	bne.n	8000544 <RCC_APB2PeriphClockCmd+0x20>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d104      	bne.n	800054e <RCC_APB2PeriphClockCmd+0x2a>
 8000544:	f240 3125 	movw	r1, #805	; 0x325
 8000548:	4813      	ldr	r0, [pc, #76]	; (8000598 <RCC_APB2PeriphClockCmd+0x74>)
 800054a:	f001 f897 	bl	800167c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 800054e:	78fb      	ldrb	r3, [r7, #3]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d007      	beq.n	8000564 <RCC_APB2PeriphClockCmd+0x40>
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	2b01      	cmp	r3, #1
 8000558:	d004      	beq.n	8000564 <RCC_APB2PeriphClockCmd+0x40>
 800055a:	f240 3126 	movw	r1, #806	; 0x326
 800055e:	480e      	ldr	r0, [pc, #56]	; (8000598 <RCC_APB2PeriphClockCmd+0x74>)
 8000560:	f001 f88c 	bl	800167c <assert_failed>

  if (NewState != DISABLE)
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d008      	beq.n	800057c <RCC_APB2PeriphClockCmd+0x58>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <RCC_APB2PeriphClockCmd+0x78>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	6999      	ldr	r1, [r3, #24]
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <RCC_APB2PeriphClockCmd+0x78>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	430a      	orrs	r2, r1
 8000578:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800057a:	e008      	b.n	800058e <RCC_APB2PeriphClockCmd+0x6a>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <RCC_APB2PeriphClockCmd+0x78>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	6999      	ldr	r1, [r3, #24]
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	43da      	mvns	r2, r3
 8000586:	4b05      	ldr	r3, [pc, #20]	; (800059c <RCC_APB2PeriphClockCmd+0x78>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	400a      	ands	r2, r1
 800058c:	619a      	str	r2, [r3, #24]
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	080018e8 	.word	0x080018e8
 800059c:	20000058 	.word	0x20000058

080005a0 <RCC_GetFlagStatus>:
*                       - RCC_FLAG_LPWRRST: Low Power reset
* Output         : None
* Return         : The new state of RCC_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus RCC_GetFlagStatus(u8 RCC_FLAG)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  u32 tmp = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
  u32 statusreg = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b20      	cmp	r3, #32
 80005ba:	d022      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	2b31      	cmp	r3, #49	; 0x31
 80005c0:	d01f      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	2b39      	cmp	r3, #57	; 0x39
 80005c6:	d01c      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b41      	cmp	r3, #65	; 0x41
 80005cc:	d019      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b61      	cmp	r3, #97	; 0x61
 80005d2:	d016      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	2b7a      	cmp	r3, #122	; 0x7a
 80005d8:	d013      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b7b      	cmp	r3, #123	; 0x7b
 80005de:	d010      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005e0:	79fb      	ldrb	r3, [r7, #7]
 80005e2:	2b7c      	cmp	r3, #124	; 0x7c
 80005e4:	d00d      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b7d      	cmp	r3, #125	; 0x7d
 80005ea:	d00a      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	2b7e      	cmp	r3, #126	; 0x7e
 80005f0:	d007      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	2b7f      	cmp	r3, #127	; 0x7f
 80005f6:	d004      	beq.n	8000602 <RCC_GetFlagStatus+0x62>
 80005f8:	f240 31df 	movw	r1, #991	; 0x3df
 80005fc:	4818      	ldr	r0, [pc, #96]	; (8000660 <RCC_GetFlagStatus+0xc0>)
 80005fe:	f001 f83d 	bl	800167c <assert_failed>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	095b      	lsrs	r3, r3, #5
 8000606:	b2db      	uxtb	r3, r3
 8000608:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d104      	bne.n	800061a <RCC_GetFlagStatus+0x7a>
  {
    statusreg = RCC->CR;
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <RCC_GetFlagStatus+0xc4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	617b      	str	r3, [r7, #20]
 8000618:	e00b      	b.n	8000632 <RCC_GetFlagStatus+0x92>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	2b02      	cmp	r3, #2
 800061e:	d104      	bne.n	800062a <RCC_GetFlagStatus+0x8a>
  {
    statusreg = RCC->BDCR;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <RCC_GetFlagStatus+0xc4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6a1b      	ldr	r3, [r3, #32]
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e003      	b.n	8000632 <RCC_GetFlagStatus+0x92>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <RCC_GetFlagStatus+0xc4>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000630:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 031f 	and.w	r3, r3, #31
 8000638:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 800063a:	697a      	ldr	r2, [r7, #20]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	fa22 f303 	lsr.w	r3, r2, r3
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	2b00      	cmp	r3, #0
 8000648:	d002      	beq.n	8000650 <RCC_GetFlagStatus+0xb0>
  {
    bitstatus = SET;
 800064a:	2301      	movs	r3, #1
 800064c:	74fb      	strb	r3, [r7, #19]
 800064e:	e001      	b.n	8000654 <RCC_GetFlagStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 8000650:	2300      	movs	r3, #0
 8000652:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 8000654:	7cfb      	ldrb	r3, [r7, #19]
}
 8000656:	4618      	mov	r0, r3
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	080018e8 	.word	0x080018e8
 8000664:	20000058 	.word	0x20000058

08000668 <DMAChannel1_IRQHandler>:
void USART3_IRQHandler(void);
void EXTI15_10_IRQHandler(void);
void RTCAlarm_IRQHandler(void);
void USBWakeUp_IRQHandler(void);

void DMAChannel1_IRQHandler(void) {}
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <DMAChannel2_IRQHandler>:
void DMAChannel2_IRQHandler(void) {}
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <DMAChannel3_IRQHandler>:
void DMAChannel3_IRQHandler(void) {}
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr

0800068c <DMAChannel4_IRQHandler>:
void DMAChannel4_IRQHandler(void) {}
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr

08000698 <DMAChannel5_IRQHandler>:
void DMAChannel5_IRQHandler(void) {}
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <DMAChannel6_IRQHandler>:
void DMAChannel6_IRQHandler(void) {}
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <DMAChannel7_IRQHandler>:
void DMAChannel7_IRQHandler(void) {}
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <ADC_IRQHandler>:
void ADC_IRQHandler(void) {}
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 80006c8:	4668      	mov	r0, sp
 80006ca:	f020 0107 	bic.w	r1, r0, #7
 80006ce:	468d      	mov	sp, r1
 80006d0:	b581      	push	{r0, r7, lr}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
    unsigned long *pulSrc, *pulDest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <Reset_Handler+0x5c>)
 80006d8:	607b      	str	r3, [r7, #4]
    for(pulDest = &_sdata; pulDest < &_edata; )
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <Reset_Handler+0x60>)
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	e007      	b.n	80006f0 <Reset_Handler+0x28>
    {
        *(pulDest++) = *(pulSrc++);
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	1d13      	adds	r3, r2, #4
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	1d19      	adds	r1, r3, #4
 80006ea:	6039      	str	r1, [r7, #0]
 80006ec:	6812      	ldr	r2, [r2, #0]
 80006ee:	601a      	str	r2, [r3, #0]
    for(pulDest = &_sdata; pulDest < &_edata; )
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <Reset_Handler+0x64>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d3f3      	bcc.n	80006e0 <Reset_Handler+0x18>
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 80006f8:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <Reset_Handler+0x68>)
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	e004      	b.n	8000708 <Reset_Handler+0x40>
    {
        *(pulDest++) = 0;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	1d1a      	adds	r2, r3, #4
 8000702:	603a      	str	r2, [r7, #0]
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
    for(pulDest = &_sbss; pulDest < &_ebss; )
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <Reset_Handler+0x6c>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d3f6      	bcc.n	80006fe <Reset_Handler+0x36>
    }

    //
    // Call the application's entry point.
    //
    main();
 8000710:	f000 f812 	bl	8000738 <main>
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
 800071e:	4685      	mov	sp, r0
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	08001934 	.word	0x08001934
 8000728:	20000000 	.word	0x20000000
 800072c:	20000000 	.word	0x20000000
 8000730:	20000000 	.word	0x20000000
 8000734:	20000128 	.word	0x20000128

08000738 <main>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
 int main(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
signed long slong0; 
signed long propterm;
signed long intterm;

// wait for power supply to stabilize
long0=0;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
while(long0<1000000) long0++;
 8000742:	e002      	b.n	800074a <main+0x12>
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	3301      	adds	r3, #1
 8000748:	617b      	str	r3, [r7, #20]
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	4aa1      	ldr	r2, [pc, #644]	; (80009d4 <main+0x29c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d9f8      	bls.n	8000744 <main+0xc>
// sk RCC_DeInit();
  
// sk FLASH_SetLatency(FLASH_Latency_2);        // Flash: 2 wait states (HCLK > 48MHz)
// sk FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);  // Enable Prefetch Buffer

RCC->CFGR = 0x00100000; // all dividers to minimum, PLL to *6, HSI selected
 8000752:	4ba1      	ldr	r3, [pc, #644]	; (80009d8 <main+0x2a0>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800075a:	605a      	str	r2, [r3, #4]

long0 =1;
 800075c:	2301      	movs	r3, #1
 800075e:	617b      	str	r3, [r7, #20]

RCC_PLLCmd(ENABLE);       /* Enable PLL */ 
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff fe87 	bl	8000474 <RCC_PLLCmd>
while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);        /* Wait till PLL is ready */
 8000766:	bf00      	nop
 8000768:	2039      	movs	r0, #57	; 0x39
 800076a:	f7ff ff19 	bl	80005a0 <RCC_GetFlagStatus>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0f9      	beq.n	8000768 <main+0x30>
RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);        /* Select PLL as system clock source */
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff fe99 	bl	80004ac <RCC_SYSCLKConfig>
while(RCC_GetSYSCLKSource() != 0x08);        /* Wait till PLL is used as system clock source */
 800077a:	bf00      	nop
 800077c:	f7ff fec2 	bl	8000504 <RCC_GetSYSCLKSource>
 8000780:	4603      	mov	r3, r0
 8000782:	2b08      	cmp	r3, #8
 8000784:	d1fa      	bne.n	800077c <main+0x44>

RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,  ENABLE);
 8000786:	2101      	movs	r1, #1
 8000788:	f44f 7000 	mov.w	r0, #512	; 0x200
 800078c:	f7ff feca 	bl	8000524 <RCC_APB2PeriphClockCmd>
RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000790:	2101      	movs	r1, #1
 8000792:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000796:	f7ff fec5 	bl	8000524 <RCC_APB2PeriphClockCmd>
RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800079a:	2101      	movs	r1, #1
 800079c:	2004      	movs	r0, #4
 800079e:	f7ff fec1 	bl	8000524 <RCC_APB2PeriphClockCmd>
RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 80007a2:	2101      	movs	r1, #1
 80007a4:	2008      	movs	r0, #8
 80007a6:	f7ff febd 	bl	8000524 <RCC_APB2PeriphClockCmd>
RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80007aa:	2101      	movs	r1, #1
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff feb9 	bl	8000524 <RCC_APB2PeriphClockCmd>

AFIO->MAPR= b25;  // free up PA15
 80007b2:	4b8a      	ldr	r3, [pc, #552]	; (80009dc <main+0x2a4>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80007ba:	605a      	str	r2, [r3, #4]

// port A setup
GPIOA->CRH = 0x34443BBB; // 15,11 as PP, 8,9,10 AF PP, rest inputs
 80007bc:	4b88      	ldr	r3, [pc, #544]	; (80009e0 <main+0x2a8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a88      	ldr	r2, [pc, #544]	; (80009e4 <main+0x2ac>)
 80007c2:	605a      	str	r2, [r3, #4]
GPIOA->CRL = 0x00444440; // a7 and a6 and a0 ain
 80007c4:	4b86      	ldr	r3, [pc, #536]	; (80009e0 <main+0x2a8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a87      	ldr	r2, [pc, #540]	; (80009e8 <main+0x2b0>)
 80007ca:	601a      	str	r2, [r3, #0]

// port B setup
GPIOB->CRH = 0xBBB43444; // 15,14,13 AF PP, 11 PP, rest inputs
 80007cc:	4b87      	ldr	r3, [pc, #540]	; (80009ec <main+0x2b4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a87      	ldr	r2, [pc, #540]	; (80009f0 <main+0x2b8>)
 80007d2:	605a      	str	r2, [r3, #4]
GPIOB->CRL = 0x43444440; // b0 ain, b6 GPIO PP
 80007d4:	4b85      	ldr	r3, [pc, #532]	; (80009ec <main+0x2b4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a86      	ldr	r2, [pc, #536]	; (80009f4 <main+0x2bc>)
 80007da:	601a      	str	r2, [r3, #0]
GPIOB->ODR &= ~b11;  //clear pb11 to select bemf off time sampling
 80007dc:	4b83      	ldr	r3, [pc, #524]	; (80009ec <main+0x2b4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68da      	ldr	r2, [r3, #12]
 80007e2:	4b82      	ldr	r3, [pc, #520]	; (80009ec <main+0x2b4>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007ea:	60da      	str	r2, [r3, #12]
  
// tim1 setup
TIM1->SMCR = b15; // make ETR input active low
 80007ec:	4b82      	ldr	r3, [pc, #520]	; (80009f8 <main+0x2c0>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007f4:	811a      	strh	r2, [r3, #8]
TIM1->CR2= b9+b11+b13;
 80007f6:	4b80      	ldr	r3, [pc, #512]	; (80009f8 <main+0x2c0>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80007fe:	809a      	strh	r2, [r3, #4]
TIM1->CCR1= 0;
 8000800:	4b7d      	ldr	r3, [pc, #500]	; (80009f8 <main+0x2c0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	869a      	strh	r2, [r3, #52]	; 0x34
TIM1->CCR2= 0;
 8000808:	4b7b      	ldr	r3, [pc, #492]	; (80009f8 <main+0x2c0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2200      	movs	r2, #0
 800080e:	871a      	strh	r2, [r3, #56]	; 0x38
TIM1->CCR3= 0;
 8000810:	4b79      	ldr	r3, [pc, #484]	; (80009f8 <main+0x2c0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	879a      	strh	r2, [r3, #60]	; 0x3c
TIM1->CCR4= 1100;
 8000818:	4b77      	ldr	r3, [pc, #476]	; (80009f8 <main+0x2c0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f240 424c 	movw	r2, #1100	; 0x44c
 8000820:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
TIM1->ARR=1200;
 8000824:	4b74      	ldr	r3, [pc, #464]	; (80009f8 <main+0x2c0>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800082c:	859a      	strh	r2, [r3, #44]	; 0x2c
TIM1->CR1=0x0001;
 800082e:	4b72      	ldr	r3, [pc, #456]	; (80009f8 <main+0x2c0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2201      	movs	r2, #1
 8000834:	801a      	strh	r2, [r3, #0]
// b12 to enable brk input
TIM1->BDTR= b15+b12+b11+16;  // 2 usec dead time and set MOE
 8000836:	4b70      	ldr	r3, [pc, #448]	; (80009f8 <main+0x2c0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f649 0210 	movw	r2, #38928	; 0x9810
 800083e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
// note: b15 b7 and b7 are to enable   based current limit
TIM1->CCMR1= 0x6868 +b15 + b7; 
 8000842:	4b6d      	ldr	r3, [pc, #436]	; (80009f8 <main+0x2c0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f64e 02e8 	movw	r2, #59624	; 0xe8e8
 800084a:	831a      	strh	r2, [r3, #24]
TIM1->CCMR2= 0x6868 +b7; 
 800084c:	4b6a      	ldr	r3, [pc, #424]	; (80009f8 <main+0x2c0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f646 02e8 	movw	r2, #26856	; 0x68e8
 8000854:	839a      	strh	r2, [r3, #28]
// b4 for cc4 and b7 for brk interrupt
TIM1->DIER = b4+b7;  // enable cc4 interrupt
 8000856:	4b68      	ldr	r3, [pc, #416]	; (80009f8 <main+0x2c0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2290      	movs	r2, #144	; 0x90
 800085c:	819a      	strh	r2, [r3, #12]
// sk RCC->APB1ENR |= b29; // enable DAC peripheral clock

// sk DAC->CR = b16+b0 ; // enable both DACs

// ADC setup
ADC1->CR2=0x00000001;  // turn ADC on
 800085e:	4b67      	ldr	r3, [pc, #412]	; (80009fc <main+0x2c4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2201      	movs	r2, #1
 8000864:	609a      	str	r2, [r3, #8]
ADC_StartCalibration(ADC1);
 8000866:	4b65      	ldr	r3, [pc, #404]	; (80009fc <main+0x2c4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fc6e 	bl	800014c <ADC_StartCalibration>
while (ADC_GetCalibrationStatus(ADC1) );
 8000870:	bf00      	nop
 8000872:	4b62      	ldr	r3, [pc, #392]	; (80009fc <main+0x2c4>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fc77 	bl	800016a <ADC_GetCalibrationStatus>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d1f7      	bne.n	8000872 <main+0x13a>
ADC1->CR1=0x00000800;  // enable discontinuous regular conversion
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <main+0x2c4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800088a:	605a      	str	r2, [r3, #4]
ADC1->CR2=0x00000001;  // turn ADC on
 800088c:	4b5b      	ldr	r3, [pc, #364]	; (80009fc <main+0x2c4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2201      	movs	r2, #1
 8000892:	609a      	str	r2, [r3, #8]

// initialization
globalcounter=0;
 8000894:	4b5a      	ldr	r3, [pc, #360]	; (8000a00 <main+0x2c8>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
heartbeat1time=0;
 800089a:	4b5a      	ldr	r3, [pc, #360]	; (8000a04 <main+0x2cc>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
heartbeat2time=0;
 80008a0:	4b59      	ldr	r3, [pc, #356]	; (8000a08 <main+0x2d0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
heartbeat3time=0;
 80008a6:	4b59      	ldr	r3, [pc, #356]	; (8000a0c <main+0x2d4>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
run=0;
 80008ac:	4b58      	ldr	r3, [pc, #352]	; (8000a10 <main+0x2d8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
motorstartinit();
 80008b2:	f000 fe17 	bl	80014e4 <motorstartinit>

// get ifb average offset level
long0=1;
 80008b6:	2301      	movs	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
long1=0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
while(long0<1025)
 80008be:	e018      	b.n	80008f2 <main+0x1ba>
{
ADC1->SQR3=0x00000000; // current sense adc channel
 80008c0:	4b4e      	ldr	r3, [pc, #312]	; (80009fc <main+0x2c4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2200      	movs	r2, #0
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
ADC1->CR2=0x00000001;  // start ADC conversion of bemf
 80008c8:	4b4c      	ldr	r3, [pc, #304]	; (80009fc <main+0x2c4>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2201      	movs	r2, #1
 80008ce:	609a      	str	r2, [r3, #8]
while((ADC1->SR & b1)==0) ; // wait for conversion to complete
 80008d0:	bf00      	nop
 80008d2:	4b4a      	ldr	r3, [pc, #296]	; (80009fc <main+0x2c4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 0302 	and.w	r3, r3, #2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0f8      	beq.n	80008d2 <main+0x19a>
long1 = long1 + ADC1->DR;
 80008e0:	4b46      	ldr	r3, [pc, #280]	; (80009fc <main+0x2c4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4413      	add	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
long0++; // inc loop counter
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
while(long0<1025)
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008f8:	d9e2      	bls.n	80008c0 <main+0x188>
}
ifboffset = long1>>10; // average = sum div by 1024
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	0a9b      	lsrs	r3, r3, #10
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b44      	ldr	r3, [pc, #272]	; (8000a14 <main+0x2dc>)
 8000902:	801a      	strh	r2, [r3, #0]

NVIC_InitTypeDef NVIC_InitStructure;
// enable tim1 CC interrupt
NVIC_InitStructure.NVIC_IRQChannel = TIM1_CC_IRQChannel;
 8000904:	231b      	movs	r3, #27
 8000906:	703b      	strb	r3, [r7, #0]
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	707b      	strb	r3, [r7, #1]
NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 800090c:	2303      	movs	r3, #3
 800090e:	70bb      	strb	r3, [r7, #2]
NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000910:	2301      	movs	r3, #1
 8000912:	70fb      	strb	r3, [r7, #3]
NVIC_Init(&NVIC_InitStructure);
 8000914:	463b      	mov	r3, r7
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff fc3e 	bl	8000198 <NVIC_Init>

// enable tim1 brk interrupt
NVIC_InitStructure.NVIC_IRQChannel = TIM1_BRK_IRQChannel;
 800091c:	2318      	movs	r3, #24
 800091e:	703b      	strb	r3, [r7, #0]
NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000920:	2301      	movs	r3, #1
 8000922:	707b      	strb	r3, [r7, #1]
NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8000924:	2303      	movs	r3, #3
 8000926:	70bb      	strb	r3, [r7, #2]
NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000928:	2301      	movs	r3, #1
 800092a:	70fb      	strb	r3, [r7, #3]
NVIC_Init(&NVIC_InitStructure);
 800092c:	463b      	mov	r3, r7
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff fc32 	bl	8000198 <NVIC_Init>
  
while (1) // main background loop
{

long0 = globalcounter - heartbeat1time;
 8000934:	4b32      	ldr	r3, [pc, #200]	; (8000a00 <main+0x2c8>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b32      	ldr	r3, [pc, #200]	; (8000a04 <main+0x2cc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	1ad3      	subs	r3, r2, r3
 800093e:	617b      	str	r3, [r7, #20]
if(long0>1) 
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d927      	bls.n	8000996 <main+0x25e>
// ******************** 100 microsecond routine ************************
{
heartbeat1time=globalcounter;
 8000946:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <main+0x2c8>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a2e      	ldr	r2, [pc, #184]	; (8000a04 <main+0x2cc>)
 800094c:	6013      	str	r3, [r2, #0]

// ***** state variable speed observer *****
slong0= position - (positionest>>12);// observer position error
 800094e:	4b32      	ldr	r3, [pc, #200]	; (8000a18 <main+0x2e0>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <main+0x2e4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	0b1b      	lsrs	r3, r3, #12
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	60fb      	str	r3, [r7, #12]
speedest = slong0;  // store speed estimate
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	b21a      	sxth	r2, r3
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <main+0x2e8>)
 8000962:	801a      	strh	r2, [r3, #0]
// integrate estimated speed into estimated position
positionest = positionest + speedest ; 
 8000964:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <main+0x2e8>)
 8000966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800096a:	461a      	mov	r2, r3
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <main+0x2e4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4413      	add	r3, r2
 8000972:	4a2a      	ldr	r2, [pc, #168]	; (8000a1c <main+0x2e4>)
 8000974:	6013      	str	r3, [r2, #0]

// catch eventual rollover of positionest (and position) and prevent
if( positionest & 0x80000000 ) // if positionest is greater than half range
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <main+0x2e4>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	da0b      	bge.n	8000996 <main+0x25e>
{
positionest= positionest & 0x7FFFFFFF; // subtract 0x80000000
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <main+0x2e4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000986:	4a25      	ldr	r2, [pc, #148]	; (8000a1c <main+0x2e4>)
 8000988:	6013      	str	r3, [r2, #0]
position=position-524288; // subtract (0x80000000>>12)
 800098a:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <main+0x2e0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8000992:	4a21      	ldr	r2, [pc, #132]	; (8000a18 <main+0x2e0>)
 8000994:	6013      	str	r3, [r2, #0]
}
} // ***************** end of 100 usec routine **********************


long0 = globalcounter - heartbeat2time;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <main+0x2c8>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <main+0x2d0>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	617b      	str	r3, [r7, #20]
if(long0>19) 
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	2b13      	cmp	r3, #19
 80009a6:	f240 813e 	bls.w	8000c26 <main+0x4ee>
// ******************** 1 millisecond routine *************************
{
heartbeat2time=globalcounter;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <main+0x2c8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <main+0x2d0>)
 80009b0:	6013      	str	r3, [r2, #0]




// overload function
if((ifbave>overloadthreshold) && !overloadflag)
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <main+0x2ec>)
 80009b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80009b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80009bc:	dd38      	ble.n	8000a30 <main+0x2f8>
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <main+0x2f0>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d134      	bne.n	8000a30 <main+0x2f8>
{
overloadcounter=overloadcounter+overloaduprate;
 80009c6:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <main+0x2f4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3364      	adds	r3, #100	; 0x64
 80009cc:	4a17      	ldr	r2, [pc, #92]	; (8000a2c <main+0x2f4>)
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	e033      	b.n	8000a3a <main+0x302>
 80009d2:	bf00      	nop
 80009d4:	000f423f 	.word	0x000f423f
 80009d8:	20000058 	.word	0x20000058
 80009dc:	20000060 	.word	0x20000060
 80009e0:	20000070 	.word	0x20000070
 80009e4:	34443bbb 	.word	0x34443bbb
 80009e8:	00444440 	.word	0x00444440
 80009ec:	20000098 	.word	0x20000098
 80009f0:	bbb43444 	.word	0xbbb43444
 80009f4:	43444440 	.word	0x43444440
 80009f8:	20000054 	.word	0x20000054
 80009fc:	2000009c 	.word	0x2000009c
 8000a00:	20000108 	.word	0x20000108
 8000a04:	200000e8 	.word	0x200000e8
 8000a08:	200000ac 	.word	0x200000ac
 8000a0c:	200000f8 	.word	0x200000f8
 8000a10:	20000104 	.word	0x20000104
 8000a14:	200000d0 	.word	0x200000d0
 8000a18:	200000b0 	.word	0x200000b0
 8000a1c:	20000120 	.word	0x20000120
 8000a20:	20000126 	.word	0x20000126
 8000a24:	200000d8 	.word	0x200000d8
 8000a28:	2000010c 	.word	0x2000010c
 8000a2c:	20000100 	.word	0x20000100
}
else overloadcounter=overloadcounter-overloaddownrate;
 8000a30:	4b62      	ldr	r3, [pc, #392]	; (8000bbc <main+0x484>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	3b64      	subs	r3, #100	; 0x64
 8000a36:	4a61      	ldr	r2, [pc, #388]	; (8000bbc <main+0x484>)
 8000a38:	6013      	str	r3, [r2, #0]
if(overloadcounter<0) {overloadcounter=0; overloadflag=0; }
 8000a3a:	4b60      	ldr	r3, [pc, #384]	; (8000bbc <main+0x484>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	da05      	bge.n	8000a4e <main+0x316>
 8000a42:	4b5e      	ldr	r3, [pc, #376]	; (8000bbc <main+0x484>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	4b5d      	ldr	r3, [pc, #372]	; (8000bc0 <main+0x488>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
if(overloadcounter>1000000) overloadflag=255;
 8000a4e:	4b5b      	ldr	r3, [pc, #364]	; (8000bbc <main+0x484>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a5c      	ldr	r2, [pc, #368]	; (8000bc4 <main+0x48c>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	dd02      	ble.n	8000a5e <main+0x326>
 8000a58:	4b59      	ldr	r3, [pc, #356]	; (8000bc0 <main+0x488>)
 8000a5a:	22ff      	movs	r2, #255	; 0xff
 8000a5c:	701a      	strb	r2, [r3, #0]

if((ifb>overloadsetpoint) && overloadflag)
 8000a5e:	4b5a      	ldr	r3, [pc, #360]	; (8000bc8 <main+0x490>)
 8000a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a68:	dd0a      	ble.n	8000a80 <main+0x348>
 8000a6a:	4b55      	ldr	r3, [pc, #340]	; (8000bc0 <main+0x488>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d006      	beq.n	8000a80 <main+0x348>
{
overloaddclimit = overloaddclimit-3;
 8000a72:	4b56      	ldr	r3, [pc, #344]	; (8000bcc <main+0x494>)
 8000a74:	881b      	ldrh	r3, [r3, #0]
 8000a76:	3b03      	subs	r3, #3
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	4b54      	ldr	r3, [pc, #336]	; (8000bcc <main+0x494>)
 8000a7c:	801a      	strh	r2, [r3, #0]
 8000a7e:	e005      	b.n	8000a8c <main+0x354>
}
else
{
overloaddclimit = overloaddclimit+1;
 8000a80:	4b52      	ldr	r3, [pc, #328]	; (8000bcc <main+0x494>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b50      	ldr	r3, [pc, #320]	; (8000bcc <main+0x494>)
 8000a8a:	801a      	strh	r2, [r3, #0]
}

if(overloaddclimit>1000) overloaddclimit=1000;
 8000a8c:	4b4f      	ldr	r3, [pc, #316]	; (8000bcc <main+0x494>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a94:	d903      	bls.n	8000a9e <main+0x366>
 8000a96:	4b4d      	ldr	r3, [pc, #308]	; (8000bcc <main+0x494>)
 8000a98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a9c:	801a      	strh	r2, [r3, #0]
if(overloaddclimit<100) overloaddclimit=100;
 8000a9e:	4b4b      	ldr	r3, [pc, #300]	; (8000bcc <main+0x494>)
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	2b63      	cmp	r3, #99	; 0x63
 8000aa4:	d802      	bhi.n	8000aac <main+0x374>
 8000aa6:	4b49      	ldr	r3, [pc, #292]	; (8000bcc <main+0x494>)
 8000aa8:	2264      	movs	r2, #100	; 0x64
 8000aaa:	801a      	strh	r2, [r3, #0]


// calculate rpm from speedest
long0 = (speedest*6250)>>8;
 8000aac:	4b48      	ldr	r3, [pc, #288]	; (8000bd0 <main+0x498>)
 8000aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	f641 036a 	movw	r3, #6250	; 0x186a
 8000ab8:	fb03 f302 	mul.w	r3, r3, r2
 8000abc:	121b      	asrs	r3, r3, #8
 8000abe:	617b      	str	r3, [r7, #20]
rpm = long0/polepairs;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	4a44      	ldr	r2, [pc, #272]	; (8000bd4 <main+0x49c>)
 8000ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac8:	089b      	lsrs	r3, r3, #2
 8000aca:	b21a      	sxth	r2, r3
 8000acc:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <main+0x4a0>)
 8000ace:	801a      	strh	r2, [r3, #0]


// *************** speed regulator  *********************************
slong0 = rpmref - rpm;  // speed error
 8000ad0:	4b42      	ldr	r3, [pc, #264]	; (8000bdc <main+0x4a4>)
 8000ad2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <main+0x4a0>)
 8000ada:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	60fb      	str	r3, [r7, #12]
propterm = (slong0*propgain)>>8;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	029b      	lsls	r3, r3, #10
 8000ae6:	121b      	asrs	r3, r3, #8
 8000ae8:	60bb      	str	r3, [r7, #8]
errorint = errorint + slong0;
 8000aea:	4b3d      	ldr	r3, [pc, #244]	; (8000be0 <main+0x4a8>)
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4413      	add	r3, r2
 8000af2:	4a3b      	ldr	r2, [pc, #236]	; (8000be0 <main+0x4a8>)
 8000af4:	6013      	str	r3, [r2, #0]
// set activedc to the lower of maxdc or overloaddclimit
if(maxdc<overloaddclimit) activedclimit=maxdc; 
 8000af6:	4b3b      	ldr	r3, [pc, #236]	; (8000be4 <main+0x4ac>)
 8000af8:	881a      	ldrh	r2, [r3, #0]
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <main+0x494>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d204      	bcs.n	8000b0c <main+0x3d4>
 8000b02:	4b38      	ldr	r3, [pc, #224]	; (8000be4 <main+0x4ac>)
 8000b04:	881a      	ldrh	r2, [r3, #0]
 8000b06:	4b38      	ldr	r3, [pc, #224]	; (8000be8 <main+0x4b0>)
 8000b08:	801a      	strh	r2, [r3, #0]
 8000b0a:	e003      	b.n	8000b14 <main+0x3dc>
else activedclimit = overloaddclimit;
 8000b0c:	4b2f      	ldr	r3, [pc, #188]	; (8000bcc <main+0x494>)
 8000b0e:	881a      	ldrh	r2, [r3, #0]
 8000b10:	4b35      	ldr	r3, [pc, #212]	; (8000be8 <main+0x4b0>)
 8000b12:	801a      	strh	r2, [r3, #0]

slong0 = activedclimit - propterm;
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <main+0x4b0>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	60fb      	str	r3, [r7, #12]
if(slong0<0) slong0=0; // slong0 holds maximum allowable intterm
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da01      	bge.n	8000b2a <main+0x3f2>
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]

slong0 = slong0 * intclampscaler; // slong0 holds max error integral
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	019b      	lsls	r3, r3, #6
 8000b2e:	60fb      	str	r3, [r7, #12]
if(errorint>slong0) errorint=slong0;
 8000b30:	4b2b      	ldr	r3, [pc, #172]	; (8000be0 <main+0x4a8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	da02      	bge.n	8000b40 <main+0x408>
 8000b3a:	4a29      	ldr	r2, [pc, #164]	; (8000be0 <main+0x4a8>)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	6013      	str	r3, [r2, #0]
if(errorint<0) errorint=0;
 8000b40:	4b27      	ldr	r3, [pc, #156]	; (8000be0 <main+0x4a8>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	da02      	bge.n	8000b4e <main+0x416>
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <main+0x4a8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]

intterm = (errorint*intgain)>>10;
 8000b4e:	4b24      	ldr	r3, [pc, #144]	; (8000be0 <main+0x4a8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	011b      	lsls	r3, r3, #4
 8000b54:	129b      	asrs	r3, r3, #10
 8000b56:	607b      	str	r3, [r7, #4]

slong0 = propterm + intterm;
 8000b58:	68ba      	ldr	r2, [r7, #8]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	60fb      	str	r3, [r7, #12]

if(slong0>activedclimit) slong0=activedclimit;
 8000b60:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <main+0x4b0>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	461a      	mov	r2, r3
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	dd02      	ble.n	8000b72 <main+0x43a>
 8000b6c:	4b1e      	ldr	r3, [pc, #120]	; (8000be8 <main+0x4b0>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	60fb      	str	r3, [r7, #12]
if(slong0<100) slong0=100;
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	2b63      	cmp	r3, #99	; 0x63
 8000b76:	dc01      	bgt.n	8000b7c <main+0x444>
 8000b78:	2364      	movs	r3, #100	; 0x64
 8000b7a:	60fb      	str	r3, [r7, #12]

if( (zcfound) && (transitioncounter<100)) transitioncounter++;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <main+0x4b4>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d008      	beq.n	8000b96 <main+0x45e>
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <main+0x4b8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b63      	cmp	r3, #99	; 0x63
 8000b8a:	d804      	bhi.n	8000b96 <main+0x45e>
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <main+0x4b8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a17      	ldr	r2, [pc, #92]	; (8000bf0 <main+0x4b8>)
 8000b94:	6013      	str	r3, [r2, #0]
if(transitioncounter<100)
 8000b96:	4b16      	ldr	r3, [pc, #88]	; (8000bf0 <main+0x4b8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2b63      	cmp	r3, #99	; 0x63
 8000b9c:	d82c      	bhi.n	8000bf8 <main+0x4c0>
{
runningdc=500;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <main+0x4bc>)
 8000ba0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ba4:	801a      	strh	r2, [r3, #0]
errorint = 500 * intclampscaler;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <main+0x4a8>)
 8000ba8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000bac:	601a      	str	r2, [r3, #0]
rpmref = rpm;
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <main+0x4a0>)
 8000bb0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bb4:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <main+0x4a4>)
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	e022      	b.n	8000c00 <main+0x4c8>
 8000bba:	bf00      	nop
 8000bbc:	20000100 	.word	0x20000100
 8000bc0:	2000010c 	.word	0x2000010c
 8000bc4:	000f4240 	.word	0x000f4240
 8000bc8:	200000ee 	.word	0x200000ee
 8000bcc:	200000d6 	.word	0x200000d6
 8000bd0:	20000126 	.word	0x20000126
 8000bd4:	cccccccd 	.word	0xcccccccd
 8000bd8:	200000e4 	.word	0x200000e4
 8000bdc:	200000ba 	.word	0x200000ba
 8000be0:	200000dc 	.word	0x200000dc
 8000be4:	200000f0 	.word	0x200000f0
 8000be8:	200000f4 	.word	0x200000f4
 8000bec:	200000cf 	.word	0x200000cf
 8000bf0:	200000e0 	.word	0x200000e0
 8000bf4:	200000da 	.word	0x200000da
}
else
{
runningdc=slong0;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	4b9c      	ldr	r3, [pc, #624]	; (8000e70 <main+0x738>)
 8000bfe:	801a      	strh	r2, [r3, #0]
}

if(zcfound)
 8000c00:	4b9c      	ldr	r3, [pc, #624]	; (8000e74 <main+0x73c>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00e      	beq.n	8000c26 <main+0x4ee>
{
TIM1->CCR1= runningdc;
 8000c08:	4b9b      	ldr	r3, [pc, #620]	; (8000e78 <main+0x740>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a98      	ldr	r2, [pc, #608]	; (8000e70 <main+0x738>)
 8000c0e:	8812      	ldrh	r2, [r2, #0]
 8000c10:	869a      	strh	r2, [r3, #52]	; 0x34
TIM1->CCR2= runningdc;
 8000c12:	4b99      	ldr	r3, [pc, #612]	; (8000e78 <main+0x740>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a96      	ldr	r2, [pc, #600]	; (8000e70 <main+0x738>)
 8000c18:	8812      	ldrh	r2, [r2, #0]
 8000c1a:	871a      	strh	r2, [r3, #56]	; 0x38
TIM1->CCR3= runningdc;
 8000c1c:	4b96      	ldr	r3, [pc, #600]	; (8000e78 <main+0x740>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a93      	ldr	r2, [pc, #588]	; (8000e70 <main+0x738>)
 8000c22:	8812      	ldrh	r2, [r2, #0]
 8000c24:	879a      	strh	r2, [r3, #60]	; 0x3c
} // ************** end of 1 millisecond routine *************************




long0 = globalcounter - heartbeat3time;
 8000c26:	4b95      	ldr	r3, [pc, #596]	; (8000e7c <main+0x744>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b95      	ldr	r3, [pc, #596]	; (8000e80 <main+0x748>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	617b      	str	r3, [r7, #20]
if(long0>199) 
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	2bc7      	cmp	r3, #199	; 0xc7
 8000c36:	d94e      	bls.n	8000cd6 <main+0x59e>
{
// ******************** 10 millisecond routine *************************

heartbeat3time=globalcounter;
 8000c38:	4b90      	ldr	r3, [pc, #576]	; (8000e7c <main+0x744>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a90      	ldr	r2, [pc, #576]	; (8000e80 <main+0x748>)
 8000c3e:	6013      	str	r3, [r2, #0]

potvalue = 4095 - adcread(2);  // read pot channel
 8000c40:	2002      	movs	r0, #2
 8000c42:	f000 f933 	bl	8000eac <adcread>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000c4c:	330f      	adds	r3, #15
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	4b8c      	ldr	r3, [pc, #560]	; (8000e84 <main+0x74c>)
 8000c52:	801a      	strh	r2, [r3, #0]

//sk: next line
potvalue = 2024;
 8000c54:	4b8b      	ldr	r3, [pc, #556]	; (8000e84 <main+0x74c>)
 8000c56:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8000c5a:	801a      	strh	r2, [r3, #0]

if(potvalue>200) run=255;
 8000c5c:	4b89      	ldr	r3, [pc, #548]	; (8000e84 <main+0x74c>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	2bc8      	cmp	r3, #200	; 0xc8
 8000c62:	d902      	bls.n	8000c6a <main+0x532>
 8000c64:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <main+0x750>)
 8000c66:	22ff      	movs	r2, #255	; 0xff
 8000c68:	701a      	strb	r2, [r3, #0]
if(potvalue<100) run=0;
 8000c6a:	4b86      	ldr	r3, [pc, #536]	; (8000e84 <main+0x74c>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	2b63      	cmp	r3, #99	; 0x63
 8000c70:	d802      	bhi.n	8000c78 <main+0x540>
 8000c72:	4b85      	ldr	r3, [pc, #532]	; (8000e88 <main+0x750>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
rpmcmd = potvalue>>2;
 8000c78:	4b82      	ldr	r3, [pc, #520]	; (8000e84 <main+0x74c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	4b82      	ldr	r3, [pc, #520]	; (8000e8c <main+0x754>)
 8000c84:	801a      	strh	r2, [r3, #0]
if(rpmcmd<100) rpmcmd=100;
 8000c86:	4b81      	ldr	r3, [pc, #516]	; (8000e8c <main+0x754>)
 8000c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8c:	2b63      	cmp	r3, #99	; 0x63
 8000c8e:	dc02      	bgt.n	8000c96 <main+0x55e>
 8000c90:	4b7e      	ldr	r3, [pc, #504]	; (8000e8c <main+0x754>)
 8000c92:	2264      	movs	r2, #100	; 0x64
 8000c94:	801a      	strh	r2, [r3, #0]


// accel/decel control
slong0 = rpmcmd-rpmref;
 8000c96:	4b7d      	ldr	r3, [pc, #500]	; (8000e8c <main+0x754>)
 8000c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b7c      	ldr	r3, [pc, #496]	; (8000e90 <main+0x758>)
 8000ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	60fb      	str	r3, [r7, #12]
if(slong0>acclim) slong0=acclim;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	dd01      	ble.n	8000cb2 <main+0x57a>
 8000cae:	2305      	movs	r3, #5
 8000cb0:	60fb      	str	r3, [r7, #12]
if(slong0<-declim) slong0=-declim;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f113 0f05 	cmn.w	r3, #5
 8000cb8:	da02      	bge.n	8000cc0 <main+0x588>
 8000cba:	f06f 0304 	mvn.w	r3, #4
 8000cbe:	60fb      	str	r3, [r7, #12]
rpmref = rpmref + slong0;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	4b72      	ldr	r3, [pc, #456]	; (8000e90 <main+0x758>)
 8000cc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	4413      	add	r3, r2
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	4b6f      	ldr	r3, [pc, #444]	; (8000e90 <main+0x758>)
 8000cd4:	801a      	strh	r2, [r3, #0]




// background code that runs with every loop
if(overcurrent) flashcount=2;
 8000cd6:	4b6f      	ldr	r3, [pc, #444]	; (8000e94 <main+0x75c>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <main+0x5ac>
 8000cde:	4b6e      	ldr	r3, [pc, #440]	; (8000e98 <main+0x760>)
 8000ce0:	2202      	movs	r2, #2
 8000ce2:	701a      	strb	r2, [r3, #0]

switch(ledstate)
 8000ce4:	4b6d      	ldr	r3, [pc, #436]	; (8000e9c <main+0x764>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b28      	cmp	r3, #40	; 0x28
 8000cea:	f63f ae23 	bhi.w	8000934 <main+0x1fc>
 8000cee:	a201      	add	r2, pc, #4	; (adr r2, 8000cf4 <main+0x5bc>)
 8000cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf4:	08000d99 	.word	0x08000d99
 8000cf8:	08000935 	.word	0x08000935
 8000cfc:	08000935 	.word	0x08000935
 8000d00:	08000935 	.word	0x08000935
 8000d04:	08000935 	.word	0x08000935
 8000d08:	08000935 	.word	0x08000935
 8000d0c:	08000935 	.word	0x08000935
 8000d10:	08000935 	.word	0x08000935
 8000d14:	08000935 	.word	0x08000935
 8000d18:	08000935 	.word	0x08000935
 8000d1c:	08000dd1 	.word	0x08000dd1
 8000d20:	08000935 	.word	0x08000935
 8000d24:	08000935 	.word	0x08000935
 8000d28:	08000935 	.word	0x08000935
 8000d2c:	08000935 	.word	0x08000935
 8000d30:	08000935 	.word	0x08000935
 8000d34:	08000935 	.word	0x08000935
 8000d38:	08000935 	.word	0x08000935
 8000d3c:	08000935 	.word	0x08000935
 8000d40:	08000935 	.word	0x08000935
 8000d44:	08000deb 	.word	0x08000deb
 8000d48:	08000935 	.word	0x08000935
 8000d4c:	08000935 	.word	0x08000935
 8000d50:	08000935 	.word	0x08000935
 8000d54:	08000935 	.word	0x08000935
 8000d58:	08000935 	.word	0x08000935
 8000d5c:	08000935 	.word	0x08000935
 8000d60:	08000935 	.word	0x08000935
 8000d64:	08000935 	.word	0x08000935
 8000d68:	08000935 	.word	0x08000935
 8000d6c:	08000e09 	.word	0x08000e09
 8000d70:	08000935 	.word	0x08000935
 8000d74:	08000935 	.word	0x08000935
 8000d78:	08000935 	.word	0x08000935
 8000d7c:	08000935 	.word	0x08000935
 8000d80:	08000935 	.word	0x08000935
 8000d84:	08000935 	.word	0x08000935
 8000d88:	08000935 	.word	0x08000935
 8000d8c:	08000935 	.word	0x08000935
 8000d90:	08000935 	.word	0x08000935
 8000d94:	08000e31 	.word	0x08000e31
{
case 0:
if(flashcount==0){ledon; break;}// led on and break
 8000d98:	4b3f      	ldr	r3, [pc, #252]	; (8000e98 <main+0x760>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d108      	bne.n	8000db2 <main+0x67a>
 8000da0:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <main+0x768>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	68da      	ldr	r2, [r3, #12]
 8000da6:	4b3e      	ldr	r3, [pc, #248]	; (8000ea0 <main+0x768>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	e05c      	b.n	8000e6c <main+0x734>
ledoff;
 8000db2:	4b3b      	ldr	r3, [pc, #236]	; (8000ea0 <main+0x768>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	68da      	ldr	r2, [r3, #12]
 8000db8:	4b39      	ldr	r3, [pc, #228]	; (8000ea0 <main+0x768>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000dc0:	60da      	str	r2, [r3, #12]
ledtime=0;
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <main+0x76c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
ledstate=10;
 8000dc8:	4b34      	ldr	r3, [pc, #208]	; (8000e9c <main+0x764>)
 8000dca:	220a      	movs	r2, #10
 8000dcc:	701a      	strb	r2, [r3, #0]
break;
 8000dce:	e04d      	b.n	8000e6c <main+0x734>

case 10:  // waiting out long pause
if((ledtime)<30000) break;
 8000dd0:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <main+0x76c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f247 522f 	movw	r2, #29999	; 0x752f
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d942      	bls.n	8000e62 <main+0x72a>
ledstate=20; 
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <main+0x764>)
 8000dde:	2214      	movs	r2, #20
 8000de0:	701a      	strb	r2, [r3, #0]
flashcounter=0;
 8000de2:	4b31      	ldr	r3, [pc, #196]	; (8000ea8 <main+0x770>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
break;
 8000de8:	e040      	b.n	8000e6c <main+0x734>

case 20: // long pause over
ledon;
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <main+0x768>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	4b2b      	ldr	r3, [pc, #172]	; (8000ea0 <main+0x768>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000df8:	60da      	str	r2, [r3, #12]
ledtime=0;
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <main+0x76c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
ledstate=30;
 8000e00:	4b26      	ldr	r3, [pc, #152]	; (8000e9c <main+0x764>)
 8000e02:	221e      	movs	r2, #30
 8000e04:	701a      	strb	r2, [r3, #0]
break;
 8000e06:	e031      	b.n	8000e6c <main+0x734>

case 30: // waiting out short on time
if(ledtime<8000) break;
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <main+0x76c>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000e10:	d329      	bcc.n	8000e66 <main+0x72e>
ledoff;
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <main+0x768>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	68da      	ldr	r2, [r3, #12]
 8000e18:	4b21      	ldr	r3, [pc, #132]	; (8000ea0 <main+0x768>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000e20:	60da      	str	r2, [r3, #12]
ledtime=0;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <main+0x76c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
ledstate=40;
 8000e28:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <main+0x764>)
 8000e2a:	2228      	movs	r2, #40	; 0x28
 8000e2c:	701a      	strb	r2, [r3, #0]
break;
 8000e2e:	e01d      	b.n	8000e6c <main+0x734>

case 40: // waiting out short off time
if(ledtime<8000) break;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <main+0x76c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000e38:	d317      	bcc.n	8000e6a <main+0x732>
flashcounter++;
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <main+0x770>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <main+0x770>)
 8000e44:	701a      	strb	r2, [r3, #0]
if(flashcounter>=flashcount) {ledstate=0; break;}
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <main+0x770>)
 8000e48:	781a      	ldrb	r2, [r3, #0]
 8000e4a:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <main+0x760>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d303      	bcc.n	8000e5a <main+0x722>
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <main+0x764>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	701a      	strb	r2, [r3, #0]
 8000e58:	e008      	b.n	8000e6c <main+0x734>
ledstate=20;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <main+0x764>)
 8000e5c:	2214      	movs	r2, #20
 8000e5e:	701a      	strb	r2, [r3, #0]
break;
 8000e60:	e004      	b.n	8000e6c <main+0x734>
if((ledtime)<30000) break;
 8000e62:	bf00      	nop
 8000e64:	e566      	b.n	8000934 <main+0x1fc>
if(ledtime<8000) break;
 8000e66:	bf00      	nop
 8000e68:	e564      	b.n	8000934 <main+0x1fc>
if(ledtime<8000) break;
 8000e6a:	bf00      	nop
long0 = globalcounter - heartbeat1time;
 8000e6c:	e562      	b.n	8000934 <main+0x1fc>
 8000e6e:	bf00      	nop
 8000e70:	200000da 	.word	0x200000da
 8000e74:	200000cf 	.word	0x200000cf
 8000e78:	20000054 	.word	0x20000054
 8000e7c:	20000108 	.word	0x20000108
 8000e80:	200000f8 	.word	0x200000f8
 8000e84:	200000c4 	.word	0x200000c4
 8000e88:	20000104 	.word	0x20000104
 8000e8c:	200000cc 	.word	0x200000cc
 8000e90:	200000ba 	.word	0x200000ba
 8000e94:	20000118 	.word	0x20000118
 8000e98:	200000fc 	.word	0x200000fc
 8000e9c:	200000a8 	.word	0x200000a8
 8000ea0:	20000070 	.word	0x20000070
 8000ea4:	200000c0 	.word	0x200000c0
 8000ea8:	20000124 	.word	0x20000124

08000eac <adcread>:
} // end of main



unsigned short adcread( unsigned char chnl)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
unsigned short result;

ADC1->SQR3=chnl; // set adc channel
 8000eb6:	4b33      	ldr	r3, [pc, #204]	; (8000f84 <adcread+0xd8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	635a      	str	r2, [r3, #52]	; 0x34
ADC1->CR2=1;  // start ADC conversion of bemf
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <adcread+0xd8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	609a      	str	r2, [r3, #8]
while((ADC1->SR & b1)==0) if(ADC1->SQR3!=chnl) break; // wait for conversion to complete
 8000ec6:	e005      	b.n	8000ed4 <adcread+0x28>
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <adcread+0xd8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d107      	bne.n	8000ee4 <adcread+0x38>
 8000ed4:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <adcread+0xd8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d0f2      	beq.n	8000ec8 <adcread+0x1c>
 8000ee2:	e000      	b.n	8000ee6 <adcread+0x3a>
 8000ee4:	bf00      	nop
result= ADC1->DR;
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <adcread+0xd8>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eec:	81fb      	strh	r3, [r7, #14]

if(ADC1->SQR3!=chnl) // read again if conversion was interrupted by foreground
 8000eee:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <adcread+0xd8>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d01b      	beq.n	8000f32 <adcread+0x86>
{
ADC1->SQR3=chnl; // set adc channel
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <adcread+0xd8>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	79fa      	ldrb	r2, [r7, #7]
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
ADC1->CR2=1;  // start ADC conversion of bemf
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <adcread+0xd8>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2201      	movs	r2, #1
 8000f08:	609a      	str	r2, [r3, #8]
while((ADC1->SR & b1)==0) if(ADC1->SQR3!=chnl) break; // wait for conversion to complete
 8000f0a:	e005      	b.n	8000f18 <adcread+0x6c>
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <adcread+0xd8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d107      	bne.n	8000f28 <adcread+0x7c>
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <adcread+0xd8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f2      	beq.n	8000f0c <adcread+0x60>
 8000f26:	e000      	b.n	8000f2a <adcread+0x7e>
 8000f28:	bf00      	nop
result= ADC1->DR;
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <adcread+0xd8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f30:	81fb      	strh	r3, [r7, #14]
}

if(ADC1->SQR3!=chnl) // must check third time
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <adcread+0xd8>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d01b      	beq.n	8000f76 <adcread+0xca>
{
ADC1->SQR3=chnl; // set adc channel
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <adcread+0xd8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	79fa      	ldrb	r2, [r7, #7]
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
ADC1->CR2=1;  // start ADC conversion of bemf
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <adcread+0xd8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	609a      	str	r2, [r3, #8]
while((ADC1->SR & b1)==0) if(ADC1->SQR3!=chnl) break; // wait for conversion to complete
 8000f4e:	e005      	b.n	8000f5c <adcread+0xb0>
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <adcread+0xd8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d107      	bne.n	8000f6c <adcread+0xc0>
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <adcread+0xd8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0f2      	beq.n	8000f50 <adcread+0xa4>
 8000f6a:	e000      	b.n	8000f6e <adcread+0xc2>
 8000f6c:	bf00      	nop
result= ADC1->DR;
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <adcread+0xd8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f74:	81fb      	strh	r3, [r7, #14]
}
return result;
 8000f76:	89fb      	ldrh	r3, [r7, #14]
} // end of adcread function
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	2000009c 	.word	0x2000009c

08000f88 <PWMISR>:


// interrupt service routine run just at the end of each PWM cycle
void PWMISR(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0

unsigned long long0;

ADC1->SQR3=bemfchannel; 
 8000f8e:	4b9b      	ldr	r3, [pc, #620]	; (80011fc <PWMISR+0x274>)
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	4b9b      	ldr	r3, [pc, #620]	; (8001200 <PWMISR+0x278>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	635a      	str	r2, [r3, #52]	; 0x34
ADC1->CR2=0x00000001;  // start ADC conversion of bemf
 8000f98:	4b99      	ldr	r3, [pc, #612]	; (8001200 <PWMISR+0x278>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	609a      	str	r2, [r3, #8]
zccounter++;  // housekeeping increment of some timers while adc is converting
 8000fa0:	4b98      	ldr	r3, [pc, #608]	; (8001204 <PWMISR+0x27c>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	4b96      	ldr	r3, [pc, #600]	; (8001204 <PWMISR+0x27c>)
 8000faa:	801a      	strh	r2, [r3, #0]
alignmentcounter++;
 8000fac:	4b96      	ldr	r3, [pc, #600]	; (8001208 <PWMISR+0x280>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	4a95      	ldr	r2, [pc, #596]	; (8001208 <PWMISR+0x280>)
 8000fb4:	6013      	str	r3, [r2, #0]
holdcounter++;
 8000fb6:	4b95      	ldr	r3, [pc, #596]	; (800120c <PWMISR+0x284>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a93      	ldr	r2, [pc, #588]	; (800120c <PWMISR+0x284>)
 8000fbe:	6013      	str	r3, [r2, #0]
ledtime++;
 8000fc0:	4b93      	ldr	r3, [pc, #588]	; (8001210 <PWMISR+0x288>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	4a92      	ldr	r2, [pc, #584]	; (8001210 <PWMISR+0x288>)
 8000fc8:	6013      	str	r3, [r2, #0]
while((ADC1->SR & b1)==0) ; // wait for conversion to complete
 8000fca:	bf00      	nop
 8000fcc:	4b8c      	ldr	r3, [pc, #560]	; (8001200 <PWMISR+0x278>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f8      	beq.n	8000fcc <PWMISR+0x44>
bemfsample= ADC1->DR;
 8000fda:	4b89      	ldr	r3, [pc, #548]	; (8001200 <PWMISR+0x278>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	4b8c      	ldr	r3, [pc, #560]	; (8001214 <PWMISR+0x28c>)
 8000fe4:	801a      	strh	r2, [r3, #0]

// sk DAC->DHR12R2 = bemfsample;
// sk DAC->SWTRIGR=0x00000003;


if(autostep)
 8000fe6:	4b8c      	ldr	r3, [pc, #560]	; (8001218 <PWMISR+0x290>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d029      	beq.n	8001042 <PWMISR+0xba>
{
commcounter++;
 8000fee:	4b8b      	ldr	r3, [pc, #556]	; (800121c <PWMISR+0x294>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b89      	ldr	r3, [pc, #548]	; (800121c <PWMISR+0x294>)
 8000ff8:	801a      	strh	r2, [r3, #0]
  if(commcounter>step)
 8000ffa:	4b88      	ldr	r3, [pc, #544]	; (800121c <PWMISR+0x294>)
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	4b88      	ldr	r3, [pc, #544]	; (8001220 <PWMISR+0x298>)
 8001000:	881b      	ldrh	r3, [r3, #0]
 8001002:	429a      	cmp	r2, r3
 8001004:	d91d      	bls.n	8001042 <PWMISR+0xba>
  {
  commcounter=0;
 8001006:	4b85      	ldr	r3, [pc, #532]	; (800121c <PWMISR+0x294>)
 8001008:	2200      	movs	r2, #0
 800100a:	801a      	strh	r2, [r3, #0]
  phase++;
 800100c:	4b85      	ldr	r3, [pc, #532]	; (8001224 <PWMISR+0x29c>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	3301      	adds	r3, #1
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b83      	ldr	r3, [pc, #524]	; (8001224 <PWMISR+0x29c>)
 8001016:	701a      	strb	r2, [r3, #0]
position++;
 8001018:	4b83      	ldr	r3, [pc, #524]	; (8001228 <PWMISR+0x2a0>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	4a82      	ldr	r2, [pc, #520]	; (8001228 <PWMISR+0x2a0>)
 8001020:	6013      	str	r3, [r2, #0]
  if(phase>5) phase=0;
 8001022:	4b80      	ldr	r3, [pc, #512]	; (8001224 <PWMISR+0x29c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b05      	cmp	r3, #5
 8001028:	d902      	bls.n	8001030 <PWMISR+0xa8>
 800102a:	4b7e      	ldr	r3, [pc, #504]	; (8001224 <PWMISR+0x29c>)
 800102c:	2200      	movs	r2, #0
 800102e:	701a      	strb	r2, [r3, #0]
  TIM1->CCER = ccermask[phase]; // commutate bridge from table
 8001030:	4b7c      	ldr	r3, [pc, #496]	; (8001224 <PWMISR+0x29c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	4b7d      	ldr	r3, [pc, #500]	; (800122c <PWMISR+0x2a4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a7d      	ldr	r2, [pc, #500]	; (8001230 <PWMISR+0x2a8>)
 800103c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001040:	841a      	strh	r2, [r3, #32]

  }
} // end of if(autostep)


if(run==0) startstate=0;
 8001042:	4b7c      	ldr	r3, [pc, #496]	; (8001234 <PWMISR+0x2ac>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <PWMISR+0xc8>
 800104a:	4b7b      	ldr	r3, [pc, #492]	; (8001238 <PWMISR+0x2b0>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]

switch(startstate)
 8001050:	4b79      	ldr	r3, [pc, #484]	; (8001238 <PWMISR+0x2b0>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	f000 809a 	beq.w	800118e <PWMISR+0x206>
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	dc0b      	bgt.n	8001076 <PWMISR+0xee>
 800105e:	2b05      	cmp	r3, #5
 8001060:	d02c      	beq.n	80010bc <PWMISR+0x134>
 8001062:	2b05      	cmp	r3, #5
 8001064:	dc02      	bgt.n	800106c <PWMISR+0xe4>
 8001066:	2b00      	cmp	r3, #0
 8001068:	d018      	beq.n	800109c <PWMISR+0x114>
 800106a:	e1a3      	b.n	80013b4 <PWMISR+0x42c>
 800106c:	2b0a      	cmp	r3, #10
 800106e:	d044      	beq.n	80010fa <PWMISR+0x172>
 8001070:	2b14      	cmp	r3, #20
 8001072:	d065      	beq.n	8001140 <PWMISR+0x1b8>
 8001074:	e19e      	b.n	80013b4 <PWMISR+0x42c>
 8001076:	2b82      	cmp	r3, #130	; 0x82
 8001078:	f000 80af 	beq.w	80011da <PWMISR+0x252>
 800107c:	2b82      	cmp	r3, #130	; 0x82
 800107e:	dc06      	bgt.n	800108e <PWMISR+0x106>
 8001080:	2b6e      	cmp	r3, #110	; 0x6e
 8001082:	f000 808e 	beq.w	80011a2 <PWMISR+0x21a>
 8001086:	2b78      	cmp	r3, #120	; 0x78
 8001088:	f000 8094 	beq.w	80011b4 <PWMISR+0x22c>
 800108c:	e192      	b.n	80013b4 <PWMISR+0x42c>
 800108e:	2b8c      	cmp	r3, #140	; 0x8c
 8001090:	f000 80dc 	beq.w	800124c <PWMISR+0x2c4>
 8001094:	2b96      	cmp	r3, #150	; 0x96
 8001096:	f000 8132 	beq.w	80012fe <PWMISR+0x376>
 800109a:	e18b      	b.n	80013b4 <PWMISR+0x42c>
{
case 0:
TIM1->CCER = alloff;
 800109c:	4b63      	ldr	r3, [pc, #396]	; (800122c <PWMISR+0x2a4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f643 0288 	movw	r2, #14472	; 0x3888
 80010a4:	841a      	strh	r2, [r3, #32]
if(run)
 80010a6:	4b63      	ldr	r3, [pc, #396]	; (8001234 <PWMISR+0x2ac>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 8171 	beq.w	8001392 <PWMISR+0x40a>
{
motorstartinit();
 80010b0:	f000 fa18 	bl	80014e4 <motorstartinit>
startstate=5;
 80010b4:	4b60      	ldr	r3, [pc, #384]	; (8001238 <PWMISR+0x2b0>)
 80010b6:	2205      	movs	r2, #5
 80010b8:	701a      	strb	r2, [r3, #0]
}
break;
 80010ba:	e16a      	b.n	8001392 <PWMISR+0x40a>

case 5: // setup alignment
TIM1->CCR1= alignmentdc;
 80010bc:	4b5b      	ldr	r3, [pc, #364]	; (800122c <PWMISR+0x2a4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2264      	movs	r2, #100	; 0x64
 80010c2:	869a      	strh	r2, [r3, #52]	; 0x34
TIM1->CCR2= alignmentdc;
 80010c4:	4b59      	ldr	r3, [pc, #356]	; (800122c <PWMISR+0x2a4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2264      	movs	r2, #100	; 0x64
 80010ca:	871a      	strh	r2, [r3, #56]	; 0x38
TIM1->CCR3= alignmentdc;
 80010cc:	4b57      	ldr	r3, [pc, #348]	; (800122c <PWMISR+0x2a4>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2264      	movs	r2, #100	; 0x64
 80010d2:	879a      	strh	r2, [r3, #60]	; 0x3c
phase=0;
 80010d4:	4b53      	ldr	r3, [pc, #332]	; (8001224 <PWMISR+0x29c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
TIM1->CCER = ccermask[phase]; // commutate bridge from table
 80010da:	4b52      	ldr	r3, [pc, #328]	; (8001224 <PWMISR+0x29c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	4b52      	ldr	r3, [pc, #328]	; (800122c <PWMISR+0x2a4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a52      	ldr	r2, [pc, #328]	; (8001230 <PWMISR+0x2a8>)
 80010e6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80010ea:	841a      	strh	r2, [r3, #32]
alignmentcounter=0;
 80010ec:	4b46      	ldr	r3, [pc, #280]	; (8001208 <PWMISR+0x280>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
startstate=10;
 80010f2:	4b51      	ldr	r3, [pc, #324]	; (8001238 <PWMISR+0x2b0>)
 80010f4:	220a      	movs	r2, #10
 80010f6:	701a      	strb	r2, [r3, #0]
break;
 80010f8:	e15c      	b.n	80013b4 <PWMISR+0x42c>

case 10: // timing out alignment
  if(alignmentcounter>alignmenttime)
 80010fa:	4b43      	ldr	r3, [pc, #268]	; (8001208 <PWMISR+0x280>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001102:	4293      	cmp	r3, r2
 8001104:	f240 8147 	bls.w	8001396 <PWMISR+0x40e>
  {
  rampspeed=1;
 8001108:	4b4c      	ldr	r3, [pc, #304]	; (800123c <PWMISR+0x2b4>)
 800110a:	2201      	movs	r2, #1
 800110c:	601a      	str	r2, [r3, #0]
  commcounter=0;
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <PWMISR+0x294>)
 8001110:	2200      	movs	r2, #0
 8001112:	801a      	strh	r2, [r3, #0]
  autostep=255;
 8001114:	4b40      	ldr	r3, [pc, #256]	; (8001218 <PWMISR+0x290>)
 8001116:	22ff      	movs	r2, #255	; 0xff
 8001118:	701a      	strb	r2, [r3, #0]
  TIM1->CCR1= rampupdc;
 800111a:	4b44      	ldr	r3, [pc, #272]	; (800122c <PWMISR+0x2a4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001122:	869a      	strh	r2, [r3, #52]	; 0x34
  TIM1->CCR2= rampupdc;
 8001124:	4b41      	ldr	r3, [pc, #260]	; (800122c <PWMISR+0x2a4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800112c:	871a      	strh	r2, [r3, #56]	; 0x38
  TIM1->CCR3= rampupdc;
 800112e:	4b3f      	ldr	r3, [pc, #252]	; (800122c <PWMISR+0x2a4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001136:	879a      	strh	r2, [r3, #60]	; 0x3c
  startstate=20;
 8001138:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <PWMISR+0x2b0>)
 800113a:	2214      	movs	r2, #20
 800113c:	701a      	strb	r2, [r3, #0]
  }
break;
 800113e:	e12a      	b.n	8001396 <PWMISR+0x40e>

case 20:
rampspeed = rampspeed+rampuprate;
 8001140:	4b3e      	ldr	r3, [pc, #248]	; (800123c <PWMISR+0x2b4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001148:	4a3c      	ldr	r2, [pc, #240]	; (800123c <PWMISR+0x2b4>)
 800114a:	6013      	str	r3, [r2, #0]
long0 = 4000000000;
 800114c:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <PWMISR+0x2b8>)
 800114e:	607b      	str	r3, [r7, #4]
long0 = long0/rampspeed;
 8001150:	4b3a      	ldr	r3, [pc, #232]	; (800123c <PWMISR+0x2b4>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	607b      	str	r3, [r7, #4]
if(long0>30000) long0=30000;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001162:	4293      	cmp	r3, r2
 8001164:	d902      	bls.n	800116c <PWMISR+0x1e4>
 8001166:	f247 5330 	movw	r3, #30000	; 0x7530
 800116a:	607b      	str	r3, [r7, #4]
step=long0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	b29a      	uxth	r2, r3
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <PWMISR+0x298>)
 8001172:	801a      	strh	r2, [r3, #0]
  if(step<=minstep)
 8001174:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <PWMISR+0x298>)
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 800117c:	f080 810d 	bcs.w	800139a <PWMISR+0x412>
  {
  holdcounter=0;
 8001180:	4b22      	ldr	r3, [pc, #136]	; (800120c <PWMISR+0x284>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
  startstate=100;
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <PWMISR+0x2b0>)
 8001188:	2264      	movs	r2, #100	; 0x64
 800118a:	701a      	strb	r2, [r3, #0]
  }
break;
 800118c:	e105      	b.n	800139a <PWMISR+0x412>

case 100: // wait for hold time
if(holdcounter>holdtime) startstate=110; 
 800118e:	4b1f      	ldr	r3, [pc, #124]	; (800120c <PWMISR+0x284>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001196:	f240 8102 	bls.w	800139e <PWMISR+0x416>
 800119a:	4b27      	ldr	r3, [pc, #156]	; (8001238 <PWMISR+0x2b0>)
 800119c:	226e      	movs	r2, #110	; 0x6e
 800119e:	701a      	strb	r2, [r3, #0]
break;
 80011a0:	e0fd      	b.n	800139e <PWMISR+0x416>

case 110: // wait to get into phase 5
if(phase==5) startstate=120;
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <PWMISR+0x29c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b05      	cmp	r3, #5
 80011a8:	f040 80fb 	bne.w	80013a2 <PWMISR+0x41a>
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <PWMISR+0x2b0>)
 80011ae:	2278      	movs	r2, #120	; 0x78
 80011b0:	701a      	strb	r2, [r3, #0]
break;
 80011b2:	e0f6      	b.n	80013a2 <PWMISR+0x41a>

case 120: // wait for leading edge of phase 0 (commutation)
if(phase==0)
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <PWMISR+0x29c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f040 80f4 	bne.w	80013a6 <PWMISR+0x41e>
{
demagcounter=0;
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <PWMISR+0x2bc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	801a      	strh	r2, [r3, #0]
demagthreshold = (step*demagallowance)>>8;
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <PWMISR+0x298>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	121b      	asrs	r3, r3, #8
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <PWMISR+0x2c0>)
 80011d0:	801a      	strh	r2, [r3, #0]
startstate=130;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <PWMISR+0x2b0>)
 80011d4:	2282      	movs	r2, #130	; 0x82
 80011d6:	701a      	strb	r2, [r3, #0]
}
break;
 80011d8:	e0e5      	b.n	80013a6 <PWMISR+0x41e>

case 130: // wait out demag time
demagcounter++;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <PWMISR+0x2bc>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <PWMISR+0x2bc>)
 80011e4:	801a      	strh	r2, [r3, #0]
  if(demagcounter>demagthreshold)
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <PWMISR+0x2bc>)
 80011e8:	881a      	ldrh	r2, [r3, #0]
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <PWMISR+0x2c0>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	f240 80db 	bls.w	80013aa <PWMISR+0x422>
  {
  startstate=140; 
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <PWMISR+0x2b0>)
 80011f6:	228c      	movs	r2, #140	; 0x8c
 80011f8:	701a      	strb	r2, [r3, #0]
  }
break;
 80011fa:	e0d6      	b.n	80013aa <PWMISR+0x422>
 80011fc:	20000110 	.word	0x20000110
 8001200:	2000009c 	.word	0x2000009c
 8001204:	200000a4 	.word	0x200000a4
 8001208:	20000114 	.word	0x20000114
 800120c:	200000c8 	.word	0x200000c8
 8001210:	200000c0 	.word	0x200000c0
 8001214:	200000bc 	.word	0x200000bc
 8001218:	200000a9 	.word	0x200000a9
 800121c:	200000a6 	.word	0x200000a6
 8001220:	2000010e 	.word	0x2000010e
 8001224:	200000d2 	.word	0x200000d2
 8001228:	200000b0 	.word	0x200000b0
 800122c:	20000054 	.word	0x20000054
 8001230:	08001920 	.word	0x08001920
 8001234:	20000104 	.word	0x20000104
 8001238:	200000b8 	.word	0x200000b8
 800123c:	2000011c 	.word	0x2000011c
 8001240:	ee6b2800 	.word	0xee6b2800
 8001244:	200000d4 	.word	0x200000d4
 8001248:	200000ec 	.word	0x200000ec

case 140: // looking for zero crossing of bemf
if(risingedge)
 800124c:	4b8c      	ldr	r3, [pc, #560]	; (8001480 <PWMISR+0x4f8>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d02a      	beq.n	80012aa <PWMISR+0x322>
{
  if(bemfsample>zcthreshold)
 8001254:	4b8b      	ldr	r3, [pc, #556]	; (8001484 <PWMISR+0x4fc>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	2bc8      	cmp	r3, #200	; 0xc8
 800125a:	f240 80a8 	bls.w	80013ae <PWMISR+0x426>
  {
  if(zcfound) step = zccounter;
 800125e:	4b8a      	ldr	r3, [pc, #552]	; (8001488 <PWMISR+0x500>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <PWMISR+0x2e6>
 8001266:	4b89      	ldr	r3, [pc, #548]	; (800148c <PWMISR+0x504>)
 8001268:	881a      	ldrh	r2, [r3, #0]
 800126a:	4b89      	ldr	r3, [pc, #548]	; (8001490 <PWMISR+0x508>)
 800126c:	801a      	strh	r2, [r3, #0]
  commthreshold = (step*risingdelay)>>8;
 800126e:	4b88      	ldr	r3, [pc, #544]	; (8001490 <PWMISR+0x508>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	4b87      	ldr	r3, [pc, #540]	; (8001494 <PWMISR+0x50c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	fb03 f302 	mul.w	r3, r3, r2
 800127c:	121b      	asrs	r3, r3, #8
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b85      	ldr	r3, [pc, #532]	; (8001498 <PWMISR+0x510>)
 8001282:	801a      	strh	r2, [r3, #0]
  zccounter=0;
 8001284:	4b81      	ldr	r3, [pc, #516]	; (800148c <PWMISR+0x504>)
 8001286:	2200      	movs	r2, #0
 8001288:	801a      	strh	r2, [r3, #0]
  commcounter=0;
 800128a:	4b84      	ldr	r3, [pc, #528]	; (800149c <PWMISR+0x514>)
 800128c:	2200      	movs	r2, #0
 800128e:	801a      	strh	r2, [r3, #0]
  startstate=150;
 8001290:	4b83      	ldr	r3, [pc, #524]	; (80014a0 <PWMISR+0x518>)
 8001292:	2296      	movs	r2, #150	; 0x96
 8001294:	701a      	strb	r2, [r3, #0]
  risingedge=0;
 8001296:	4b7a      	ldr	r3, [pc, #488]	; (8001480 <PWMISR+0x4f8>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
  zcfound=255;
 800129c:	4b7a      	ldr	r3, [pc, #488]	; (8001488 <PWMISR+0x500>)
 800129e:	22ff      	movs	r2, #255	; 0xff
 80012a0:	701a      	strb	r2, [r3, #0]
  autostep=0;
 80012a2:	4b80      	ldr	r3, [pc, #512]	; (80014a4 <PWMISR+0x51c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
  risingedge = 255;
  zcfound=255;
  autostep=0;
  }
}
break;
 80012a8:	e081      	b.n	80013ae <PWMISR+0x426>
  if(bemfsample<zcthreshold)
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <PWMISR+0x4fc>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	2bc7      	cmp	r3, #199	; 0xc7
 80012b0:	d87d      	bhi.n	80013ae <PWMISR+0x426>
  if(zcfound) step = zccounter;
 80012b2:	4b75      	ldr	r3, [pc, #468]	; (8001488 <PWMISR+0x500>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <PWMISR+0x33a>
 80012ba:	4b74      	ldr	r3, [pc, #464]	; (800148c <PWMISR+0x504>)
 80012bc:	881a      	ldrh	r2, [r3, #0]
 80012be:	4b74      	ldr	r3, [pc, #464]	; (8001490 <PWMISR+0x508>)
 80012c0:	801a      	strh	r2, [r3, #0]
  commthreshold = (step*fallingdelay)>>8;
 80012c2:	4b73      	ldr	r3, [pc, #460]	; (8001490 <PWMISR+0x508>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b77      	ldr	r3, [pc, #476]	; (80014a8 <PWMISR+0x520>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	fb03 f302 	mul.w	r3, r3, r2
 80012d0:	121b      	asrs	r3, r3, #8
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b70      	ldr	r3, [pc, #448]	; (8001498 <PWMISR+0x510>)
 80012d6:	801a      	strh	r2, [r3, #0]
  zccounter=0;
 80012d8:	4b6c      	ldr	r3, [pc, #432]	; (800148c <PWMISR+0x504>)
 80012da:	2200      	movs	r2, #0
 80012dc:	801a      	strh	r2, [r3, #0]
  commcounter=0;
 80012de:	4b6f      	ldr	r3, [pc, #444]	; (800149c <PWMISR+0x514>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	801a      	strh	r2, [r3, #0]
  startstate=150;
 80012e4:	4b6e      	ldr	r3, [pc, #440]	; (80014a0 <PWMISR+0x518>)
 80012e6:	2296      	movs	r2, #150	; 0x96
 80012e8:	701a      	strb	r2, [r3, #0]
  risingedge = 255;
 80012ea:	4b65      	ldr	r3, [pc, #404]	; (8001480 <PWMISR+0x4f8>)
 80012ec:	22ff      	movs	r2, #255	; 0xff
 80012ee:	701a      	strb	r2, [r3, #0]
  zcfound=255;
 80012f0:	4b65      	ldr	r3, [pc, #404]	; (8001488 <PWMISR+0x500>)
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	701a      	strb	r2, [r3, #0]
  autostep=0;
 80012f6:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <PWMISR+0x51c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
break;
 80012fc:	e057      	b.n	80013ae <PWMISR+0x426>

case 150:  // wait out commutation delay
commcounter++;
 80012fe:	4b67      	ldr	r3, [pc, #412]	; (800149c <PWMISR+0x514>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b65      	ldr	r3, [pc, #404]	; (800149c <PWMISR+0x514>)
 8001308:	801a      	strh	r2, [r3, #0]
  if(commcounter>commthreshold)
 800130a:	4b64      	ldr	r3, [pc, #400]	; (800149c <PWMISR+0x514>)
 800130c:	881a      	ldrh	r2, [r3, #0]
 800130e:	4b62      	ldr	r3, [pc, #392]	; (8001498 <PWMISR+0x510>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d94d      	bls.n	80013b2 <PWMISR+0x42a>
  {
  position++;
 8001316:	4b65      	ldr	r3, [pc, #404]	; (80014ac <PWMISR+0x524>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a63      	ldr	r2, [pc, #396]	; (80014ac <PWMISR+0x524>)
 800131e:	6013      	str	r3, [r2, #0]
  phase++; // commutate
 8001320:	4b63      	ldr	r3, [pc, #396]	; (80014b0 <PWMISR+0x528>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	3301      	adds	r3, #1
 8001326:	b2da      	uxtb	r2, r3
 8001328:	4b61      	ldr	r3, [pc, #388]	; (80014b0 <PWMISR+0x528>)
 800132a:	701a      	strb	r2, [r3, #0]
  if(phase>5) phase=0;
 800132c:	4b60      	ldr	r3, [pc, #384]	; (80014b0 <PWMISR+0x528>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d902      	bls.n	800133a <PWMISR+0x3b2>
 8001334:	4b5e      	ldr	r3, [pc, #376]	; (80014b0 <PWMISR+0x528>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
  TIM1->CCER = ccermask[phase]; // commutate bridge from fwd table
 800133a:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <PWMISR+0x528>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <PWMISR+0x52c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a5c      	ldr	r2, [pc, #368]	; (80014b8 <PWMISR+0x530>)
 8001346:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800134a:	841a      	strh	r2, [r3, #32]

  // sk DAC->DHR12R1 = phase*810;
  // sk DAC->SWTRIGR=0x00000003;

  demagcounter=0;
 800134c:	4b5b      	ldr	r3, [pc, #364]	; (80014bc <PWMISR+0x534>)
 800134e:	2200      	movs	r2, #0
 8001350:	801a      	strh	r2, [r3, #0]
  demagthreshold = (step*demagallowance)>>8;
 8001352:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <PWMISR+0x508>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	019b      	lsls	r3, r3, #6
 8001358:	121b      	asrs	r3, r3, #8
 800135a:	b29a      	uxth	r2, r3
 800135c:	4b58      	ldr	r3, [pc, #352]	; (80014c0 <PWMISR+0x538>)
 800135e:	801a      	strh	r2, [r3, #0]
if(phase==0)
 8001360:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <PWMISR+0x528>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d110      	bne.n	800138a <PWMISR+0x402>
{
ifbave = (ifbsum<<2) / ifbcount;
 8001368:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <PWMISR+0x53c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4a56      	ldr	r2, [pc, #344]	; (80014c8 <PWMISR+0x540>)
 8001370:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001374:	fb93 f3f2 	sdiv	r3, r3, r2
 8001378:	b21a      	sxth	r2, r3
 800137a:	4b54      	ldr	r3, [pc, #336]	; (80014cc <PWMISR+0x544>)
 800137c:	801a      	strh	r2, [r3, #0]
ifbcount=0;
 800137e:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <PWMISR+0x540>)
 8001380:	2200      	movs	r2, #0
 8001382:	801a      	strh	r2, [r3, #0]
ifbsum=0;
 8001384:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <PWMISR+0x53c>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
}
  startstate=130;  // go back to wait out demag
 800138a:	4b45      	ldr	r3, [pc, #276]	; (80014a0 <PWMISR+0x518>)
 800138c:	2282      	movs	r2, #130	; 0x82
 800138e:	701a      	strb	r2, [r3, #0]
  }
break;
 8001390:	e00f      	b.n	80013b2 <PWMISR+0x42a>
break;
 8001392:	bf00      	nop
 8001394:	e00e      	b.n	80013b4 <PWMISR+0x42c>
break;
 8001396:	bf00      	nop
 8001398:	e00c      	b.n	80013b4 <PWMISR+0x42c>
break;
 800139a:	bf00      	nop
 800139c:	e00a      	b.n	80013b4 <PWMISR+0x42c>
break;
 800139e:	bf00      	nop
 80013a0:	e008      	b.n	80013b4 <PWMISR+0x42c>
break;
 80013a2:	bf00      	nop
 80013a4:	e006      	b.n	80013b4 <PWMISR+0x42c>
break;
 80013a6:	bf00      	nop
 80013a8:	e004      	b.n	80013b4 <PWMISR+0x42c>
break;
 80013aa:	bf00      	nop
 80013ac:	e002      	b.n	80013b4 <PWMISR+0x42c>
break;
 80013ae:	bf00      	nop
 80013b0:	e000      	b.n	80013b4 <PWMISR+0x42c>
break;
 80013b2:	bf00      	nop
} // end of startstate state machine


switch(phase)
 80013b4:	4b3e      	ldr	r3, [pc, #248]	; (80014b0 <PWMISR+0x528>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d827      	bhi.n	800140c <PWMISR+0x484>
 80013bc:	a201      	add	r2, pc, #4	; (adr r2, 80013c4 <PWMISR+0x43c>)
 80013be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c2:	bf00      	nop
 80013c4:	080013dd 	.word	0x080013dd
 80013c8:	080013e5 	.word	0x080013e5
 80013cc:	080013ed 	.word	0x080013ed
 80013d0:	080013f5 	.word	0x080013f5
 80013d4:	080013fd 	.word	0x080013fd
 80013d8:	08001405 	.word	0x08001405
{
case 0: // ab
bemfchannel=8; // read phase c
 80013dc:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <PWMISR+0x548>)
 80013de:	2208      	movs	r2, #8
 80013e0:	701a      	strb	r2, [r3, #0]
break;
 80013e2:	e013      	b.n	800140c <PWMISR+0x484>
case 1: // ac
bemfchannel=7; // read phase b
 80013e4:	4b3a      	ldr	r3, [pc, #232]	; (80014d0 <PWMISR+0x548>)
 80013e6:	2207      	movs	r2, #7
 80013e8:	701a      	strb	r2, [r3, #0]
break;
 80013ea:	e00f      	b.n	800140c <PWMISR+0x484>
case 2:  // bc
bemfchannel=6; // read phase a
 80013ec:	4b38      	ldr	r3, [pc, #224]	; (80014d0 <PWMISR+0x548>)
 80013ee:	2206      	movs	r2, #6
 80013f0:	701a      	strb	r2, [r3, #0]
break;
 80013f2:	e00b      	b.n	800140c <PWMISR+0x484>
case 3:  // ba
bemfchannel=8; // read phase c
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <PWMISR+0x548>)
 80013f6:	2208      	movs	r2, #8
 80013f8:	701a      	strb	r2, [r3, #0]
break;
 80013fa:	e007      	b.n	800140c <PWMISR+0x484>
case 4:  // ca
bemfchannel=7; // read phase b
 80013fc:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <PWMISR+0x548>)
 80013fe:	2207      	movs	r2, #7
 8001400:	701a      	strb	r2, [r3, #0]
break;
 8001402:	e003      	b.n	800140c <PWMISR+0x484>
case 5:  // cb
bemfchannel=6; // read phase a
 8001404:	4b32      	ldr	r3, [pc, #200]	; (80014d0 <PWMISR+0x548>)
 8001406:	2206      	movs	r2, #6
 8001408:	701a      	strb	r2, [r3, #0]
break;
 800140a:	bf00      	nop
  
} // end of phase switch statement


ADC1->SQR3=0x00000000; // current sense adc channel
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <PWMISR+0x54c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2200      	movs	r2, #0
 8001412:	635a      	str	r2, [r3, #52]	; 0x34
ADC1->CR2=0x00000001;  // start ADC conversion of bemf
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <PWMISR+0x54c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2201      	movs	r2, #1
 800141a:	609a      	str	r2, [r3, #8]
globalcounter++;
 800141c:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <PWMISR+0x550>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a2d      	ldr	r2, [pc, #180]	; (80014d8 <PWMISR+0x550>)
 8001424:	6013      	str	r3, [r2, #0]
while((ADC1->SR & b1)==0) ; // wait for conversion to complete
 8001426:	bf00      	nop
 8001428:	4b2a      	ldr	r3, [pc, #168]	; (80014d4 <PWMISR+0x54c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f8      	beq.n	8001428 <PWMISR+0x4a0>
ifb= ADC1->DR-ifboffset;
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <PWMISR+0x54c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	b29a      	uxth	r2, r3
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <PWMISR+0x554>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	b29b      	uxth	r3, r3
 8001446:	b21a      	sxth	r2, r3
 8001448:	4b25      	ldr	r3, [pc, #148]	; (80014e0 <PWMISR+0x558>)
 800144a:	801a      	strh	r2, [r3, #0]
ifbsum = ifbsum + ifb;
 800144c:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <PWMISR+0x558>)
 800144e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001452:	461a      	mov	r2, r3
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <PWMISR+0x53c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4413      	add	r3, r2
 800145a:	4a1a      	ldr	r2, [pc, #104]	; (80014c4 <PWMISR+0x53c>)
 800145c:	6013      	str	r3, [r2, #0]
ifbcount++;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <PWMISR+0x540>)
 8001460:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001464:	b29b      	uxth	r3, r3
 8001466:	3301      	adds	r3, #1
 8001468:	b29b      	uxth	r3, r3
 800146a:	b21a      	sxth	r2, r3
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <PWMISR+0x540>)
 800146e:	801a      	strh	r2, [r3, #0]



  TIM1->SR=0;  // clear interrupt
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <PWMISR+0x52c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2200      	movs	r2, #0
 8001476:	821a      	strh	r2, [r3, #16]
  
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200000ce 	.word	0x200000ce
 8001484:	200000bc 	.word	0x200000bc
 8001488:	200000cf 	.word	0x200000cf
 800148c:	200000a4 	.word	0x200000a4
 8001490:	2000010e 	.word	0x2000010e
 8001494:	200000b4 	.word	0x200000b4
 8001498:	200000f2 	.word	0x200000f2
 800149c:	200000a6 	.word	0x200000a6
 80014a0:	200000b8 	.word	0x200000b8
 80014a4:	200000a9 	.word	0x200000a9
 80014a8:	200000f6 	.word	0x200000f6
 80014ac:	200000b0 	.word	0x200000b0
 80014b0:	200000d2 	.word	0x200000d2
 80014b4:	20000054 	.word	0x20000054
 80014b8:	08001920 	.word	0x08001920
 80014bc:	200000d4 	.word	0x200000d4
 80014c0:	200000ec 	.word	0x200000ec
 80014c4:	200000a0 	.word	0x200000a0
 80014c8:	200000b6 	.word	0x200000b6
 80014cc:	200000d8 	.word	0x200000d8
 80014d0:	20000110 	.word	0x20000110
 80014d4:	2000009c 	.word	0x2000009c
 80014d8:	20000108 	.word	0x20000108
 80014dc:	200000d0 	.word	0x200000d0
 80014e0:	200000ee 	.word	0x200000ee

080014e4 <motorstartinit>:


void  motorstartinit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
TIM1->CCER = alloff;
 80014e8:	4b40      	ldr	r3, [pc, #256]	; (80015ec <motorstartinit+0x108>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f643 0288 	movw	r2, #14472	; 0x3888
 80014f0:	841a      	strh	r2, [r3, #32]
TIM1->BDTR= b15+b12+b11+16;  // 2 usec dead time and set MOE
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <motorstartinit+0x108>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f649 0210 	movw	r2, #38928	; 0x9810
 80014fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
maxdc=1000;
 80014fe:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <motorstartinit+0x10c>)
 8001500:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001504:	801a      	strh	r2, [r3, #0]
rpmcmd=500;
 8001506:	4b3b      	ldr	r3, [pc, #236]	; (80015f4 <motorstartinit+0x110>)
 8001508:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800150c:	801a      	strh	r2, [r3, #0]
rpmref=0;
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <motorstartinit+0x114>)
 8001510:	2200      	movs	r2, #0
 8001512:	801a      	strh	r2, [r3, #0]
transitioncounter=0;
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <motorstartinit+0x118>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
errorint=0;
 800151a:	4b39      	ldr	r3, [pc, #228]	; (8001600 <motorstartinit+0x11c>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
position=520000;
 8001520:	4b38      	ldr	r3, [pc, #224]	; (8001604 <motorstartinit+0x120>)
 8001522:	4a39      	ldr	r2, [pc, #228]	; (8001608 <motorstartinit+0x124>)
 8001524:	601a      	str	r2, [r3, #0]
positionest= position * 4096;
 8001526:	4b37      	ldr	r3, [pc, #220]	; (8001604 <motorstartinit+0x120>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	031b      	lsls	r3, r3, #12
 800152c:	4a37      	ldr	r2, [pc, #220]	; (800160c <motorstartinit+0x128>)
 800152e:	6013      	str	r3, [r2, #0]
speedest=0;
 8001530:	4b37      	ldr	r3, [pc, #220]	; (8001610 <motorstartinit+0x12c>)
 8001532:	2200      	movs	r2, #0
 8001534:	801a      	strh	r2, [r3, #0]
rpm=0;
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <motorstartinit+0x130>)
 8001538:	2200      	movs	r2, #0
 800153a:	801a      	strh	r2, [r3, #0]
phase = 0;
 800153c:	4b36      	ldr	r3, [pc, #216]	; (8001618 <motorstartinit+0x134>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
holdcounter=0;
 8001542:	4b36      	ldr	r3, [pc, #216]	; (800161c <motorstartinit+0x138>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
startstate=0;
 8001548:	4b35      	ldr	r3, [pc, #212]	; (8001620 <motorstartinit+0x13c>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
commcounter=0;
 800154e:	4b35      	ldr	r3, [pc, #212]	; (8001624 <motorstartinit+0x140>)
 8001550:	2200      	movs	r2, #0
 8001552:	801a      	strh	r2, [r3, #0]
step=3670;
 8001554:	4b34      	ldr	r3, [pc, #208]	; (8001628 <motorstartinit+0x144>)
 8001556:	f640 6256 	movw	r2, #3670	; 0xe56
 800155a:	801a      	strh	r2, [r3, #0]
autostep = 0;
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <motorstartinit+0x148>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
risingedge = 0;
 8001562:	4b33      	ldr	r3, [pc, #204]	; (8001630 <motorstartinit+0x14c>)
 8001564:	2200      	movs	r2, #0
 8001566:	701a      	strb	r2, [r3, #0]
zcfound=0;
 8001568:	4b32      	ldr	r3, [pc, #200]	; (8001634 <motorstartinit+0x150>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
alignmentcounter=0;
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <motorstartinit+0x154>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
rampspeed=1;
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <motorstartinit+0x158>)
 8001576:	2201      	movs	r2, #1
 8001578:	601a      	str	r2, [r3, #0]
runningdc = 500;
 800157a:	4b31      	ldr	r3, [pc, #196]	; (8001640 <motorstartinit+0x15c>)
 800157c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001580:	801a      	strh	r2, [r3, #0]
commthreshold=0;
 8001582:	4b30      	ldr	r3, [pc, #192]	; (8001644 <motorstartinit+0x160>)
 8001584:	2200      	movs	r2, #0
 8001586:	801a      	strh	r2, [r3, #0]
risingdelay=127;
 8001588:	4b2f      	ldr	r3, [pc, #188]	; (8001648 <motorstartinit+0x164>)
 800158a:	227f      	movs	r2, #127	; 0x7f
 800158c:	701a      	strb	r2, [r3, #0]
fallingdelay=127;
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <motorstartinit+0x168>)
 8001590:	227f      	movs	r2, #127	; 0x7f
 8001592:	701a      	strb	r2, [r3, #0]
ledoff;
 8001594:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <motorstartinit+0x16c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <motorstartinit+0x16c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015a2:	60da      	str	r2, [r3, #12]
ledstate=0;
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <motorstartinit+0x170>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	701a      	strb	r2, [r3, #0]
flashcount=0;
 80015aa:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <motorstartinit+0x174>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
overcurrent=0;
 80015b0:	4b2a      	ldr	r3, [pc, #168]	; (800165c <motorstartinit+0x178>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
ifb=0;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <motorstartinit+0x17c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	801a      	strh	r2, [r3, #0]
overloaddclimit=1200;
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <motorstartinit+0x180>)
 80015be:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80015c2:	801a      	strh	r2, [r3, #0]
overloadcounter=0;
 80015c4:	4b28      	ldr	r3, [pc, #160]	; (8001668 <motorstartinit+0x184>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
overloadflag=0;
 80015ca:	4b28      	ldr	r3, [pc, #160]	; (800166c <motorstartinit+0x188>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	701a      	strb	r2, [r3, #0]
ifbsum=0;
 80015d0:	4b27      	ldr	r3, [pc, #156]	; (8001670 <motorstartinit+0x18c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
ifbave=0;
 80015d6:	4b27      	ldr	r3, [pc, #156]	; (8001674 <motorstartinit+0x190>)
 80015d8:	2200      	movs	r2, #0
 80015da:	801a      	strh	r2, [r3, #0]
ifbcount=0;
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <motorstartinit+0x194>)
 80015de:	2200      	movs	r2, #0
 80015e0:	801a      	strh	r2, [r3, #0]


} // end of motor start init function
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000054 	.word	0x20000054
 80015f0:	200000f0 	.word	0x200000f0
 80015f4:	200000cc 	.word	0x200000cc
 80015f8:	200000ba 	.word	0x200000ba
 80015fc:	200000e0 	.word	0x200000e0
 8001600:	200000dc 	.word	0x200000dc
 8001604:	200000b0 	.word	0x200000b0
 8001608:	0007ef40 	.word	0x0007ef40
 800160c:	20000120 	.word	0x20000120
 8001610:	20000126 	.word	0x20000126
 8001614:	200000e4 	.word	0x200000e4
 8001618:	200000d2 	.word	0x200000d2
 800161c:	200000c8 	.word	0x200000c8
 8001620:	200000b8 	.word	0x200000b8
 8001624:	200000a6 	.word	0x200000a6
 8001628:	2000010e 	.word	0x2000010e
 800162c:	200000a9 	.word	0x200000a9
 8001630:	200000ce 	.word	0x200000ce
 8001634:	200000cf 	.word	0x200000cf
 8001638:	20000114 	.word	0x20000114
 800163c:	2000011c 	.word	0x2000011c
 8001640:	200000da 	.word	0x200000da
 8001644:	200000f2 	.word	0x200000f2
 8001648:	200000b4 	.word	0x200000b4
 800164c:	200000f6 	.word	0x200000f6
 8001650:	20000070 	.word	0x20000070
 8001654:	200000a8 	.word	0x200000a8
 8001658:	200000fc 	.word	0x200000fc
 800165c:	20000118 	.word	0x20000118
 8001660:	200000ee 	.word	0x200000ee
 8001664:	200000d6 	.word	0x200000d6
 8001668:	20000100 	.word	0x20000100
 800166c:	2000010c 	.word	0x2000010c
 8001670:	200000a0 	.word	0x200000a0
 8001674:	200000d8 	.word	0x200000d8
 8001678:	200000b6 	.word	0x200000b6

0800167c <assert_failed>:
*                  - line: assert error line source number
* Output         : None
* Return         : None
*******************************************************************************/
void assert_failed(u8* file, u32 line)
{ 
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
 8001686:	e7fe      	b.n	8001686 <assert_failed+0xa>

08001688 <NMIException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HardFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001698:	e7fe      	b.n	8001698 <HardFaultException+0x4>

0800169a <MemManageException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800169e:	e7fe      	b.n	800169e <MemManageException+0x4>

080016a0 <BusFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <BusFaultException+0x4>

080016a6 <UsageFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80016aa:	e7fe      	b.n	80016aa <UsageFaultException+0x4>

080016ac <DebugMonitor>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr

080016b8 <SVCHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <PendSVC>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0


}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <WWDG_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <PVD_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <TAMPER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <RTC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	bc80      	pop	{r7}
 800170a:	4770      	bx	lr

0800170c <FLASH_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <RCC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	bc80      	pop	{r7}
 8001722:	4770      	bx	lr

08001724 <EXTI0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <EXTI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <EXTI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <EXTI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <EXTI4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <USB_HP_CAN_TX_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <USB_LP_CAN_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <CAN_RX1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <CAN_SCE_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <EXTI9_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <TIM1_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
TIM1->SR = 0; // clear tim1 brk interrupt
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <TIM1_BRK_IRQHandler+0x1c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2200      	movs	r2, #0
 80017a6:	821a      	strh	r2, [r3, #16]

overcurrent=255;
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <TIM1_BRK_IRQHandler+0x20>)
 80017aa:	22ff      	movs	r2, #255	; 0xff
 80017ac:	701a      	strb	r2, [r3, #0]
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000054 	.word	0x20000054
 80017bc:	20000118 	.word	0x20000118

080017c0 <TIM1_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <TIM1_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <TIM1_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
PWMISR();
 80017dc:	f7ff fbd4 	bl	8000f88 <PWMISR>
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <TIM2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <TIM3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <TIM4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
} // end of tim4 interrupt service routine
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <I2C1_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <I2C1_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <I2C2_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr

0800182c <I2C2_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr

08001838 <SPI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <SPI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr

08001850 <USART1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <USART2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <EXTI15_10_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr

08001880 <RTCAlarm_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <USBWakeUp_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <_init>:
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800189a:	bf00      	nop
 800189c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189e:	bc08      	pop	{r3}
 80018a0:	469e      	mov	lr, r3
 80018a2:	4770      	bx	lr

080018a4 <_fini>:
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	bf00      	nop
 80018a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018aa:	bc08      	pop	{r3}
 80018ac:	469e      	mov	lr, r3
 80018ae:	4770      	bx	lr
