
CubeMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001980  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001a8c  08001a8c  00011a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b08  08001b08  00011b10  2**0
                  CONTENTS
  4 .ARM          00000000  08001b08  08001b08  00011b10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b08  08001b10  00011b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b08  08001b08  00011b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b0c  08001b0c  00011b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000000  08001b10  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08001b10  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011b10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e7d  00000000  00000000  00011b39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d36  00000000  00000000  0001b9b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000658  00000000  00000000  0001c6ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  0001cd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003535  00000000  00000000  0001d32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003183  00000000  00000000  00020861  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00019e46  00000000  00000000  000239e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003d82a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001894  00000000  00000000  0003d8a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08001a74 	.word	0x08001a74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08001a74 	.word	0x08001a74

0800014c <ADC_StartCalibration>:
* Input          : - ADCx: where x can be 1 or 2 to select the ADC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	689b      	ldr	r3, [r3, #8]
 8000158:	f043 0204 	orr.w	r2, r3, #4
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	609a      	str	r2, [r3, #8]
}
 8000160:	bf00      	nop
 8000162:	370c      	adds	r7, #12
 8000164:	46bd      	mov	sp, r7
 8000166:	bc80      	pop	{r7}
 8000168:	4770      	bx	lr

0800016a <ADC_GetCalibrationStatus>:
* Input          : - ADCx: where x can be 1 or 2 to select the ADC peripheral.
* Output         : None
* Return         : The new state of ADC calibration (SET or RESET).
*******************************************************************************/
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 800016a:	b480      	push	{r7}
 800016c:	b085      	sub	sp, #20
 800016e:	af00      	add	r7, sp, #0
 8000170:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000172:	2300      	movs	r3, #0
 8000174:	73fb      	strb	r3, [r7, #15]

  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (u16)RESET)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	689b      	ldr	r3, [r3, #8]
 800017a:	f003 0304 	and.w	r3, r3, #4
 800017e:	2b00      	cmp	r3, #0
 8000180:	d002      	beq.n	8000188 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000182:	2301      	movs	r3, #1
 8000184:	73fb      	strb	r3, [r7, #15]
 8000186:	e001      	b.n	800018c <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000188:	2300      	movs	r3, #0
 800018a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 800018c:	7bfb      	ldrb	r3, [r7, #15]
}
 800018e:	4618      	mov	r0, r3
 8000190:	3714      	adds	r7, #20
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <debug>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void debug(void)
{
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0

/************************************* ADC ************************************/
#ifdef _ADC1
  ADC1 = (ADC_TypeDef *)  ADC1_BASE;
 800019c:	4b33      	ldr	r3, [pc, #204]	; (800026c <debug+0xd4>)
 800019e:	4a34      	ldr	r2, [pc, #208]	; (8000270 <debug+0xd8>)
 80001a0:	601a      	str	r2, [r3, #0]
#endif /*_ADC1 */

#ifdef _ADC2
  ADC2 = (ADC_TypeDef *)  ADC2_BASE;
 80001a2:	4b34      	ldr	r3, [pc, #208]	; (8000274 <debug+0xdc>)
 80001a4:	4a34      	ldr	r2, [pc, #208]	; (8000278 <debug+0xe0>)
 80001a6:	601a      	str	r2, [r3, #0]
#endif /*_ADC2 */

/************************************* BKP ************************************/
#ifdef _BKP
  BKP = (BKP_TypeDef *)  BKP_BASE;
 80001a8:	4b34      	ldr	r3, [pc, #208]	; (800027c <debug+0xe4>)
 80001aa:	4a35      	ldr	r2, [pc, #212]	; (8000280 <debug+0xe8>)
 80001ac:	601a      	str	r2, [r3, #0]
#endif /*_BKP */

/************************************* CAN ************************************/
#ifdef _CAN
  CAN = (CAN_TypeDef *)  CAN_BASE;
 80001ae:	4b35      	ldr	r3, [pc, #212]	; (8000284 <debug+0xec>)
 80001b0:	4a35      	ldr	r2, [pc, #212]	; (8000288 <debug+0xf0>)
 80001b2:	601a      	str	r2, [r3, #0]
#endif /*_CAN */

/************************************* DMA ************************************/
#ifdef _DMA
  DMA = (DMA_TypeDef *)  DMA_BASE;
 80001b4:	4b35      	ldr	r3, [pc, #212]	; (800028c <debug+0xf4>)
 80001b6:	4a36      	ldr	r2, [pc, #216]	; (8000290 <debug+0xf8>)
 80001b8:	601a      	str	r2, [r3, #0]
  DMA_Channel7 = (DMA_Channel_TypeDef *)  DMA_Channel7_BASE;
#endif /*_DMA_Channel7 */

/************************************* EXTI ***********************************/
#ifdef _EXTI
  EXTI = (EXTI_TypeDef *)  EXTI_BASE;
 80001ba:	4b36      	ldr	r3, [pc, #216]	; (8000294 <debug+0xfc>)
 80001bc:	4a36      	ldr	r2, [pc, #216]	; (8000298 <debug+0x100>)
 80001be:	601a      	str	r2, [r3, #0]
#endif /*_EXTI */

/************************************* FLASH and Option Bytes *****************/
#ifdef _FLASH
  FLASH = (FLASH_TypeDef *)  FLASH_BASE;
 80001c0:	4b36      	ldr	r3, [pc, #216]	; (800029c <debug+0x104>)
 80001c2:	4a37      	ldr	r2, [pc, #220]	; (80002a0 <debug+0x108>)
 80001c4:	601a      	str	r2, [r3, #0]
  OB = (OB_TypeDef *)  OB_BASE;
 80001c6:	4b37      	ldr	r3, [pc, #220]	; (80002a4 <debug+0x10c>)
 80001c8:	4a37      	ldr	r2, [pc, #220]	; (80002a8 <debug+0x110>)
 80001ca:	601a      	str	r2, [r3, #0]
#endif /*_FLASH */

/************************************* GPIO ***********************************/
#ifdef _GPIOA
  GPIOA = (GPIO_TypeDef *)  GPIOA_BASE;
 80001cc:	4b37      	ldr	r3, [pc, #220]	; (80002ac <debug+0x114>)
 80001ce:	4a38      	ldr	r2, [pc, #224]	; (80002b0 <debug+0x118>)
 80001d0:	601a      	str	r2, [r3, #0]
#endif /*_GPIOA */

#ifdef _GPIOB
  GPIOB = (GPIO_TypeDef *)  GPIOB_BASE;
 80001d2:	4b38      	ldr	r3, [pc, #224]	; (80002b4 <debug+0x11c>)
 80001d4:	4a38      	ldr	r2, [pc, #224]	; (80002b8 <debug+0x120>)
 80001d6:	601a      	str	r2, [r3, #0]
#endif /*_GPIOB */

#ifdef _GPIOC
  GPIOC = (GPIO_TypeDef *)  GPIOC_BASE;
 80001d8:	4b38      	ldr	r3, [pc, #224]	; (80002bc <debug+0x124>)
 80001da:	4a39      	ldr	r2, [pc, #228]	; (80002c0 <debug+0x128>)
 80001dc:	601a      	str	r2, [r3, #0]
#endif /*_GPIOC */

#ifdef _GPIOD
  GPIOD = (GPIO_TypeDef *)  GPIOD_BASE;
 80001de:	4b39      	ldr	r3, [pc, #228]	; (80002c4 <debug+0x12c>)
 80001e0:	4a39      	ldr	r2, [pc, #228]	; (80002c8 <debug+0x130>)
 80001e2:	601a      	str	r2, [r3, #0]
#endif /*_GPIOD */

#ifdef _GPIOE
  GPIOE = (GPIO_TypeDef *)  GPIOE_BASE;
 80001e4:	4b39      	ldr	r3, [pc, #228]	; (80002cc <debug+0x134>)
 80001e6:	4a3a      	ldr	r2, [pc, #232]	; (80002d0 <debug+0x138>)
 80001e8:	601a      	str	r2, [r3, #0]
#endif /*_GPIOE */

#ifdef _AFIO
  AFIO = (AFIO_TypeDef *)  AFIO_BASE;
 80001ea:	4b3a      	ldr	r3, [pc, #232]	; (80002d4 <debug+0x13c>)
 80001ec:	4a3a      	ldr	r2, [pc, #232]	; (80002d8 <debug+0x140>)
 80001ee:	601a      	str	r2, [r3, #0]
#endif /*_AFIO */

/************************************* I2C ************************************/
#ifdef _I2C1
  I2C1 = (I2C_TypeDef *)  I2C1_BASE;
 80001f0:	4b3a      	ldr	r3, [pc, #232]	; (80002dc <debug+0x144>)
 80001f2:	4a3b      	ldr	r2, [pc, #236]	; (80002e0 <debug+0x148>)
 80001f4:	601a      	str	r2, [r3, #0]
#endif /*_I2C1 */

#ifdef _I2C2
  I2C2 = (I2C_TypeDef *)  I2C2_BASE;
 80001f6:	4b3b      	ldr	r3, [pc, #236]	; (80002e4 <debug+0x14c>)
 80001f8:	4a3b      	ldr	r2, [pc, #236]	; (80002e8 <debug+0x150>)
 80001fa:	601a      	str	r2, [r3, #0]
#endif /*_I2C2 */

/************************************* IWDG ***********************************/
#ifdef _IWDG
  IWDG = (IWDG_TypeDef *) IWDG_BASE;
 80001fc:	4b3b      	ldr	r3, [pc, #236]	; (80002ec <debug+0x154>)
 80001fe:	4a3c      	ldr	r2, [pc, #240]	; (80002f0 <debug+0x158>)
 8000200:	601a      	str	r2, [r3, #0]
#endif /*_IWDG */

/************************************* NVIC ***********************************/
#ifdef _NVIC
  NVIC = (NVIC_TypeDef *)  NVIC_BASE;
 8000202:	4b3c      	ldr	r3, [pc, #240]	; (80002f4 <debug+0x15c>)
 8000204:	4a3c      	ldr	r2, [pc, #240]	; (80002f8 <debug+0x160>)
 8000206:	601a      	str	r2, [r3, #0]
  SCB = (SCB_TypeDef *)  SCB_BASE;
 8000208:	4b3c      	ldr	r3, [pc, #240]	; (80002fc <debug+0x164>)
 800020a:	4a3d      	ldr	r2, [pc, #244]	; (8000300 <debug+0x168>)
 800020c:	601a      	str	r2, [r3, #0]
#endif /*_NVIC */

/************************************* PWR ************************************/
#ifdef _PWR
  PWR = (PWR_TypeDef *)  PWR_BASE;
 800020e:	4b3d      	ldr	r3, [pc, #244]	; (8000304 <debug+0x16c>)
 8000210:	4a3d      	ldr	r2, [pc, #244]	; (8000308 <debug+0x170>)
 8000212:	601a      	str	r2, [r3, #0]
#endif /*_PWR */

/************************************* RCC ************************************/
#ifdef _RCC
  RCC = (RCC_TypeDef *)  RCC_BASE;
 8000214:	4b3d      	ldr	r3, [pc, #244]	; (800030c <debug+0x174>)
 8000216:	4a3e      	ldr	r2, [pc, #248]	; (8000310 <debug+0x178>)
 8000218:	601a      	str	r2, [r3, #0]
#endif /*_RCC */

/************************************* RTC ************************************/
#ifdef _RTC
  RTC = (RTC_TypeDef *)  RTC_BASE;
 800021a:	4b3e      	ldr	r3, [pc, #248]	; (8000314 <debug+0x17c>)
 800021c:	4a3e      	ldr	r2, [pc, #248]	; (8000318 <debug+0x180>)
 800021e:	601a      	str	r2, [r3, #0]
#endif /*_RTC */

/************************************* SPI ************************************/
#ifdef _SPI1
  SPI1 = (SPI_TypeDef *)  SPI1_BASE;
 8000220:	4b3e      	ldr	r3, [pc, #248]	; (800031c <debug+0x184>)
 8000222:	4a3f      	ldr	r2, [pc, #252]	; (8000320 <debug+0x188>)
 8000224:	601a      	str	r2, [r3, #0]
#endif /*_SPI1 */

#ifdef _SPI2
  SPI2 = (SPI_TypeDef *)  SPI2_BASE;
 8000226:	4b3f      	ldr	r3, [pc, #252]	; (8000324 <debug+0x18c>)
 8000228:	4a3f      	ldr	r2, [pc, #252]	; (8000328 <debug+0x190>)
 800022a:	601a      	str	r2, [r3, #0]
#endif /*_SPI2 */

/************************************* SysTick ********************************/
#ifdef _SysTick
  SysTick = (SysTick_TypeDef *)  SysTick_BASE;
 800022c:	4b3f      	ldr	r3, [pc, #252]	; (800032c <debug+0x194>)
 800022e:	4a40      	ldr	r2, [pc, #256]	; (8000330 <debug+0x198>)
 8000230:	601a      	str	r2, [r3, #0]
#endif /*_SysTick */

/************************************* TIM1 ***********************************/
#ifdef _TIM1
  TIM1 = (TIM1_TypeDef *)  TIM1_BASE;
 8000232:	4b40      	ldr	r3, [pc, #256]	; (8000334 <debug+0x19c>)
 8000234:	4a40      	ldr	r2, [pc, #256]	; (8000338 <debug+0x1a0>)
 8000236:	601a      	str	r2, [r3, #0]
#endif /*_TIM1 */

/************************************* TIM ************************************/
#ifdef _TIM2
  TIM2 = (TIM_TypeDef *)  TIM2_BASE;
 8000238:	4b40      	ldr	r3, [pc, #256]	; (800033c <debug+0x1a4>)
 800023a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023e:	601a      	str	r2, [r3, #0]
#endif /*_TIM2 */

#ifdef _TIM3
  TIM3 = (TIM_TypeDef *)  TIM3_BASE;
 8000240:	4b3f      	ldr	r3, [pc, #252]	; (8000340 <debug+0x1a8>)
 8000242:	4a40      	ldr	r2, [pc, #256]	; (8000344 <debug+0x1ac>)
 8000244:	601a      	str	r2, [r3, #0]
#endif /*_TIM3 */

#ifdef _TIM4
  TIM4 = (TIM_TypeDef *)  TIM4_BASE;
 8000246:	4b40      	ldr	r3, [pc, #256]	; (8000348 <debug+0x1b0>)
 8000248:	4a40      	ldr	r2, [pc, #256]	; (800034c <debug+0x1b4>)
 800024a:	601a      	str	r2, [r3, #0]
#endif /*_TIM4 */

/************************************* USART **********************************/
#ifdef _USART1
  USART1 = (USART_TypeDef *) USART1_BASE;
 800024c:	4b40      	ldr	r3, [pc, #256]	; (8000350 <debug+0x1b8>)
 800024e:	4a41      	ldr	r2, [pc, #260]	; (8000354 <debug+0x1bc>)
 8000250:	601a      	str	r2, [r3, #0]
#endif /*_USART1 */

#ifdef _USART2
  USART2 = (USART_TypeDef *) USART2_BASE;
 8000252:	4b41      	ldr	r3, [pc, #260]	; (8000358 <debug+0x1c0>)
 8000254:	4a41      	ldr	r2, [pc, #260]	; (800035c <debug+0x1c4>)
 8000256:	601a      	str	r2, [r3, #0]
#endif /*_USART2 */

#ifdef _USART3
  USART3 = (USART_TypeDef *) USART3_BASE;
 8000258:	4b41      	ldr	r3, [pc, #260]	; (8000360 <debug+0x1c8>)
 800025a:	4a42      	ldr	r2, [pc, #264]	; (8000364 <debug+0x1cc>)
 800025c:	601a      	str	r2, [r3, #0]
#endif /*_USART3 */

/************************************* WWDG ***********************************/
#ifdef _WWDG
  WWDG = (WWDG_TypeDef *)  WWDG_BASE;
 800025e:	4b42      	ldr	r3, [pc, #264]	; (8000368 <debug+0x1d0>)
 8000260:	4a42      	ldr	r2, [pc, #264]	; (800036c <debug+0x1d4>)
 8000262:	601a      	str	r2, [r3, #0]
#endif /*_WWDG */
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	2000009c 	.word	0x2000009c
 8000270:	40012400 	.word	0x40012400
 8000274:	2000006c 	.word	0x2000006c
 8000278:	40012800 	.word	0x40012800
 800027c:	20000094 	.word	0x20000094
 8000280:	40006c00 	.word	0x40006c00
 8000284:	20000068 	.word	0x20000068
 8000288:	40006400 	.word	0x40006400
 800028c:	2000005c 	.word	0x2000005c
 8000290:	40020000 	.word	0x40020000
 8000294:	20000044 	.word	0x20000044
 8000298:	40010400 	.word	0x40010400
 800029c:	20000020 	.word	0x20000020
 80002a0:	40022000 	.word	0x40022000
 80002a4:	2000007c 	.word	0x2000007c
 80002a8:	1ffff800 	.word	0x1ffff800
 80002ac:	20000070 	.word	0x20000070
 80002b0:	40010800 	.word	0x40010800
 80002b4:	20000098 	.word	0x20000098
 80002b8:	40010c00 	.word	0x40010c00
 80002bc:	2000001c 	.word	0x2000001c
 80002c0:	40011000 	.word	0x40011000
 80002c4:	20000088 	.word	0x20000088
 80002c8:	40011400 	.word	0x40011400
 80002cc:	20000040 	.word	0x20000040
 80002d0:	40011800 	.word	0x40011800
 80002d4:	20000060 	.word	0x20000060
 80002d8:	40010000 	.word	0x40010000
 80002dc:	2000002c 	.word	0x2000002c
 80002e0:	40005400 	.word	0x40005400
 80002e4:	20000050 	.word	0x20000050
 80002e8:	40005800 	.word	0x40005800
 80002ec:	20000074 	.word	0x20000074
 80002f0:	40003000 	.word	0x40003000
 80002f4:	2000003c 	.word	0x2000003c
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	20000024 	.word	0x20000024
 8000300:	e000ed00 	.word	0xe000ed00
 8000304:	2000008c 	.word	0x2000008c
 8000308:	40007000 	.word	0x40007000
 800030c:	20000058 	.word	0x20000058
 8000310:	40021000 	.word	0x40021000
 8000314:	20000078 	.word	0x20000078
 8000318:	40002800 	.word	0x40002800
 800031c:	20000038 	.word	0x20000038
 8000320:	40013000 	.word	0x40013000
 8000324:	20000064 	.word	0x20000064
 8000328:	40003800 	.word	0x40003800
 800032c:	20000090 	.word	0x20000090
 8000330:	e000e010 	.word	0xe000e010
 8000334:	20000054 	.word	0x20000054
 8000338:	40012c00 	.word	0x40012c00
 800033c:	20000080 	.word	0x20000080
 8000340:	20000034 	.word	0x20000034
 8000344:	40000400 	.word	0x40000400
 8000348:	20000048 	.word	0x20000048
 800034c:	40000800 	.word	0x40000800
 8000350:	20000084 	.word	0x20000084
 8000354:	40013800 	.word	0x40013800
 8000358:	20000028 	.word	0x20000028
 800035c:	40004400 	.word	0x40004400
 8000360:	2000004c 	.word	0x2000004c
 8000364:	40004800 	.word	0x40004800
 8000368:	20000030 	.word	0x20000030
 800036c:	40002c00 	.word	0x40002c00

08000370 <NVIC_Init>:
*                    specified NVIC peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b088      	sub	sp, #32
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  u32 tmppriority = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000378:	2300      	movs	r3, #0
 800037a:	61fb      	str	r3, [r7, #28]
 800037c:	2300      	movs	r3, #0
 800037e:	61bb      	str	r3, [r7, #24]
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]
  u32 tmppre = 0, tmpsub = 0x0F;
 8000384:	2300      	movs	r3, #0
 8000386:	613b      	str	r3, [r7, #16]
 8000388:	230f      	movs	r3, #15
 800038a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	78db      	ldrb	r3, [r3, #3]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d007      	beq.n	80003a4 <NVIC_Init+0x34>
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	78db      	ldrb	r3, [r3, #3]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d003      	beq.n	80003a4 <NVIC_Init+0x34>
 800039c:	217a      	movs	r1, #122	; 0x7a
 800039e:	489c      	ldr	r0, [pc, #624]	; (8000610 <NVIC_Init+0x2a0>)
 80003a0:	f001 fa5a 	bl	8001858 <assert_failed>
  assert_param(IS_NVIC_IRQ_CHANNEL(NVIC_InitStruct->NVIC_IRQChannel));
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f000 80b6 	beq.w	800051a <NVIC_Init+0x1aa>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b01      	cmp	r3, #1
 80003b4:	f000 80b1 	beq.w	800051a <NVIC_Init+0x1aa>
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	f000 80ac 	beq.w	800051a <NVIC_Init+0x1aa>
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	f000 80a7 	beq.w	800051a <NVIC_Init+0x1aa>
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2b04      	cmp	r3, #4
 80003d2:	f000 80a2 	beq.w	800051a <NVIC_Init+0x1aa>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	2b05      	cmp	r3, #5
 80003dc:	f000 809d 	beq.w	800051a <NVIC_Init+0x1aa>
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b06      	cmp	r3, #6
 80003e6:	f000 8098 	beq.w	800051a <NVIC_Init+0x1aa>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b07      	cmp	r3, #7
 80003f0:	f000 8093 	beq.w	800051a <NVIC_Init+0x1aa>
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b08      	cmp	r3, #8
 80003fa:	f000 808e 	beq.w	800051a <NVIC_Init+0x1aa>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	f000 8089 	beq.w	800051a <NVIC_Init+0x1aa>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b0a      	cmp	r3, #10
 800040e:	f000 8084 	beq.w	800051a <NVIC_Init+0x1aa>
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b0b      	cmp	r3, #11
 8000418:	d07f      	beq.n	800051a <NVIC_Init+0x1aa>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b0c      	cmp	r3, #12
 8000420:	d07b      	beq.n	800051a <NVIC_Init+0x1aa>
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b0d      	cmp	r3, #13
 8000428:	d077      	beq.n	800051a <NVIC_Init+0x1aa>
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b0e      	cmp	r3, #14
 8000430:	d073      	beq.n	800051a <NVIC_Init+0x1aa>
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b0f      	cmp	r3, #15
 8000438:	d06f      	beq.n	800051a <NVIC_Init+0x1aa>
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b10      	cmp	r3, #16
 8000440:	d06b      	beq.n	800051a <NVIC_Init+0x1aa>
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b11      	cmp	r3, #17
 8000448:	d067      	beq.n	800051a <NVIC_Init+0x1aa>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b12      	cmp	r3, #18
 8000450:	d063      	beq.n	800051a <NVIC_Init+0x1aa>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b13      	cmp	r3, #19
 8000458:	d05f      	beq.n	800051a <NVIC_Init+0x1aa>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b14      	cmp	r3, #20
 8000460:	d05b      	beq.n	800051a <NVIC_Init+0x1aa>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b15      	cmp	r3, #21
 8000468:	d057      	beq.n	800051a <NVIC_Init+0x1aa>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b16      	cmp	r3, #22
 8000470:	d053      	beq.n	800051a <NVIC_Init+0x1aa>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b17      	cmp	r3, #23
 8000478:	d04f      	beq.n	800051a <NVIC_Init+0x1aa>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b18      	cmp	r3, #24
 8000480:	d04b      	beq.n	800051a <NVIC_Init+0x1aa>
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	781b      	ldrb	r3, [r3, #0]
 8000486:	2b19      	cmp	r3, #25
 8000488:	d047      	beq.n	800051a <NVIC_Init+0x1aa>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b1a      	cmp	r3, #26
 8000490:	d043      	beq.n	800051a <NVIC_Init+0x1aa>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b1b      	cmp	r3, #27
 8000498:	d03f      	beq.n	800051a <NVIC_Init+0x1aa>
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	2b1c      	cmp	r3, #28
 80004a0:	d03b      	beq.n	800051a <NVIC_Init+0x1aa>
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b1d      	cmp	r3, #29
 80004a8:	d037      	beq.n	800051a <NVIC_Init+0x1aa>
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b1e      	cmp	r3, #30
 80004b0:	d033      	beq.n	800051a <NVIC_Init+0x1aa>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b1f      	cmp	r3, #31
 80004b8:	d02f      	beq.n	800051a <NVIC_Init+0x1aa>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b20      	cmp	r3, #32
 80004c0:	d02b      	beq.n	800051a <NVIC_Init+0x1aa>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b21      	cmp	r3, #33	; 0x21
 80004c8:	d027      	beq.n	800051a <NVIC_Init+0x1aa>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b22      	cmp	r3, #34	; 0x22
 80004d0:	d023      	beq.n	800051a <NVIC_Init+0x1aa>
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b23      	cmp	r3, #35	; 0x23
 80004d8:	d01f      	beq.n	800051a <NVIC_Init+0x1aa>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b24      	cmp	r3, #36	; 0x24
 80004e0:	d01b      	beq.n	800051a <NVIC_Init+0x1aa>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b25      	cmp	r3, #37	; 0x25
 80004e8:	d017      	beq.n	800051a <NVIC_Init+0x1aa>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b26      	cmp	r3, #38	; 0x26
 80004f0:	d013      	beq.n	800051a <NVIC_Init+0x1aa>
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b27      	cmp	r3, #39	; 0x27
 80004f8:	d00f      	beq.n	800051a <NVIC_Init+0x1aa>
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	2b28      	cmp	r3, #40	; 0x28
 8000500:	d00b      	beq.n	800051a <NVIC_Init+0x1aa>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b29      	cmp	r3, #41	; 0x29
 8000508:	d007      	beq.n	800051a <NVIC_Init+0x1aa>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b2a      	cmp	r3, #42	; 0x2a
 8000510:	d003      	beq.n	800051a <NVIC_Init+0x1aa>
 8000512:	217b      	movs	r1, #123	; 0x7b
 8000514:	483e      	ldr	r0, [pc, #248]	; (8000610 <NVIC_Init+0x2a0>)
 8000516:	f001 f99f 	bl	8001858 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	785b      	ldrb	r3, [r3, #1]
 800051e:	2b0f      	cmp	r3, #15
 8000520:	d903      	bls.n	800052a <NVIC_Init+0x1ba>
 8000522:	217c      	movs	r1, #124	; 0x7c
 8000524:	483a      	ldr	r0, [pc, #232]	; (8000610 <NVIC_Init+0x2a0>)
 8000526:	f001 f997 	bl	8001858 <assert_failed>
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	789b      	ldrb	r3, [r3, #2]
 800052e:	2b0f      	cmp	r3, #15
 8000530:	d903      	bls.n	800053a <NVIC_Init+0x1ca>
 8000532:	217d      	movs	r1, #125	; 0x7d
 8000534:	4836      	ldr	r0, [pc, #216]	; (8000610 <NVIC_Init+0x2a0>)
 8000536:	f001 f98f 	bl	8001858 <assert_failed>
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	78db      	ldrb	r3, [r3, #3]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d06c      	beq.n	800061c <NVIC_Init+0x2ac>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - (SCB->AIRCR & (u32)0x700))>> 0x08;
 8000542:	4b34      	ldr	r3, [pc, #208]	; (8000614 <NVIC_Init+0x2a4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	43db      	mvns	r3, r3
 800054a:	0a1b      	lsrs	r3, r3, #8
 800054c:	f003 0307 	and.w	r3, r3, #7
 8000550:	61fb      	str	r3, [r7, #28]
    tmppre = (0x4 - tmppriority);
 8000552:	69fb      	ldr	r3, [r7, #28]
 8000554:	f1c3 0304 	rsb	r3, r3, #4
 8000558:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	69fb      	ldr	r3, [r7, #28]
 800055e:	fa22 f303 	lsr.w	r3, r2, r3
 8000562:	60fb      	str	r3, [r7, #12]
    
    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	785b      	ldrb	r3, [r3, #1]
 8000568:	461a      	mov	r2, r3
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	fa02 f303 	lsl.w	r3, r2, r3
 8000570:	61fb      	str	r3, [r7, #28]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	789b      	ldrb	r3, [r3, #2]
 8000576:	461a      	mov	r2, r3
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4013      	ands	r3, r2
 800057c:	69fa      	ldr	r2, [r7, #28]
 800057e:	4313      	orrs	r3, r2
 8000580:	61fb      	str	r3, [r7, #28]

    tmppriority = tmppriority << 0x04;
 8000582:	69fb      	ldr	r3, [r7, #28]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	61fb      	str	r3, [r7, #28]
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	f003 0303 	and.w	r3, r3, #3
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	69fa      	ldr	r2, [r7, #28]
 8000594:	fa02 f303 	lsl.w	r3, r2, r3
 8000598:	61fb      	str	r3, [r7, #28]
    
    tmpreg = NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <NVIC_Init+0x2a8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7812      	ldrb	r2, [r2, #0]
 80005a2:	0892      	lsrs	r2, r2, #2
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	32c0      	adds	r2, #192	; 0xc0
 80005a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ac:	61bb      	str	r3, [r7, #24]
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	f003 0303 	and.w	r3, r3, #3
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	22ff      	movs	r2, #255	; 0xff
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	617b      	str	r3, [r7, #20]
    tmpreg &= ~tmpmask;
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	43db      	mvns	r3, r3
 80005c4:	69ba      	ldr	r2, [r7, #24]
 80005c6:	4013      	ands	r3, r2
 80005c8:	61bb      	str	r3, [r7, #24]
    tmppriority &= tmpmask;  
 80005ca:	69fa      	ldr	r2, [r7, #28]
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	4013      	ands	r3, r2
 80005d0:	61fb      	str	r3, [r7, #28]
    tmpreg |= tmppriority;
 80005d2:	69ba      	ldr	r2, [r7, #24]
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	4313      	orrs	r3, r2
 80005d8:	61bb      	str	r3, [r7, #24]

    NVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <NVIC_Init+0x2a8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7812      	ldrb	r2, [r2, #0]
 80005e2:	0892      	lsrs	r2, r2, #2
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	32c0      	adds	r2, #192	; 0xc0
 80005e8:	69b9      	ldr	r1, [r7, #24]
 80005ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	f003 021f 	and.w	r2, r3, #31
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <NVIC_Init+0x2a8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	7809      	ldrb	r1, [r1, #0]
 80005fe:	0949      	lsrs	r1, r1, #5
 8000600:	b2c9      	uxtb	r1, r1
 8000602:	4608      	mov	r0, r1
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000604:	2101      	movs	r1, #1
 8000606:	fa01 f202 	lsl.w	r2, r1, r2
    NVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800060a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
  }
}
 800060e:	e016      	b.n	800063e <NVIC_Init+0x2ce>
 8000610:	08001a8c 	.word	0x08001a8c
 8000614:	20000024 	.word	0x20000024
 8000618:	2000003c 	.word	0x2000003c
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	f003 021f 	and.w	r2, r3, #31
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <NVIC_Init+0x2d8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	7809      	ldrb	r1, [r1, #0]
 800062c:	0949      	lsrs	r1, r1, #5
 800062e:	b2c9      	uxtb	r1, r1
 8000630:	4608      	mov	r0, r1
      (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000632:	2101      	movs	r1, #1
 8000634:	4091      	lsls	r1, r2
    NVIC->ICER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000636:	f100 0220 	add.w	r2, r0, #32
 800063a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800063e:	bf00      	nop
 8000640:	3720      	adds	r7, #32
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	2000003c 	.word	0x2000003c

0800064c <RCC_PLLCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLLCmd(FunctionalState NewState)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d007      	beq.n	800066c <RCC_PLLCmd+0x20>
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	2b01      	cmp	r3, #1
 8000660:	d004      	beq.n	800066c <RCC_PLLCmd+0x20>
 8000662:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <RCC_PLLCmd+0x30>)
 8000668:	f001 f8f6 	bl	8001858 <assert_failed>

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <RCC_PLLCmd+0x34>)
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	6013      	str	r3, [r2, #0]
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	08001ac4 	.word	0x08001ac4
 8000680:	42420060 	.word	0x42420060

08000684 <RCC_SYSCLKConfig>:
*                       - RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_SYSCLKConfig(u32 RCC_SYSCLKSource)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d00a      	beq.n	80006ac <RCC_SYSCLKConfig+0x28>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d007      	beq.n	80006ac <RCC_SYSCLKConfig+0x28>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d004      	beq.n	80006ac <RCC_SYSCLKConfig+0x28>
 80006a2:	f240 115b 	movw	r1, #347	; 0x15b
 80006a6:	480b      	ldr	r0, [pc, #44]	; (80006d4 <RCC_SYSCLKConfig+0x50>)
 80006a8:	f001 f8d6 	bl	8001858 <assert_failed>

  tmpreg = RCC->CFGR;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <RCC_SYSCLKConfig+0x54>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f023 0303 	bic.w	r3, r3, #3
 80006ba:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <RCC_SYSCLKConfig+0x54>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	605a      	str	r2, [r3, #4]
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	08001ac4 	.word	0x08001ac4
 80006d8:	20000058 	.word	0x20000058

080006dc <RCC_GetSYSCLKSource>:
*                       - 0x00: HSI used as system clock
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <RCC_GetSYSCLKSource+0x1c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	f003 030c 	and.w	r3, r3, #12
 80006ec:	b2db      	uxtb	r3, r3
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	20000058 	.word	0x20000058

080006fc <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	460b      	mov	r3, r1
 8000706:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f423 43bc 	bic.w	r3, r3, #24064	; 0x5e00
 800070e:	f023 037d 	bic.w	r3, r3, #125	; 0x7d
 8000712:	2b00      	cmp	r3, #0
 8000714:	d102      	bne.n	800071c <RCC_APB2PeriphClockCmd+0x20>
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d104      	bne.n	8000726 <RCC_APB2PeriphClockCmd+0x2a>
 800071c:	f240 3125 	movw	r1, #805	; 0x325
 8000720:	4813      	ldr	r0, [pc, #76]	; (8000770 <RCC_APB2PeriphClockCmd+0x74>)
 8000722:	f001 f899 	bl	8001858 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d007      	beq.n	800073c <RCC_APB2PeriphClockCmd+0x40>
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d004      	beq.n	800073c <RCC_APB2PeriphClockCmd+0x40>
 8000732:	f240 3126 	movw	r1, #806	; 0x326
 8000736:	480e      	ldr	r0, [pc, #56]	; (8000770 <RCC_APB2PeriphClockCmd+0x74>)
 8000738:	f001 f88e 	bl	8001858 <assert_failed>

  if (NewState != DISABLE)
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d008      	beq.n	8000754 <RCC_APB2PeriphClockCmd+0x58>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <RCC_APB2PeriphClockCmd+0x78>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	6999      	ldr	r1, [r3, #24]
 8000748:	4b0a      	ldr	r3, [pc, #40]	; (8000774 <RCC_APB2PeriphClockCmd+0x78>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	430a      	orrs	r2, r1
 8000750:	619a      	str	r2, [r3, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000752:	e008      	b.n	8000766 <RCC_APB2PeriphClockCmd+0x6a>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <RCC_APB2PeriphClockCmd+0x78>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6999      	ldr	r1, [r3, #24]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	43da      	mvns	r2, r3
 800075e:	4b05      	ldr	r3, [pc, #20]	; (8000774 <RCC_APB2PeriphClockCmd+0x78>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	400a      	ands	r2, r1
 8000764:	619a      	str	r2, [r3, #24]
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	08001ac4 	.word	0x08001ac4
 8000774:	20000058 	.word	0x20000058

08000778 <RCC_GetFlagStatus>:
*                       - RCC_FLAG_LPWRRST: Low Power reset
* Output         : None
* Return         : The new state of RCC_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus RCC_GetFlagStatus(u8 RCC_FLAG)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  u32 tmp = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  u32 statusreg = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800078a:	2300      	movs	r3, #0
 800078c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b20      	cmp	r3, #32
 8000792:	d022      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	2b31      	cmp	r3, #49	; 0x31
 8000798:	d01f      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b39      	cmp	r3, #57	; 0x39
 800079e:	d01c      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	2b41      	cmp	r3, #65	; 0x41
 80007a4:	d019      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b61      	cmp	r3, #97	; 0x61
 80007aa:	d016      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	2b7a      	cmp	r3, #122	; 0x7a
 80007b0:	d013      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b7b      	cmp	r3, #123	; 0x7b
 80007b6:	d010      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 80007b8:	79fb      	ldrb	r3, [r7, #7]
 80007ba:	2b7c      	cmp	r3, #124	; 0x7c
 80007bc:	d00d      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 80007be:	79fb      	ldrb	r3, [r7, #7]
 80007c0:	2b7d      	cmp	r3, #125	; 0x7d
 80007c2:	d00a      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	2b7e      	cmp	r3, #126	; 0x7e
 80007c8:	d007      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b7f      	cmp	r3, #127	; 0x7f
 80007ce:	d004      	beq.n	80007da <RCC_GetFlagStatus+0x62>
 80007d0:	f240 31df 	movw	r1, #991	; 0x3df
 80007d4:	4818      	ldr	r0, [pc, #96]	; (8000838 <RCC_GetFlagStatus+0xc0>)
 80007d6:	f001 f83f 	bl	8001858 <assert_failed>

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	095b      	lsrs	r3, r3, #5
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d104      	bne.n	80007f2 <RCC_GetFlagStatus+0x7a>
  {
    statusreg = RCC->CR;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <RCC_GetFlagStatus+0xc4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	e00b      	b.n	800080a <RCC_GetFlagStatus+0x92>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d104      	bne.n	8000802 <RCC_GetFlagStatus+0x8a>
  {
    statusreg = RCC->BDCR;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <RCC_GetFlagStatus+0xc4>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6a1b      	ldr	r3, [r3, #32]
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	e003      	b.n	800080a <RCC_GetFlagStatus+0x92>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <RCC_GetFlagStatus+0xc4>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000808:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	f003 031f 	and.w	r3, r3, #31
 8000810:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 8000812:	697a      	ldr	r2, [r7, #20]
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	fa22 f303 	lsr.w	r3, r2, r3
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	2b00      	cmp	r3, #0
 8000820:	d002      	beq.n	8000828 <RCC_GetFlagStatus+0xb0>
  {
    bitstatus = SET;
 8000822:	2301      	movs	r3, #1
 8000824:	74fb      	strb	r3, [r7, #19]
 8000826:	e001      	b.n	800082c <RCC_GetFlagStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 8000828:	2300      	movs	r3, #0
 800082a:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 800082c:	7cfb      	ldrb	r3, [r7, #19]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	08001ac4 	.word	0x08001ac4
 800083c:	20000058 	.word	0x20000058

08000840 <DMAChannel1_IRQHandler>:
void USART3_IRQHandler(void);
void EXTI15_10_IRQHandler(void);
void RTCAlarm_IRQHandler(void);
void USBWakeUp_IRQHandler(void);

void DMAChannel1_IRQHandler(void) {}
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <DMAChannel2_IRQHandler>:
void DMAChannel2_IRQHandler(void) {}
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <DMAChannel3_IRQHandler>:
void DMAChannel3_IRQHandler(void) {}
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <DMAChannel4_IRQHandler>:
void DMAChannel4_IRQHandler(void) {}
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr

08000870 <DMAChannel5_IRQHandler>:
void DMAChannel5_IRQHandler(void) {}
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	bc80      	pop	{r7}
 800087a:	4770      	bx	lr

0800087c <DMAChannel6_IRQHandler>:
void DMAChannel6_IRQHandler(void) {}
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <DMAChannel7_IRQHandler>:
void DMAChannel7_IRQHandler(void) {}
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr

08000894 <ADC_IRQHandler>:
void ADC_IRQHandler(void) {}
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <Reset_Handler>:
* Input          :
* Output         :
* Return         :
*******************************************************************************/
void Reset_Handler(void)
{
 80008a0:	4668      	mov	r0, sp
 80008a2:	f020 0107 	bic.w	r1, r0, #7
 80008a6:	468d      	mov	sp, r1
 80008a8:	b581      	push	{r0, r7, lr}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
    unsigned long *pulSrc, *pulDest;

    //
    // Copy the data segment initializers from flash to SRAM.
    //
    pulSrc = &_sidata;
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <Reset_Handler+0x5c>)
 80008b0:	607b      	str	r3, [r7, #4]
    for(pulDest = &_sdata; pulDest < &_edata; )
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <Reset_Handler+0x60>)
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	e007      	b.n	80008c8 <Reset_Handler+0x28>
    {
        *(pulDest++) = *(pulSrc++);
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	1d13      	adds	r3, r2, #4
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	1d19      	adds	r1, r3, #4
 80008c2:	6039      	str	r1, [r7, #0]
 80008c4:	6812      	ldr	r2, [r2, #0]
 80008c6:	601a      	str	r2, [r3, #0]
    for(pulDest = &_sdata; pulDest < &_edata; )
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	4a0e      	ldr	r2, [pc, #56]	; (8000904 <Reset_Handler+0x64>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d3f3      	bcc.n	80008b8 <Reset_Handler+0x18>
    }

    //
    // Zero fill the bss segment.
    //
    for(pulDest = &_sbss; pulDest < &_ebss; )
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <Reset_Handler+0x68>)
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	e004      	b.n	80008e0 <Reset_Handler+0x40>
    {
        *(pulDest++) = 0;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	1d1a      	adds	r2, r3, #4
 80008da:	603a      	str	r2, [r7, #0]
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
    for(pulDest = &_sbss; pulDest < &_ebss; )
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	4a0a      	ldr	r2, [pc, #40]	; (800090c <Reset_Handler+0x6c>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d3f6      	bcc.n	80008d6 <Reset_Handler+0x36>
    }

    //
    // Call the application's entry point.
    //
    main();
 80008e8:	f000 f812 	bl	8000910 <main>
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	e8bd 4081 	ldmia.w	sp!, {r0, r7, lr}
 80008f6:	4685      	mov	sp, r0
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	08001b10 	.word	0x08001b10
 8000900:	20000000 	.word	0x20000000
 8000904:	20000000 	.word	0x20000000
 8000908:	20000000 	.word	0x20000000
 800090c:	20000128 	.word	0x20000128

08000910 <main>:
 * Input          : None
 * Output         : None
 * Return         : None
 *******************************************************************************/
int main(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
  signed long slong0;
  signed long propterm;
  signed long intterm;

  // wait for power supply to stabilize
  long0=0;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]

  while(long0<1000000) long0++;
 800091a:	e002      	b.n	8000922 <main+0x12>
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	3301      	adds	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	4aa1      	ldr	r2, [pc, #644]	; (8000bac <main+0x29c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d9f8      	bls.n	800091c <main+0xc>
  // sk RCC_DeInit();

  // sk FLASH_SetLatency(FLASH_Latency_2);        // Flash: 2 wait states (HCLK > 48MHz)
  // sk FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);  // Enable Prefetch Buffer

  debug(); // initializes all periphery pointers based on RCC_BASE
 800092a:	f7ff fc35 	bl	8000198 <debug>

  RCC->CFGR = 0x00100000; // all dividers to minimum, PLL to *6, HSI selected
 800092e:	4ba0      	ldr	r3, [pc, #640]	; (8000bb0 <main+0x2a0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000936:	605a      	str	r2, [r3, #4]

  long0 =1;
 8000938:	2301      	movs	r3, #1
 800093a:	617b      	str	r3, [r7, #20]

  RCC_PLLCmd(ENABLE);       /* Enable PLL */
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff fe85 	bl	800064c <RCC_PLLCmd>
  while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET);        /* Wait till PLL is ready */
 8000942:	bf00      	nop
 8000944:	2039      	movs	r0, #57	; 0x39
 8000946:	f7ff ff17 	bl	8000778 <RCC_GetFlagStatus>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f9      	beq.n	8000944 <main+0x34>
  RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);        /* Select PLL as system clock source */
 8000950:	2002      	movs	r0, #2
 8000952:	f7ff fe97 	bl	8000684 <RCC_SYSCLKConfig>
  while(RCC_GetSYSCLKSource() != 0x08);        /* Wait till PLL is used as system clock source */
 8000956:	bf00      	nop
 8000958:	f7ff fec0 	bl	80006dc <RCC_GetSYSCLKSource>
 800095c:	4603      	mov	r3, r0
 800095e:	2b08      	cmp	r3, #8
 8000960:	d1fa      	bne.n	8000958 <main+0x48>

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,  ENABLE);
 8000962:	2101      	movs	r1, #1
 8000964:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000968:	f7ff fec8 	bl	80006fc <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800096c:	2101      	movs	r1, #1
 800096e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000972:	f7ff fec3 	bl	80006fc <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000976:	2101      	movs	r1, #1
 8000978:	2004      	movs	r0, #4
 800097a:	f7ff febf 	bl	80006fc <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800097e:	2101      	movs	r1, #1
 8000980:	2008      	movs	r0, #8
 8000982:	f7ff febb 	bl	80006fc <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000986:	2101      	movs	r1, #1
 8000988:	2001      	movs	r0, #1
 800098a:	f7ff feb7 	bl	80006fc <RCC_APB2PeriphClockCmd>

  // old: AFIO->MAPR= b25;  // free up PA15
  AFIO->MAPR= b25 + b6;  // free up PA15 and TIM1 = partial remap
 800098e:	4b89      	ldr	r3, [pc, #548]	; (8000bb4 <main+0x2a4>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a89      	ldr	r2, [pc, #548]	; (8000bb8 <main+0x2a8>)
 8000994:	605a      	str	r2, [r3, #4]

  // port A setup
  GPIOA->CRH = 0x34443BBB; // 15,11 as PP, 8,9,10 AF PP, rest inputs
 8000996:	4b89      	ldr	r3, [pc, #548]	; (8000bbc <main+0x2ac>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a89      	ldr	r2, [pc, #548]	; (8000bc0 <main+0x2b0>)
 800099c:	605a      	str	r2, [r3, #4]
  // old: GPIOA->CRL = 0x00444440; // a7 and a6 and a0 ain
  GPIOA->CRL = 0xB0444440; // a7 is AF PP,  and a6 and a0 are ain
 800099e:	4b87      	ldr	r3, [pc, #540]	; (8000bbc <main+0x2ac>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a88      	ldr	r2, [pc, #544]	; (8000bc4 <main+0x2b4>)
 80009a4:	601a      	str	r2, [r3, #0]

  // port B setup
  // old: GPIOB->CRH = 0xBBB43444; // 15,14,13 AF PP, 11 PP, rest inputs
  GPIOB->CRH = 0x44443444; // 15,14,13 are now floating inputs, 11 PP, rest inputs
 80009a6:	4b88      	ldr	r3, [pc, #544]	; (8000bc8 <main+0x2b8>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a88      	ldr	r2, [pc, #544]	; (8000bcc <main+0x2bc>)
 80009ac:	605a      	str	r2, [r3, #4]
  // old: GPIOB->CRL = 0x43444440; // b0 ain, b6 GPIO PP
  GPIOB->CRL = 0x434444BB; // b0, b1 are AF PP, b6 GPIO PP
 80009ae:	4b86      	ldr	r3, [pc, #536]	; (8000bc8 <main+0x2b8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a87      	ldr	r2, [pc, #540]	; (8000bd0 <main+0x2c0>)
 80009b4:	601a      	str	r2, [r3, #0]
  GPIOB->ODR &= ~b11;  //clear pb11 to select bemf off time sampling
 80009b6:	4b84      	ldr	r3, [pc, #528]	; (8000bc8 <main+0x2b8>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68da      	ldr	r2, [r3, #12]
 80009bc:	4b82      	ldr	r3, [pc, #520]	; (8000bc8 <main+0x2b8>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009c4:	60da      	str	r2, [r3, #12]

  // tim1 setup
  TIM1->SMCR = b15; // make ETR input active low
 80009c6:	4b83      	ldr	r3, [pc, #524]	; (8000bd4 <main+0x2c4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009ce:	811a      	strh	r2, [r3, #8]
  TIM1->CR2= b9+b11+b13;
 80009d0:	4b80      	ldr	r3, [pc, #512]	; (8000bd4 <main+0x2c4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80009d8:	809a      	strh	r2, [r3, #4]
  TIM1->CCR1= 0;
 80009da:	4b7e      	ldr	r3, [pc, #504]	; (8000bd4 <main+0x2c4>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2200      	movs	r2, #0
 80009e0:	869a      	strh	r2, [r3, #52]	; 0x34
  TIM1->CCR2= 0;
 80009e2:	4b7c      	ldr	r3, [pc, #496]	; (8000bd4 <main+0x2c4>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	2200      	movs	r2, #0
 80009e8:	871a      	strh	r2, [r3, #56]	; 0x38
  TIM1->CCR3= 0;
 80009ea:	4b7a      	ldr	r3, [pc, #488]	; (8000bd4 <main+0x2c4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2200      	movs	r2, #0
 80009f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  TIM1->CCR4= 1100;
 80009f2:	4b78      	ldr	r3, [pc, #480]	; (8000bd4 <main+0x2c4>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f240 424c 	movw	r2, #1100	; 0x44c
 80009fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  TIM1->ARR=1200;
 80009fe:	4b75      	ldr	r3, [pc, #468]	; (8000bd4 <main+0x2c4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000a06:	859a      	strh	r2, [r3, #44]	; 0x2c
  TIM1->CR1=0x0001;
 8000a08:	4b72      	ldr	r3, [pc, #456]	; (8000bd4 <main+0x2c4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	801a      	strh	r2, [r3, #0]
  // b12 to enable brk input
  TIM1->BDTR= b15+b12+b11+16;  // 2 usec dead time and set MOE
 8000a10:	4b70      	ldr	r3, [pc, #448]	; (8000bd4 <main+0x2c4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f649 0210 	movw	r2, #38928	; 0x9810
 8000a18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  // note: b15 b7 and b7 are to enable   based current limit
  TIM1->CCMR1= 0x6868 +b15 + b7;
 8000a1c:	4b6d      	ldr	r3, [pc, #436]	; (8000bd4 <main+0x2c4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f64e 02e8 	movw	r2, #59624	; 0xe8e8
 8000a24:	831a      	strh	r2, [r3, #24]
  TIM1->CCMR2= 0x6868 +b7;
 8000a26:	4b6b      	ldr	r3, [pc, #428]	; (8000bd4 <main+0x2c4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f646 02e8 	movw	r2, #26856	; 0x68e8
 8000a2e:	839a      	strh	r2, [r3, #28]
  // b4 for cc4 and b7 for brk interrupt
  TIM1->DIER = b4+b7;  // enable cc4 interrupt
 8000a30:	4b68      	ldr	r3, [pc, #416]	; (8000bd4 <main+0x2c4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2290      	movs	r2, #144	; 0x90
 8000a36:	819a      	strh	r2, [r3, #12]
  // sk RCC->APB1ENR |= b29; // enable DAC peripheral clock

  // sk DAC->CR = b16+b0 ; // enable both DACs

  // ADC setup
  ADC1->CR2=0x00000001;  // turn ADC on
 8000a38:	4b67      	ldr	r3, [pc, #412]	; (8000bd8 <main+0x2c8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	609a      	str	r2, [r3, #8]
  ADC_StartCalibration(ADC1);
 8000a40:	4b65      	ldr	r3, [pc, #404]	; (8000bd8 <main+0x2c8>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fb81 	bl	800014c <ADC_StartCalibration>
  while (ADC_GetCalibrationStatus(ADC1) );
 8000a4a:	bf00      	nop
 8000a4c:	4b62      	ldr	r3, [pc, #392]	; (8000bd8 <main+0x2c8>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fb8a 	bl	800016a <ADC_GetCalibrationStatus>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1f7      	bne.n	8000a4c <main+0x13c>
  ADC1->CR1=0x00000800;  // enable discontinuous regular conversion
 8000a5c:	4b5e      	ldr	r3, [pc, #376]	; (8000bd8 <main+0x2c8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a64:	605a      	str	r2, [r3, #4]
  ADC1->CR2=0x00000001;  // turn ADC on
 8000a66:	4b5c      	ldr	r3, [pc, #368]	; (8000bd8 <main+0x2c8>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	609a      	str	r2, [r3, #8]

  // initialization
  globalcounter=0;
 8000a6e:	4b5b      	ldr	r3, [pc, #364]	; (8000bdc <main+0x2cc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
  heartbeat1time=0;
 8000a74:	4b5a      	ldr	r3, [pc, #360]	; (8000be0 <main+0x2d0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
  heartbeat2time=0;
 8000a7a:	4b5a      	ldr	r3, [pc, #360]	; (8000be4 <main+0x2d4>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
  heartbeat3time=0;
 8000a80:	4b59      	ldr	r3, [pc, #356]	; (8000be8 <main+0x2d8>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
  run=0;
 8000a86:	4b59      	ldr	r3, [pc, #356]	; (8000bec <main+0x2dc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
  motorstartinit();
 8000a8c:	f000 fe18 	bl	80016c0 <motorstartinit>

  // get ifb average offset level
  long0=1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
  long1=0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  while(long0<1025)
 8000a98:	e018      	b.n	8000acc <main+0x1bc>
    {
      ADC1->SQR3=0x00000000; // current sense adc channel
 8000a9a:	4b4f      	ldr	r3, [pc, #316]	; (8000bd8 <main+0x2c8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
      ADC1->CR2=0x00000001;  // start ADC conversion of bemf
 8000aa2:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <main+0x2c8>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	609a      	str	r2, [r3, #8]
      while((ADC1->SR & b1)==0) ; // wait for conversion to complete
 8000aaa:	bf00      	nop
 8000aac:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <main+0x2c8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0302 	and.w	r3, r3, #2
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f8      	beq.n	8000aac <main+0x19c>
      long1 = long1 + ADC1->DR;
 8000aba:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <main+0x2c8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
      long0++; // inc loop counter
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	617b      	str	r3, [r7, #20]
  while(long0<1025)
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ad2:	d9e2      	bls.n	8000a9a <main+0x18a>
    }
  ifboffset = long1>>10; // average = sum div by 1024
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	0a9b      	lsrs	r3, r3, #10
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	4b45      	ldr	r3, [pc, #276]	; (8000bf0 <main+0x2e0>)
 8000adc:	801a      	strh	r2, [r3, #0]

  NVIC_InitTypeDef NVIC_InitStructure;
  // enable tim1 CC interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM1_CC_IRQChannel;
 8000ade:	231b      	movs	r3, #27
 8000ae0:	703b      	strb	r3, [r7, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	707b      	strb	r3, [r7, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	70bb      	strb	r3, [r7, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000aea:	2301      	movs	r3, #1
 8000aec:	70fb      	strb	r3, [r7, #3]
  NVIC_Init(&NVIC_InitStructure);
 8000aee:	463b      	mov	r3, r7
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff fc3d 	bl	8000370 <NVIC_Init>

  // enable tim1 brk interrupt
  NVIC_InitStructure.NVIC_IRQChannel = TIM1_BRK_IRQChannel;
 8000af6:	2318      	movs	r3, #24
 8000af8:	703b      	strb	r3, [r7, #0]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	707b      	strb	r3, [r7, #1]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 8000afe:	2303      	movs	r3, #3
 8000b00:	70bb      	strb	r3, [r7, #2]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	70fb      	strb	r3, [r7, #3]
  NVIC_Init(&NVIC_InitStructure);
 8000b06:	463b      	mov	r3, r7
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fc31 	bl	8000370 <NVIC_Init>

  while (1) // main background loop
    {

      long0 = globalcounter - heartbeat1time;
 8000b0e:	4b33      	ldr	r3, [pc, #204]	; (8000bdc <main+0x2cc>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <main+0x2d0>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	617b      	str	r3, [r7, #20]
      if(long0>1)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d927      	bls.n	8000b70 <main+0x260>
	// ******************** 100 microsecond routine ************************
	{
	  heartbeat1time=globalcounter;
 8000b20:	4b2e      	ldr	r3, [pc, #184]	; (8000bdc <main+0x2cc>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a2e      	ldr	r2, [pc, #184]	; (8000be0 <main+0x2d0>)
 8000b26:	6013      	str	r3, [r2, #0]

	  // ***** state variable speed observer *****
	  slong0= position - (positionest>>12);// observer position error
 8000b28:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <main+0x2e4>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b32      	ldr	r3, [pc, #200]	; (8000bf8 <main+0x2e8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	0b1b      	lsrs	r3, r3, #12
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	60fb      	str	r3, [r7, #12]
	  speedest = slong0;  // store speed estimate
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <main+0x2ec>)
 8000b3c:	801a      	strh	r2, [r3, #0]
	  // integrate estimated speed into estimated position
	  positionest = positionest + speedest ;
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <main+0x2ec>)
 8000b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <main+0x2e8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a2a      	ldr	r2, [pc, #168]	; (8000bf8 <main+0x2e8>)
 8000b4e:	6013      	str	r3, [r2, #0]

	  // catch eventual rollover of positionest (and position) and prevent
	  if( positionest & 0x80000000 ) // if positionest is greater than half range
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <main+0x2e8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	da0b      	bge.n	8000b70 <main+0x260>
	    {
	      positionest= positionest & 0x7FFFFFFF; // subtract 0x80000000
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <main+0x2e8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000b60:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <main+0x2e8>)
 8000b62:	6013      	str	r3, [r2, #0]
	      position=position-524288; // subtract (0x80000000>>12)
 8000b64:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <main+0x2e4>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
 8000b6c:	4a21      	ldr	r2, [pc, #132]	; (8000bf4 <main+0x2e4>)
 8000b6e:	6013      	str	r3, [r2, #0]
	    }
	} // ***************** end of 100 usec routine **********************


      long0 = globalcounter - heartbeat2time;
 8000b70:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <main+0x2cc>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <main+0x2d4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
      if(long0>19)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	2b13      	cmp	r3, #19
 8000b80:	f240 813f 	bls.w	8000e02 <main+0x4f2>
	// ******************** 1 millisecond routine *************************
	{
	  heartbeat2time=globalcounter;
 8000b84:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <main+0x2cc>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a16      	ldr	r2, [pc, #88]	; (8000be4 <main+0x2d4>)
 8000b8a:	6013      	str	r3, [r2, #0]




	  // overload function
	  if((ifbave>overloadthreshold) && !overloadflag)
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <main+0x2f0>)
 8000b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b92:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000b96:	dd39      	ble.n	8000c0c <main+0x2fc>
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <main+0x2f4>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d135      	bne.n	8000c0c <main+0x2fc>
	    {
	      overloadcounter=overloadcounter+overloaduprate;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <main+0x2f8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	3364      	adds	r3, #100	; 0x64
 8000ba6:	4a18      	ldr	r2, [pc, #96]	; (8000c08 <main+0x2f8>)
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	e034      	b.n	8000c16 <main+0x306>
 8000bac:	000f423f 	.word	0x000f423f
 8000bb0:	20000058 	.word	0x20000058
 8000bb4:	20000060 	.word	0x20000060
 8000bb8:	02000040 	.word	0x02000040
 8000bbc:	20000070 	.word	0x20000070
 8000bc0:	34443bbb 	.word	0x34443bbb
 8000bc4:	b0444440 	.word	0xb0444440
 8000bc8:	20000098 	.word	0x20000098
 8000bcc:	44443444 	.word	0x44443444
 8000bd0:	434444bb 	.word	0x434444bb
 8000bd4:	20000054 	.word	0x20000054
 8000bd8:	2000009c 	.word	0x2000009c
 8000bdc:	20000108 	.word	0x20000108
 8000be0:	200000e8 	.word	0x200000e8
 8000be4:	200000ac 	.word	0x200000ac
 8000be8:	200000f8 	.word	0x200000f8
 8000bec:	20000104 	.word	0x20000104
 8000bf0:	200000d0 	.word	0x200000d0
 8000bf4:	200000b0 	.word	0x200000b0
 8000bf8:	20000120 	.word	0x20000120
 8000bfc:	20000126 	.word	0x20000126
 8000c00:	200000d8 	.word	0x200000d8
 8000c04:	2000010c 	.word	0x2000010c
 8000c08:	20000100 	.word	0x20000100
	    }
	  else overloadcounter=overloadcounter-overloaddownrate;
 8000c0c:	4b62      	ldr	r3, [pc, #392]	; (8000d98 <main+0x488>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	3b64      	subs	r3, #100	; 0x64
 8000c12:	4a61      	ldr	r2, [pc, #388]	; (8000d98 <main+0x488>)
 8000c14:	6013      	str	r3, [r2, #0]
	  if(overloadcounter<0) {overloadcounter=0; overloadflag=0; }
 8000c16:	4b60      	ldr	r3, [pc, #384]	; (8000d98 <main+0x488>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	da05      	bge.n	8000c2a <main+0x31a>
 8000c1e:	4b5e      	ldr	r3, [pc, #376]	; (8000d98 <main+0x488>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	4b5d      	ldr	r3, [pc, #372]	; (8000d9c <main+0x48c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
	  if(overloadcounter>1000000) overloadflag=255;
 8000c2a:	4b5b      	ldr	r3, [pc, #364]	; (8000d98 <main+0x488>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a5c      	ldr	r2, [pc, #368]	; (8000da0 <main+0x490>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	dd02      	ble.n	8000c3a <main+0x32a>
 8000c34:	4b59      	ldr	r3, [pc, #356]	; (8000d9c <main+0x48c>)
 8000c36:	22ff      	movs	r2, #255	; 0xff
 8000c38:	701a      	strb	r2, [r3, #0]

	  if((ifb>overloadsetpoint) && overloadflag)
 8000c3a:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <main+0x494>)
 8000c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000c44:	dd0a      	ble.n	8000c5c <main+0x34c>
 8000c46:	4b55      	ldr	r3, [pc, #340]	; (8000d9c <main+0x48c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d006      	beq.n	8000c5c <main+0x34c>
	    {
	      overloaddclimit = overloaddclimit-3;
 8000c4e:	4b56      	ldr	r3, [pc, #344]	; (8000da8 <main+0x498>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	3b03      	subs	r3, #3
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b54      	ldr	r3, [pc, #336]	; (8000da8 <main+0x498>)
 8000c58:	801a      	strh	r2, [r3, #0]
 8000c5a:	e005      	b.n	8000c68 <main+0x358>
	    }
	  else
	    {
	      overloaddclimit = overloaddclimit+1;
 8000c5c:	4b52      	ldr	r3, [pc, #328]	; (8000da8 <main+0x498>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	3301      	adds	r3, #1
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	4b50      	ldr	r3, [pc, #320]	; (8000da8 <main+0x498>)
 8000c66:	801a      	strh	r2, [r3, #0]
	    }

	  if(overloaddclimit>1000) overloaddclimit=1000;
 8000c68:	4b4f      	ldr	r3, [pc, #316]	; (8000da8 <main+0x498>)
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c70:	d903      	bls.n	8000c7a <main+0x36a>
 8000c72:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <main+0x498>)
 8000c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c78:	801a      	strh	r2, [r3, #0]
	  if(overloaddclimit<100) overloaddclimit=100;
 8000c7a:	4b4b      	ldr	r3, [pc, #300]	; (8000da8 <main+0x498>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	2b63      	cmp	r3, #99	; 0x63
 8000c80:	d802      	bhi.n	8000c88 <main+0x378>
 8000c82:	4b49      	ldr	r3, [pc, #292]	; (8000da8 <main+0x498>)
 8000c84:	2264      	movs	r2, #100	; 0x64
 8000c86:	801a      	strh	r2, [r3, #0]


	  // calculate rpm from speedest
	  long0 = (speedest*6250)>>8;
 8000c88:	4b48      	ldr	r3, [pc, #288]	; (8000dac <main+0x49c>)
 8000c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	f641 036a 	movw	r3, #6250	; 0x186a
 8000c94:	fb03 f302 	mul.w	r3, r3, r2
 8000c98:	121b      	asrs	r3, r3, #8
 8000c9a:	617b      	str	r3, [r7, #20]
	  rpm = long0/polepairs;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	4a44      	ldr	r2, [pc, #272]	; (8000db0 <main+0x4a0>)
 8000ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca4:	089b      	lsrs	r3, r3, #2
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <main+0x4a4>)
 8000caa:	801a      	strh	r2, [r3, #0]


	  // *************** speed regulator  *********************************
	  slong0 = rpmref - rpm;  // speed error
 8000cac:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <main+0x4a8>)
 8000cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	4b3f      	ldr	r3, [pc, #252]	; (8000db4 <main+0x4a4>)
 8000cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	60fb      	str	r3, [r7, #12]
	  propterm = (slong0*propgain)>>8;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	029b      	lsls	r3, r3, #10
 8000cc2:	121b      	asrs	r3, r3, #8
 8000cc4:	60bb      	str	r3, [r7, #8]
	  errorint = errorint + slong0;
 8000cc6:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <main+0x4ac>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a3b      	ldr	r2, [pc, #236]	; (8000dbc <main+0x4ac>)
 8000cd0:	6013      	str	r3, [r2, #0]
	  // set activedc to the lower of maxdc or overloaddclimit
	  if(maxdc<overloaddclimit) activedclimit=maxdc;
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <main+0x4b0>)
 8000cd4:	881a      	ldrh	r2, [r3, #0]
 8000cd6:	4b34      	ldr	r3, [pc, #208]	; (8000da8 <main+0x498>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d204      	bcs.n	8000ce8 <main+0x3d8>
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <main+0x4b0>)
 8000ce0:	881a      	ldrh	r2, [r3, #0]
 8000ce2:	4b38      	ldr	r3, [pc, #224]	; (8000dc4 <main+0x4b4>)
 8000ce4:	801a      	strh	r2, [r3, #0]
 8000ce6:	e003      	b.n	8000cf0 <main+0x3e0>
	  else activedclimit = overloaddclimit;
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <main+0x498>)
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <main+0x4b4>)
 8000cee:	801a      	strh	r2, [r3, #0]

	  slong0 = activedclimit - propterm;
 8000cf0:	4b34      	ldr	r3, [pc, #208]	; (8000dc4 <main+0x4b4>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	60fb      	str	r3, [r7, #12]
	  if(slong0<0) slong0=0; // slong0 holds maximum allowable intterm
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	da01      	bge.n	8000d06 <main+0x3f6>
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]

	  slong0 = slong0 * intclampscaler; // slong0 holds max error integral
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	60fb      	str	r3, [r7, #12]
	  if(errorint>slong0) errorint=slong0;
 8000d0c:	4b2b      	ldr	r3, [pc, #172]	; (8000dbc <main+0x4ac>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	68fa      	ldr	r2, [r7, #12]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	da02      	bge.n	8000d1c <main+0x40c>
 8000d16:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <main+0x4ac>)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6013      	str	r3, [r2, #0]
	  if(errorint<0) errorint=0;
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <main+0x4ac>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	da02      	bge.n	8000d2a <main+0x41a>
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <main+0x4ac>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]

	  intterm = (errorint*intgain)>>10;
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <main+0x4ac>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	129b      	asrs	r3, r3, #10
 8000d32:	607b      	str	r3, [r7, #4]

	  slong0 = propterm + intterm;
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]

	  if(slong0>activedclimit) slong0=activedclimit;
 8000d3c:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <main+0x4b4>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	dd02      	ble.n	8000d4e <main+0x43e>
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <main+0x4b4>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	60fb      	str	r3, [r7, #12]
	  if(slong0<100) slong0=100;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2b63      	cmp	r3, #99	; 0x63
 8000d52:	dc01      	bgt.n	8000d58 <main+0x448>
 8000d54:	2364      	movs	r3, #100	; 0x64
 8000d56:	60fb      	str	r3, [r7, #12]

	  if( (zcfound) && (transitioncounter<100)) transitioncounter++;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	; (8000dc8 <main+0x4b8>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d008      	beq.n	8000d72 <main+0x462>
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <main+0x4bc>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b63      	cmp	r3, #99	; 0x63
 8000d66:	d804      	bhi.n	8000d72 <main+0x462>
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <main+0x4bc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <main+0x4bc>)
 8000d70:	6013      	str	r3, [r2, #0]
	  if(transitioncounter<100)
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <main+0x4bc>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b63      	cmp	r3, #99	; 0x63
 8000d78:	d82c      	bhi.n	8000dd4 <main+0x4c4>
	    {
	      runningdc=500;
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <main+0x4c0>)
 8000d7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d80:	801a      	strh	r2, [r3, #0]
	      errorint = 500 * intclampscaler;
 8000d82:	4b0e      	ldr	r3, [pc, #56]	; (8000dbc <main+0x4ac>)
 8000d84:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000d88:	601a      	str	r2, [r3, #0]
	      rpmref = rpm;
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <main+0x4a4>)
 8000d8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d90:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <main+0x4a8>)
 8000d92:	801a      	strh	r2, [r3, #0]
 8000d94:	e022      	b.n	8000ddc <main+0x4cc>
 8000d96:	bf00      	nop
 8000d98:	20000100 	.word	0x20000100
 8000d9c:	2000010c 	.word	0x2000010c
 8000da0:	000f4240 	.word	0x000f4240
 8000da4:	200000ee 	.word	0x200000ee
 8000da8:	200000d6 	.word	0x200000d6
 8000dac:	20000126 	.word	0x20000126
 8000db0:	cccccccd 	.word	0xcccccccd
 8000db4:	200000e4 	.word	0x200000e4
 8000db8:	200000ba 	.word	0x200000ba
 8000dbc:	200000dc 	.word	0x200000dc
 8000dc0:	200000f0 	.word	0x200000f0
 8000dc4:	200000f4 	.word	0x200000f4
 8000dc8:	200000cf 	.word	0x200000cf
 8000dcc:	200000e0 	.word	0x200000e0
 8000dd0:	200000da 	.word	0x200000da
	    }
	  else
	    {
	      runningdc=slong0;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b9c      	ldr	r3, [pc, #624]	; (800104c <main+0x73c>)
 8000dda:	801a      	strh	r2, [r3, #0]
	    }

	  if(zcfound)
 8000ddc:	4b9c      	ldr	r3, [pc, #624]	; (8001050 <main+0x740>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00e      	beq.n	8000e02 <main+0x4f2>
	    {
	      TIM1->CCR1= runningdc;
 8000de4:	4b9b      	ldr	r3, [pc, #620]	; (8001054 <main+0x744>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a98      	ldr	r2, [pc, #608]	; (800104c <main+0x73c>)
 8000dea:	8812      	ldrh	r2, [r2, #0]
 8000dec:	869a      	strh	r2, [r3, #52]	; 0x34
	      TIM1->CCR2= runningdc;
 8000dee:	4b99      	ldr	r3, [pc, #612]	; (8001054 <main+0x744>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a96      	ldr	r2, [pc, #600]	; (800104c <main+0x73c>)
 8000df4:	8812      	ldrh	r2, [r2, #0]
 8000df6:	871a      	strh	r2, [r3, #56]	; 0x38
	      TIM1->CCR3= runningdc;
 8000df8:	4b96      	ldr	r3, [pc, #600]	; (8001054 <main+0x744>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a93      	ldr	r2, [pc, #588]	; (800104c <main+0x73c>)
 8000dfe:	8812      	ldrh	r2, [r2, #0]
 8000e00:	879a      	strh	r2, [r3, #60]	; 0x3c
	} // ************** end of 1 millisecond routine *************************




      long0 = globalcounter - heartbeat3time;
 8000e02:	4b95      	ldr	r3, [pc, #596]	; (8001058 <main+0x748>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b95      	ldr	r3, [pc, #596]	; (800105c <main+0x74c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
      if(long0>199)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2bc7      	cmp	r3, #199	; 0xc7
 8000e12:	d94e      	bls.n	8000eb2 <main+0x5a2>
	{
	  // ******************** 10 millisecond routine *************************

	  heartbeat3time=globalcounter;
 8000e14:	4b90      	ldr	r3, [pc, #576]	; (8001058 <main+0x748>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a90      	ldr	r2, [pc, #576]	; (800105c <main+0x74c>)
 8000e1a:	6013      	str	r3, [r2, #0]

	  potvalue = 4095 - adcread(2);  // read pot channel
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f000 f933 	bl	8001088 <adcread>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8000e28:	330f      	adds	r3, #15
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b8c      	ldr	r3, [pc, #560]	; (8001060 <main+0x750>)
 8000e2e:	801a      	strh	r2, [r3, #0]

	  //sk: next line
	  potvalue = 2024;
 8000e30:	4b8b      	ldr	r3, [pc, #556]	; (8001060 <main+0x750>)
 8000e32:	f44f 62fd 	mov.w	r2, #2024	; 0x7e8
 8000e36:	801a      	strh	r2, [r3, #0]

	  if(potvalue>200) run=255;
 8000e38:	4b89      	ldr	r3, [pc, #548]	; (8001060 <main+0x750>)
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	2bc8      	cmp	r3, #200	; 0xc8
 8000e3e:	d902      	bls.n	8000e46 <main+0x536>
 8000e40:	4b88      	ldr	r3, [pc, #544]	; (8001064 <main+0x754>)
 8000e42:	22ff      	movs	r2, #255	; 0xff
 8000e44:	701a      	strb	r2, [r3, #0]
	  if(potvalue<100) run=0;
 8000e46:	4b86      	ldr	r3, [pc, #536]	; (8001060 <main+0x750>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	2b63      	cmp	r3, #99	; 0x63
 8000e4c:	d802      	bhi.n	8000e54 <main+0x544>
 8000e4e:	4b85      	ldr	r3, [pc, #532]	; (8001064 <main+0x754>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
	  rpmcmd = potvalue>>2;
 8000e54:	4b82      	ldr	r3, [pc, #520]	; (8001060 <main+0x750>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	4b82      	ldr	r3, [pc, #520]	; (8001068 <main+0x758>)
 8000e60:	801a      	strh	r2, [r3, #0]
	  if(rpmcmd<100) rpmcmd=100;
 8000e62:	4b81      	ldr	r3, [pc, #516]	; (8001068 <main+0x758>)
 8000e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e68:	2b63      	cmp	r3, #99	; 0x63
 8000e6a:	dc02      	bgt.n	8000e72 <main+0x562>
 8000e6c:	4b7e      	ldr	r3, [pc, #504]	; (8001068 <main+0x758>)
 8000e6e:	2264      	movs	r2, #100	; 0x64
 8000e70:	801a      	strh	r2, [r3, #0]


	  // accel/decel control
	  slong0 = rpmcmd-rpmref;
 8000e72:	4b7d      	ldr	r3, [pc, #500]	; (8001068 <main+0x758>)
 8000e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b7c      	ldr	r3, [pc, #496]	; (800106c <main+0x75c>)
 8000e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	60fb      	str	r3, [r7, #12]
	  if(slong0>acclim) slong0=acclim;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2b05      	cmp	r3, #5
 8000e88:	dd01      	ble.n	8000e8e <main+0x57e>
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	60fb      	str	r3, [r7, #12]
	  if(slong0<-declim) slong0=-declim;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f113 0f05 	cmn.w	r3, #5
 8000e94:	da02      	bge.n	8000e9c <main+0x58c>
 8000e96:	f06f 0304 	mvn.w	r3, #4
 8000e9a:	60fb      	str	r3, [r7, #12]
	  rpmref = rpmref + slong0;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	4b72      	ldr	r3, [pc, #456]	; (800106c <main+0x75c>)
 8000ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	b21a      	sxth	r2, r3
 8000eae:	4b6f      	ldr	r3, [pc, #444]	; (800106c <main+0x75c>)
 8000eb0:	801a      	strh	r2, [r3, #0]




      // background code that runs with every loop
      if(overcurrent) flashcount=2;
 8000eb2:	4b6f      	ldr	r3, [pc, #444]	; (8001070 <main+0x760>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d002      	beq.n	8000ec0 <main+0x5b0>
 8000eba:	4b6e      	ldr	r3, [pc, #440]	; (8001074 <main+0x764>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	701a      	strb	r2, [r3, #0]

      switch(ledstate)
 8000ec0:	4b6d      	ldr	r3, [pc, #436]	; (8001078 <main+0x768>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b28      	cmp	r3, #40	; 0x28
 8000ec6:	f63f ae22 	bhi.w	8000b0e <main+0x1fe>
 8000eca:	a201      	add	r2, pc, #4	; (adr r2, 8000ed0 <main+0x5c0>)
 8000ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed0:	08000f75 	.word	0x08000f75
 8000ed4:	08000b0f 	.word	0x08000b0f
 8000ed8:	08000b0f 	.word	0x08000b0f
 8000edc:	08000b0f 	.word	0x08000b0f
 8000ee0:	08000b0f 	.word	0x08000b0f
 8000ee4:	08000b0f 	.word	0x08000b0f
 8000ee8:	08000b0f 	.word	0x08000b0f
 8000eec:	08000b0f 	.word	0x08000b0f
 8000ef0:	08000b0f 	.word	0x08000b0f
 8000ef4:	08000b0f 	.word	0x08000b0f
 8000ef8:	08000fad 	.word	0x08000fad
 8000efc:	08000b0f 	.word	0x08000b0f
 8000f00:	08000b0f 	.word	0x08000b0f
 8000f04:	08000b0f 	.word	0x08000b0f
 8000f08:	08000b0f 	.word	0x08000b0f
 8000f0c:	08000b0f 	.word	0x08000b0f
 8000f10:	08000b0f 	.word	0x08000b0f
 8000f14:	08000b0f 	.word	0x08000b0f
 8000f18:	08000b0f 	.word	0x08000b0f
 8000f1c:	08000b0f 	.word	0x08000b0f
 8000f20:	08000fc7 	.word	0x08000fc7
 8000f24:	08000b0f 	.word	0x08000b0f
 8000f28:	08000b0f 	.word	0x08000b0f
 8000f2c:	08000b0f 	.word	0x08000b0f
 8000f30:	08000b0f 	.word	0x08000b0f
 8000f34:	08000b0f 	.word	0x08000b0f
 8000f38:	08000b0f 	.word	0x08000b0f
 8000f3c:	08000b0f 	.word	0x08000b0f
 8000f40:	08000b0f 	.word	0x08000b0f
 8000f44:	08000b0f 	.word	0x08000b0f
 8000f48:	08000fe5 	.word	0x08000fe5
 8000f4c:	08000b0f 	.word	0x08000b0f
 8000f50:	08000b0f 	.word	0x08000b0f
 8000f54:	08000b0f 	.word	0x08000b0f
 8000f58:	08000b0f 	.word	0x08000b0f
 8000f5c:	08000b0f 	.word	0x08000b0f
 8000f60:	08000b0f 	.word	0x08000b0f
 8000f64:	08000b0f 	.word	0x08000b0f
 8000f68:	08000b0f 	.word	0x08000b0f
 8000f6c:	08000b0f 	.word	0x08000b0f
 8000f70:	0800100d 	.word	0x0800100d
      {
	case 0:
	  if(flashcount==0){ledon; break;}// led on and break
 8000f74:	4b3f      	ldr	r3, [pc, #252]	; (8001074 <main+0x764>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d108      	bne.n	8000f8e <main+0x67e>
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	; (800107c <main+0x76c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <main+0x76c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f8a:	60da      	str	r2, [r3, #12]
 8000f8c:	e05c      	b.n	8001048 <main+0x738>
	  ledoff;
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <main+0x76c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	4b39      	ldr	r3, [pc, #228]	; (800107c <main+0x76c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f9c:	60da      	str	r2, [r3, #12]
	  ledtime=0;
 8000f9e:	4b38      	ldr	r3, [pc, #224]	; (8001080 <main+0x770>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
	  ledstate=10;
 8000fa4:	4b34      	ldr	r3, [pc, #208]	; (8001078 <main+0x768>)
 8000fa6:	220a      	movs	r2, #10
 8000fa8:	701a      	strb	r2, [r3, #0]
	  break;
 8000faa:	e04d      	b.n	8001048 <main+0x738>

	case 10:  // waiting out long pause
	  if((ledtime)<30000) break;
 8000fac:	4b34      	ldr	r3, [pc, #208]	; (8001080 <main+0x770>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f247 522f 	movw	r2, #29999	; 0x752f
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d942      	bls.n	800103e <main+0x72e>
	  ledstate=20;
 8000fb8:	4b2f      	ldr	r3, [pc, #188]	; (8001078 <main+0x768>)
 8000fba:	2214      	movs	r2, #20
 8000fbc:	701a      	strb	r2, [r3, #0]
	  flashcounter=0;
 8000fbe:	4b31      	ldr	r3, [pc, #196]	; (8001084 <main+0x774>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
	  break;
 8000fc4:	e040      	b.n	8001048 <main+0x738>

	case 20: // long pause over
	  ledon;
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <main+0x76c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <main+0x76c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fd4:	60da      	str	r2, [r3, #12]
	  ledtime=0;
 8000fd6:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <main+0x770>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
	  ledstate=30;
 8000fdc:	4b26      	ldr	r3, [pc, #152]	; (8001078 <main+0x768>)
 8000fde:	221e      	movs	r2, #30
 8000fe0:	701a      	strb	r2, [r3, #0]
	  break;
 8000fe2:	e031      	b.n	8001048 <main+0x738>

	case 30: // waiting out short on time
	  if(ledtime<8000) break;
 8000fe4:	4b26      	ldr	r3, [pc, #152]	; (8001080 <main+0x770>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000fec:	d329      	bcc.n	8001042 <main+0x732>
	  ledoff;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <main+0x76c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68da      	ldr	r2, [r3, #12]
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <main+0x76c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ffc:	60da      	str	r2, [r3, #12]
	  ledtime=0;
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <main+0x770>)
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
	  ledstate=40;
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <main+0x768>)
 8001006:	2228      	movs	r2, #40	; 0x28
 8001008:	701a      	strb	r2, [r3, #0]
	  break;
 800100a:	e01d      	b.n	8001048 <main+0x738>

	case 40: // waiting out short off time
	  if(ledtime<8000) break;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <main+0x770>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001014:	d317      	bcc.n	8001046 <main+0x736>
	  flashcounter++;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <main+0x774>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <main+0x774>)
 8001020:	701a      	strb	r2, [r3, #0]
	  if(flashcounter>=flashcount) {ledstate=0; break;}
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <main+0x774>)
 8001024:	781a      	ldrb	r2, [r3, #0]
 8001026:	4b13      	ldr	r3, [pc, #76]	; (8001074 <main+0x764>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	d303      	bcc.n	8001036 <main+0x726>
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <main+0x768>)
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]
 8001034:	e008      	b.n	8001048 <main+0x738>
	  ledstate=20;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <main+0x768>)
 8001038:	2214      	movs	r2, #20
 800103a:	701a      	strb	r2, [r3, #0]
	  break;
 800103c:	e004      	b.n	8001048 <main+0x738>
	  if((ledtime)<30000) break;
 800103e:	bf00      	nop
 8001040:	e565      	b.n	8000b0e <main+0x1fe>
	  if(ledtime<8000) break;
 8001042:	bf00      	nop
 8001044:	e563      	b.n	8000b0e <main+0x1fe>
	  if(ledtime<8000) break;
 8001046:	bf00      	nop
      long0 = globalcounter - heartbeat1time;
 8001048:	e561      	b.n	8000b0e <main+0x1fe>
 800104a:	bf00      	nop
 800104c:	200000da 	.word	0x200000da
 8001050:	200000cf 	.word	0x200000cf
 8001054:	20000054 	.word	0x20000054
 8001058:	20000108 	.word	0x20000108
 800105c:	200000f8 	.word	0x200000f8
 8001060:	200000c4 	.word	0x200000c4
 8001064:	20000104 	.word	0x20000104
 8001068:	200000cc 	.word	0x200000cc
 800106c:	200000ba 	.word	0x200000ba
 8001070:	20000118 	.word	0x20000118
 8001074:	200000fc 	.word	0x200000fc
 8001078:	200000a8 	.word	0x200000a8
 800107c:	20000070 	.word	0x20000070
 8001080:	200000c0 	.word	0x200000c0
 8001084:	20000124 	.word	0x20000124

08001088 <adcread>:
} // end of main



unsigned short adcread( unsigned char chnl)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  unsigned short result;

  ADC1->SQR3=chnl; // set adc channel
 8001092:	4b33      	ldr	r3, [pc, #204]	; (8001160 <adcread+0xd8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	635a      	str	r2, [r3, #52]	; 0x34
  ADC1->CR2=1;  // start ADC conversion of bemf
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <adcread+0xd8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2201      	movs	r2, #1
 80010a0:	609a      	str	r2, [r3, #8]
  while((ADC1->SR & b1)==0) if(ADC1->SQR3!=chnl) break; // wait for conversion to complete
 80010a2:	e005      	b.n	80010b0 <adcread+0x28>
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <adcread+0xd8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d107      	bne.n	80010c0 <adcread+0x38>
 80010b0:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <adcread+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d0f2      	beq.n	80010a4 <adcread+0x1c>
 80010be:	e000      	b.n	80010c2 <adcread+0x3a>
 80010c0:	bf00      	nop
  result= ADC1->DR;
 80010c2:	4b27      	ldr	r3, [pc, #156]	; (8001160 <adcread+0xd8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c8:	81fb      	strh	r3, [r7, #14]

  if(ADC1->SQR3!=chnl) // read again if conversion was interrupted by foreground
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <adcread+0xd8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d01b      	beq.n	800110e <adcread+0x86>
    {
      ADC1->SQR3=chnl; // set adc channel
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <adcread+0xd8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
      ADC1->CR2=1;  // start ADC conversion of bemf
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <adcread+0xd8>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2201      	movs	r2, #1
 80010e4:	609a      	str	r2, [r3, #8]
      while((ADC1->SR & b1)==0) if(ADC1->SQR3!=chnl) break; // wait for conversion to complete
 80010e6:	e005      	b.n	80010f4 <adcread+0x6c>
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <adcread+0xd8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d107      	bne.n	8001104 <adcread+0x7c>
 80010f4:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <adcread+0xd8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d0f2      	beq.n	80010e8 <adcread+0x60>
 8001102:	e000      	b.n	8001106 <adcread+0x7e>
 8001104:	bf00      	nop
      result= ADC1->DR;
 8001106:	4b16      	ldr	r3, [pc, #88]	; (8001160 <adcread+0xd8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110c:	81fb      	strh	r3, [r7, #14]
    }

  if(ADC1->SQR3!=chnl) // must check third time
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <adcread+0xd8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	429a      	cmp	r2, r3
 8001118:	d01b      	beq.n	8001152 <adcread+0xca>
    {
      ADC1->SQR3=chnl; // set adc channel
 800111a:	4b11      	ldr	r3, [pc, #68]	; (8001160 <adcread+0xd8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	79fa      	ldrb	r2, [r7, #7]
 8001120:	635a      	str	r2, [r3, #52]	; 0x34
      ADC1->CR2=1;  // start ADC conversion of bemf
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <adcread+0xd8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2201      	movs	r2, #1
 8001128:	609a      	str	r2, [r3, #8]
      while((ADC1->SR & b1)==0) if(ADC1->SQR3!=chnl) break; // wait for conversion to complete
 800112a:	e005      	b.n	8001138 <adcread+0xb0>
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <adcread+0xd8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	429a      	cmp	r2, r3
 8001136:	d107      	bne.n	8001148 <adcread+0xc0>
 8001138:	4b09      	ldr	r3, [pc, #36]	; (8001160 <adcread+0xd8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f2      	beq.n	800112c <adcread+0xa4>
 8001146:	e000      	b.n	800114a <adcread+0xc2>
 8001148:	bf00      	nop
      result= ADC1->DR;
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <adcread+0xd8>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	81fb      	strh	r3, [r7, #14]
    }
  return result;
 8001152:	89fb      	ldrh	r3, [r7, #14]
} // end of adcread function
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	2000009c 	.word	0x2000009c

08001164 <PWMISR>:


// interrupt service routine run just at the end of each PWM cycle
void PWMISR(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0

  unsigned long long0;

  ADC1->SQR3=bemfchannel;
 800116a:	4b9b      	ldr	r3, [pc, #620]	; (80013d8 <PWMISR+0x274>)
 800116c:	781a      	ldrb	r2, [r3, #0]
 800116e:	4b9b      	ldr	r3, [pc, #620]	; (80013dc <PWMISR+0x278>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
  ADC1->CR2=0x00000001;  // start ADC conversion of bemf
 8001174:	4b99      	ldr	r3, [pc, #612]	; (80013dc <PWMISR+0x278>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2201      	movs	r2, #1
 800117a:	609a      	str	r2, [r3, #8]
  zccounter++;  // housekeeping increment of some timers while adc is converting
 800117c:	4b98      	ldr	r3, [pc, #608]	; (80013e0 <PWMISR+0x27c>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	b29a      	uxth	r2, r3
 8001184:	4b96      	ldr	r3, [pc, #600]	; (80013e0 <PWMISR+0x27c>)
 8001186:	801a      	strh	r2, [r3, #0]
  alignmentcounter++;
 8001188:	4b96      	ldr	r3, [pc, #600]	; (80013e4 <PWMISR+0x280>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3301      	adds	r3, #1
 800118e:	4a95      	ldr	r2, [pc, #596]	; (80013e4 <PWMISR+0x280>)
 8001190:	6013      	str	r3, [r2, #0]
  holdcounter++;
 8001192:	4b95      	ldr	r3, [pc, #596]	; (80013e8 <PWMISR+0x284>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a93      	ldr	r2, [pc, #588]	; (80013e8 <PWMISR+0x284>)
 800119a:	6013      	str	r3, [r2, #0]
  ledtime++;
 800119c:	4b93      	ldr	r3, [pc, #588]	; (80013ec <PWMISR+0x288>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a92      	ldr	r2, [pc, #584]	; (80013ec <PWMISR+0x288>)
 80011a4:	6013      	str	r3, [r2, #0]
  while((ADC1->SR & b1)==0) ; // wait for conversion to complete
 80011a6:	bf00      	nop
 80011a8:	4b8c      	ldr	r3, [pc, #560]	; (80013dc <PWMISR+0x278>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f8      	beq.n	80011a8 <PWMISR+0x44>
  bemfsample= ADC1->DR;
 80011b6:	4b89      	ldr	r3, [pc, #548]	; (80013dc <PWMISR+0x278>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	b29a      	uxth	r2, r3
 80011be:	4b8c      	ldr	r3, [pc, #560]	; (80013f0 <PWMISR+0x28c>)
 80011c0:	801a      	strh	r2, [r3, #0]

  // sk DAC->DHR12R2 = bemfsample;
  // sk DAC->SWTRIGR=0x00000003;


  if(autostep)
 80011c2:	4b8c      	ldr	r3, [pc, #560]	; (80013f4 <PWMISR+0x290>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d029      	beq.n	800121e <PWMISR+0xba>
    {
      commcounter++;
 80011ca:	4b8b      	ldr	r3, [pc, #556]	; (80013f8 <PWMISR+0x294>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	b29a      	uxth	r2, r3
 80011d2:	4b89      	ldr	r3, [pc, #548]	; (80013f8 <PWMISR+0x294>)
 80011d4:	801a      	strh	r2, [r3, #0]
      if(commcounter>step)
 80011d6:	4b88      	ldr	r3, [pc, #544]	; (80013f8 <PWMISR+0x294>)
 80011d8:	881a      	ldrh	r2, [r3, #0]
 80011da:	4b88      	ldr	r3, [pc, #544]	; (80013fc <PWMISR+0x298>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d91d      	bls.n	800121e <PWMISR+0xba>
	{
	  commcounter=0;
 80011e2:	4b85      	ldr	r3, [pc, #532]	; (80013f8 <PWMISR+0x294>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	801a      	strh	r2, [r3, #0]
	  phase++;
 80011e8:	4b85      	ldr	r3, [pc, #532]	; (8001400 <PWMISR+0x29c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b83      	ldr	r3, [pc, #524]	; (8001400 <PWMISR+0x29c>)
 80011f2:	701a      	strb	r2, [r3, #0]
	  position++;
 80011f4:	4b83      	ldr	r3, [pc, #524]	; (8001404 <PWMISR+0x2a0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a82      	ldr	r2, [pc, #520]	; (8001404 <PWMISR+0x2a0>)
 80011fc:	6013      	str	r3, [r2, #0]
	  if(phase>5) phase=0;
 80011fe:	4b80      	ldr	r3, [pc, #512]	; (8001400 <PWMISR+0x29c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b05      	cmp	r3, #5
 8001204:	d902      	bls.n	800120c <PWMISR+0xa8>
 8001206:	4b7e      	ldr	r3, [pc, #504]	; (8001400 <PWMISR+0x29c>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
	  TIM1->CCER = ccermask[phase]; // commutate bridge from table
 800120c:	4b7c      	ldr	r3, [pc, #496]	; (8001400 <PWMISR+0x29c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	4b7d      	ldr	r3, [pc, #500]	; (8001408 <PWMISR+0x2a4>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a7d      	ldr	r2, [pc, #500]	; (800140c <PWMISR+0x2a8>)
 8001218:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800121c:	841a      	strh	r2, [r3, #32]

	}
    } // end of if(autostep)


  if(run==0) startstate=0;
 800121e:	4b7c      	ldr	r3, [pc, #496]	; (8001410 <PWMISR+0x2ac>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <PWMISR+0xc8>
 8001226:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <PWMISR+0x2b0>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]

  switch(startstate)
 800122c:	4b79      	ldr	r3, [pc, #484]	; (8001414 <PWMISR+0x2b0>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b64      	cmp	r3, #100	; 0x64
 8001232:	f000 809a 	beq.w	800136a <PWMISR+0x206>
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	dc0b      	bgt.n	8001252 <PWMISR+0xee>
 800123a:	2b05      	cmp	r3, #5
 800123c:	d02c      	beq.n	8001298 <PWMISR+0x134>
 800123e:	2b05      	cmp	r3, #5
 8001240:	dc02      	bgt.n	8001248 <PWMISR+0xe4>
 8001242:	2b00      	cmp	r3, #0
 8001244:	d018      	beq.n	8001278 <PWMISR+0x114>
 8001246:	e1a3      	b.n	8001590 <PWMISR+0x42c>
 8001248:	2b0a      	cmp	r3, #10
 800124a:	d044      	beq.n	80012d6 <PWMISR+0x172>
 800124c:	2b14      	cmp	r3, #20
 800124e:	d065      	beq.n	800131c <PWMISR+0x1b8>
 8001250:	e19e      	b.n	8001590 <PWMISR+0x42c>
 8001252:	2b82      	cmp	r3, #130	; 0x82
 8001254:	f000 80af 	beq.w	80013b6 <PWMISR+0x252>
 8001258:	2b82      	cmp	r3, #130	; 0x82
 800125a:	dc06      	bgt.n	800126a <PWMISR+0x106>
 800125c:	2b6e      	cmp	r3, #110	; 0x6e
 800125e:	f000 808e 	beq.w	800137e <PWMISR+0x21a>
 8001262:	2b78      	cmp	r3, #120	; 0x78
 8001264:	f000 8094 	beq.w	8001390 <PWMISR+0x22c>
 8001268:	e192      	b.n	8001590 <PWMISR+0x42c>
 800126a:	2b8c      	cmp	r3, #140	; 0x8c
 800126c:	f000 80dc 	beq.w	8001428 <PWMISR+0x2c4>
 8001270:	2b96      	cmp	r3, #150	; 0x96
 8001272:	f000 8132 	beq.w	80014da <PWMISR+0x376>
 8001276:	e18b      	b.n	8001590 <PWMISR+0x42c>
  {
    case 0:
      TIM1->CCER = alloff;
 8001278:	4b63      	ldr	r3, [pc, #396]	; (8001408 <PWMISR+0x2a4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f643 0288 	movw	r2, #14472	; 0x3888
 8001280:	841a      	strh	r2, [r3, #32]
      if(run)
 8001282:	4b63      	ldr	r3, [pc, #396]	; (8001410 <PWMISR+0x2ac>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8171 	beq.w	800156e <PWMISR+0x40a>
	{
	  motorstartinit();
 800128c:	f000 fa18 	bl	80016c0 <motorstartinit>
	  startstate=5;
 8001290:	4b60      	ldr	r3, [pc, #384]	; (8001414 <PWMISR+0x2b0>)
 8001292:	2205      	movs	r2, #5
 8001294:	701a      	strb	r2, [r3, #0]
	}
      break;
 8001296:	e16a      	b.n	800156e <PWMISR+0x40a>

    case 5: // setup alignment
      TIM1->CCR1= alignmentdc;
 8001298:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <PWMISR+0x2a4>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2264      	movs	r2, #100	; 0x64
 800129e:	869a      	strh	r2, [r3, #52]	; 0x34
      TIM1->CCR2= alignmentdc;
 80012a0:	4b59      	ldr	r3, [pc, #356]	; (8001408 <PWMISR+0x2a4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2264      	movs	r2, #100	; 0x64
 80012a6:	871a      	strh	r2, [r3, #56]	; 0x38
      TIM1->CCR3= alignmentdc;
 80012a8:	4b57      	ldr	r3, [pc, #348]	; (8001408 <PWMISR+0x2a4>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2264      	movs	r2, #100	; 0x64
 80012ae:	879a      	strh	r2, [r3, #60]	; 0x3c
      phase=0;
 80012b0:	4b53      	ldr	r3, [pc, #332]	; (8001400 <PWMISR+0x29c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
      TIM1->CCER = ccermask[phase]; // commutate bridge from table
 80012b6:	4b52      	ldr	r3, [pc, #328]	; (8001400 <PWMISR+0x29c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4b52      	ldr	r3, [pc, #328]	; (8001408 <PWMISR+0x2a4>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a52      	ldr	r2, [pc, #328]	; (800140c <PWMISR+0x2a8>)
 80012c2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80012c6:	841a      	strh	r2, [r3, #32]
      alignmentcounter=0;
 80012c8:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <PWMISR+0x280>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
      startstate=10;
 80012ce:	4b51      	ldr	r3, [pc, #324]	; (8001414 <PWMISR+0x2b0>)
 80012d0:	220a      	movs	r2, #10
 80012d2:	701a      	strb	r2, [r3, #0]
      break;
 80012d4:	e15c      	b.n	8001590 <PWMISR+0x42c>

    case 10: // timing out alignment
      if(alignmentcounter>alignmenttime)
 80012d6:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <PWMISR+0x280>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f242 7210 	movw	r2, #10000	; 0x2710
 80012de:	4293      	cmp	r3, r2
 80012e0:	f240 8147 	bls.w	8001572 <PWMISR+0x40e>
	{
	  rampspeed=1;
 80012e4:	4b4c      	ldr	r3, [pc, #304]	; (8001418 <PWMISR+0x2b4>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
	  commcounter=0;
 80012ea:	4b43      	ldr	r3, [pc, #268]	; (80013f8 <PWMISR+0x294>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	801a      	strh	r2, [r3, #0]
	  autostep=255;
 80012f0:	4b40      	ldr	r3, [pc, #256]	; (80013f4 <PWMISR+0x290>)
 80012f2:	22ff      	movs	r2, #255	; 0xff
 80012f4:	701a      	strb	r2, [r3, #0]
	  TIM1->CCR1= rampupdc;
 80012f6:	4b44      	ldr	r3, [pc, #272]	; (8001408 <PWMISR+0x2a4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80012fe:	869a      	strh	r2, [r3, #52]	; 0x34
	  TIM1->CCR2= rampupdc;
 8001300:	4b41      	ldr	r3, [pc, #260]	; (8001408 <PWMISR+0x2a4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001308:	871a      	strh	r2, [r3, #56]	; 0x38
	  TIM1->CCR3= rampupdc;
 800130a:	4b3f      	ldr	r3, [pc, #252]	; (8001408 <PWMISR+0x2a4>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001312:	879a      	strh	r2, [r3, #60]	; 0x3c
	  startstate=20;
 8001314:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <PWMISR+0x2b0>)
 8001316:	2214      	movs	r2, #20
 8001318:	701a      	strb	r2, [r3, #0]
	}
      break;
 800131a:	e12a      	b.n	8001572 <PWMISR+0x40e>

    case 20:
      rampspeed = rampspeed+rampuprate;
 800131c:	4b3e      	ldr	r3, [pc, #248]	; (8001418 <PWMISR+0x2b4>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001324:	4a3c      	ldr	r2, [pc, #240]	; (8001418 <PWMISR+0x2b4>)
 8001326:	6013      	str	r3, [r2, #0]
      long0 = 4000000000;
 8001328:	4b3c      	ldr	r3, [pc, #240]	; (800141c <PWMISR+0x2b8>)
 800132a:	607b      	str	r3, [r7, #4]
      long0 = long0/rampspeed;
 800132c:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <PWMISR+0x2b4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	fbb2 f3f3 	udiv	r3, r2, r3
 8001336:	607b      	str	r3, [r7, #4]
      if(long0>30000) long0=30000;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f247 5230 	movw	r2, #30000	; 0x7530
 800133e:	4293      	cmp	r3, r2
 8001340:	d902      	bls.n	8001348 <PWMISR+0x1e4>
 8001342:	f247 5330 	movw	r3, #30000	; 0x7530
 8001346:	607b      	str	r3, [r7, #4]
      step=long0;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b2b      	ldr	r3, [pc, #172]	; (80013fc <PWMISR+0x298>)
 800134e:	801a      	strh	r2, [r3, #0]
      if(step<=minstep)
 8001350:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <PWMISR+0x298>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	f5b3 7f1a 	cmp.w	r3, #616	; 0x268
 8001358:	f080 810d 	bcs.w	8001576 <PWMISR+0x412>
	{
	  holdcounter=0;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <PWMISR+0x284>)
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
	  startstate=100;
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <PWMISR+0x2b0>)
 8001364:	2264      	movs	r2, #100	; 0x64
 8001366:	701a      	strb	r2, [r3, #0]
	}
      break;
 8001368:	e105      	b.n	8001576 <PWMISR+0x412>

    case 100: // wait for hold time
      if(holdcounter>holdtime) startstate=110;
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <PWMISR+0x284>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001372:	f240 8102 	bls.w	800157a <PWMISR+0x416>
 8001376:	4b27      	ldr	r3, [pc, #156]	; (8001414 <PWMISR+0x2b0>)
 8001378:	226e      	movs	r2, #110	; 0x6e
 800137a:	701a      	strb	r2, [r3, #0]
      break;
 800137c:	e0fd      	b.n	800157a <PWMISR+0x416>

    case 110: // wait to get into phase 5
      if(phase==5) startstate=120;
 800137e:	4b20      	ldr	r3, [pc, #128]	; (8001400 <PWMISR+0x29c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b05      	cmp	r3, #5
 8001384:	f040 80fb 	bne.w	800157e <PWMISR+0x41a>
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <PWMISR+0x2b0>)
 800138a:	2278      	movs	r2, #120	; 0x78
 800138c:	701a      	strb	r2, [r3, #0]
      break;
 800138e:	e0f6      	b.n	800157e <PWMISR+0x41a>

    case 120: // wait for leading edge of phase 0 (commutation)
      if(phase==0)
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <PWMISR+0x29c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	f040 80f4 	bne.w	8001582 <PWMISR+0x41e>
	{
	  demagcounter=0;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <PWMISR+0x2bc>)
 800139c:	2200      	movs	r2, #0
 800139e:	801a      	strh	r2, [r3, #0]
	  demagthreshold = (step*demagallowance)>>8;
 80013a0:	4b16      	ldr	r3, [pc, #88]	; (80013fc <PWMISR+0x298>)
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	019b      	lsls	r3, r3, #6
 80013a6:	121b      	asrs	r3, r3, #8
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <PWMISR+0x2c0>)
 80013ac:	801a      	strh	r2, [r3, #0]
	  startstate=130;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <PWMISR+0x2b0>)
 80013b0:	2282      	movs	r2, #130	; 0x82
 80013b2:	701a      	strb	r2, [r3, #0]
	}
      break;
 80013b4:	e0e5      	b.n	8001582 <PWMISR+0x41e>

    case 130: // wait out demag time
      demagcounter++;
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <PWMISR+0x2bc>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	3301      	adds	r3, #1
 80013bc:	b29a      	uxth	r2, r3
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <PWMISR+0x2bc>)
 80013c0:	801a      	strh	r2, [r3, #0]
      if(demagcounter>demagthreshold)
 80013c2:	4b17      	ldr	r3, [pc, #92]	; (8001420 <PWMISR+0x2bc>)
 80013c4:	881a      	ldrh	r2, [r3, #0]
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <PWMISR+0x2c0>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	f240 80db 	bls.w	8001586 <PWMISR+0x422>
	{
	  startstate=140;
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <PWMISR+0x2b0>)
 80013d2:	228c      	movs	r2, #140	; 0x8c
 80013d4:	701a      	strb	r2, [r3, #0]
	}
      break;
 80013d6:	e0d6      	b.n	8001586 <PWMISR+0x422>
 80013d8:	20000110 	.word	0x20000110
 80013dc:	2000009c 	.word	0x2000009c
 80013e0:	200000a4 	.word	0x200000a4
 80013e4:	20000114 	.word	0x20000114
 80013e8:	200000c8 	.word	0x200000c8
 80013ec:	200000c0 	.word	0x200000c0
 80013f0:	200000bc 	.word	0x200000bc
 80013f4:	200000a9 	.word	0x200000a9
 80013f8:	200000a6 	.word	0x200000a6
 80013fc:	2000010e 	.word	0x2000010e
 8001400:	200000d2 	.word	0x200000d2
 8001404:	200000b0 	.word	0x200000b0
 8001408:	20000054 	.word	0x20000054
 800140c:	08001afc 	.word	0x08001afc
 8001410:	20000104 	.word	0x20000104
 8001414:	200000b8 	.word	0x200000b8
 8001418:	2000011c 	.word	0x2000011c
 800141c:	ee6b2800 	.word	0xee6b2800
 8001420:	200000d4 	.word	0x200000d4
 8001424:	200000ec 	.word	0x200000ec

    case 140: // looking for zero crossing of bemf
      if(risingedge)
 8001428:	4b8c      	ldr	r3, [pc, #560]	; (800165c <PWMISR+0x4f8>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d02a      	beq.n	8001486 <PWMISR+0x322>
	{
	  if(bemfsample>zcthreshold)
 8001430:	4b8b      	ldr	r3, [pc, #556]	; (8001660 <PWMISR+0x4fc>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	2bc8      	cmp	r3, #200	; 0xc8
 8001436:	f240 80a8 	bls.w	800158a <PWMISR+0x426>
	    {
	      if(zcfound) step = zccounter;
 800143a:	4b8a      	ldr	r3, [pc, #552]	; (8001664 <PWMISR+0x500>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <PWMISR+0x2e6>
 8001442:	4b89      	ldr	r3, [pc, #548]	; (8001668 <PWMISR+0x504>)
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	4b89      	ldr	r3, [pc, #548]	; (800166c <PWMISR+0x508>)
 8001448:	801a      	strh	r2, [r3, #0]
	      commthreshold = (step*risingdelay)>>8;
 800144a:	4b88      	ldr	r3, [pc, #544]	; (800166c <PWMISR+0x508>)
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4b87      	ldr	r3, [pc, #540]	; (8001670 <PWMISR+0x50c>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	fb03 f302 	mul.w	r3, r3, r2
 8001458:	121b      	asrs	r3, r3, #8
 800145a:	b29a      	uxth	r2, r3
 800145c:	4b85      	ldr	r3, [pc, #532]	; (8001674 <PWMISR+0x510>)
 800145e:	801a      	strh	r2, [r3, #0]
	      zccounter=0;
 8001460:	4b81      	ldr	r3, [pc, #516]	; (8001668 <PWMISR+0x504>)
 8001462:	2200      	movs	r2, #0
 8001464:	801a      	strh	r2, [r3, #0]
	      commcounter=0;
 8001466:	4b84      	ldr	r3, [pc, #528]	; (8001678 <PWMISR+0x514>)
 8001468:	2200      	movs	r2, #0
 800146a:	801a      	strh	r2, [r3, #0]
	      startstate=150;
 800146c:	4b83      	ldr	r3, [pc, #524]	; (800167c <PWMISR+0x518>)
 800146e:	2296      	movs	r2, #150	; 0x96
 8001470:	701a      	strb	r2, [r3, #0]
	      risingedge=0;
 8001472:	4b7a      	ldr	r3, [pc, #488]	; (800165c <PWMISR+0x4f8>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	      zcfound=255;
 8001478:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <PWMISR+0x500>)
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	701a      	strb	r2, [r3, #0]
	      autostep=0;
 800147e:	4b80      	ldr	r3, [pc, #512]	; (8001680 <PWMISR+0x51c>)
 8001480:	2200      	movs	r2, #0
 8001482:	701a      	strb	r2, [r3, #0]
	      risingedge = 255;
	      zcfound=255;
	      autostep=0;
	    }
	}
      break;
 8001484:	e081      	b.n	800158a <PWMISR+0x426>
	  if(bemfsample<zcthreshold)
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <PWMISR+0x4fc>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	2bc7      	cmp	r3, #199	; 0xc7
 800148c:	d87d      	bhi.n	800158a <PWMISR+0x426>
	      if(zcfound) step = zccounter;
 800148e:	4b75      	ldr	r3, [pc, #468]	; (8001664 <PWMISR+0x500>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <PWMISR+0x33a>
 8001496:	4b74      	ldr	r3, [pc, #464]	; (8001668 <PWMISR+0x504>)
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	4b74      	ldr	r3, [pc, #464]	; (800166c <PWMISR+0x508>)
 800149c:	801a      	strh	r2, [r3, #0]
	      commthreshold = (step*fallingdelay)>>8;
 800149e:	4b73      	ldr	r3, [pc, #460]	; (800166c <PWMISR+0x508>)
 80014a0:	881b      	ldrh	r3, [r3, #0]
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b77      	ldr	r3, [pc, #476]	; (8001684 <PWMISR+0x520>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	fb03 f302 	mul.w	r3, r3, r2
 80014ac:	121b      	asrs	r3, r3, #8
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b70      	ldr	r3, [pc, #448]	; (8001674 <PWMISR+0x510>)
 80014b2:	801a      	strh	r2, [r3, #0]
	      zccounter=0;
 80014b4:	4b6c      	ldr	r3, [pc, #432]	; (8001668 <PWMISR+0x504>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
	      commcounter=0;
 80014ba:	4b6f      	ldr	r3, [pc, #444]	; (8001678 <PWMISR+0x514>)
 80014bc:	2200      	movs	r2, #0
 80014be:	801a      	strh	r2, [r3, #0]
	      startstate=150;
 80014c0:	4b6e      	ldr	r3, [pc, #440]	; (800167c <PWMISR+0x518>)
 80014c2:	2296      	movs	r2, #150	; 0x96
 80014c4:	701a      	strb	r2, [r3, #0]
	      risingedge = 255;
 80014c6:	4b65      	ldr	r3, [pc, #404]	; (800165c <PWMISR+0x4f8>)
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	701a      	strb	r2, [r3, #0]
	      zcfound=255;
 80014cc:	4b65      	ldr	r3, [pc, #404]	; (8001664 <PWMISR+0x500>)
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	701a      	strb	r2, [r3, #0]
	      autostep=0;
 80014d2:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <PWMISR+0x51c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	701a      	strb	r2, [r3, #0]
      break;
 80014d8:	e057      	b.n	800158a <PWMISR+0x426>

    case 150:  // wait out commutation delay
      commcounter++;
 80014da:	4b67      	ldr	r3, [pc, #412]	; (8001678 <PWMISR+0x514>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	4b65      	ldr	r3, [pc, #404]	; (8001678 <PWMISR+0x514>)
 80014e4:	801a      	strh	r2, [r3, #0]
      if(commcounter>commthreshold)
 80014e6:	4b64      	ldr	r3, [pc, #400]	; (8001678 <PWMISR+0x514>)
 80014e8:	881a      	ldrh	r2, [r3, #0]
 80014ea:	4b62      	ldr	r3, [pc, #392]	; (8001674 <PWMISR+0x510>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d94d      	bls.n	800158e <PWMISR+0x42a>
	{
	  position++;
 80014f2:	4b65      	ldr	r3, [pc, #404]	; (8001688 <PWMISR+0x524>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	3301      	adds	r3, #1
 80014f8:	4a63      	ldr	r2, [pc, #396]	; (8001688 <PWMISR+0x524>)
 80014fa:	6013      	str	r3, [r2, #0]
	  phase++; // commutate
 80014fc:	4b63      	ldr	r3, [pc, #396]	; (800168c <PWMISR+0x528>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b61      	ldr	r3, [pc, #388]	; (800168c <PWMISR+0x528>)
 8001506:	701a      	strb	r2, [r3, #0]
	  if(phase>5) phase=0;
 8001508:	4b60      	ldr	r3, [pc, #384]	; (800168c <PWMISR+0x528>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b05      	cmp	r3, #5
 800150e:	d902      	bls.n	8001516 <PWMISR+0x3b2>
 8001510:	4b5e      	ldr	r3, [pc, #376]	; (800168c <PWMISR+0x528>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
	  TIM1->CCER = ccermask[phase]; // commutate bridge from fwd table
 8001516:	4b5d      	ldr	r3, [pc, #372]	; (800168c <PWMISR+0x528>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	4619      	mov	r1, r3
 800151c:	4b5c      	ldr	r3, [pc, #368]	; (8001690 <PWMISR+0x52c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a5c      	ldr	r2, [pc, #368]	; (8001694 <PWMISR+0x530>)
 8001522:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001526:	841a      	strh	r2, [r3, #32]

	  // sk DAC->DHR12R1 = phase*810;
	  // sk DAC->SWTRIGR=0x00000003;

	  demagcounter=0;
 8001528:	4b5b      	ldr	r3, [pc, #364]	; (8001698 <PWMISR+0x534>)
 800152a:	2200      	movs	r2, #0
 800152c:	801a      	strh	r2, [r3, #0]
	  demagthreshold = (step*demagallowance)>>8;
 800152e:	4b4f      	ldr	r3, [pc, #316]	; (800166c <PWMISR+0x508>)
 8001530:	881b      	ldrh	r3, [r3, #0]
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	121b      	asrs	r3, r3, #8
 8001536:	b29a      	uxth	r2, r3
 8001538:	4b58      	ldr	r3, [pc, #352]	; (800169c <PWMISR+0x538>)
 800153a:	801a      	strh	r2, [r3, #0]
	  if(phase==0)
 800153c:	4b53      	ldr	r3, [pc, #332]	; (800168c <PWMISR+0x528>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d110      	bne.n	8001566 <PWMISR+0x402>
	    {
	      ifbave = (ifbsum<<2) / ifbcount;
 8001544:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <PWMISR+0x53c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4a56      	ldr	r2, [pc, #344]	; (80016a4 <PWMISR+0x540>)
 800154c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001550:	fb93 f3f2 	sdiv	r3, r3, r2
 8001554:	b21a      	sxth	r2, r3
 8001556:	4b54      	ldr	r3, [pc, #336]	; (80016a8 <PWMISR+0x544>)
 8001558:	801a      	strh	r2, [r3, #0]
	      ifbcount=0;
 800155a:	4b52      	ldr	r3, [pc, #328]	; (80016a4 <PWMISR+0x540>)
 800155c:	2200      	movs	r2, #0
 800155e:	801a      	strh	r2, [r3, #0]
	      ifbsum=0;
 8001560:	4b4f      	ldr	r3, [pc, #316]	; (80016a0 <PWMISR+0x53c>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
	    }
	  startstate=130;  // go back to wait out demag
 8001566:	4b45      	ldr	r3, [pc, #276]	; (800167c <PWMISR+0x518>)
 8001568:	2282      	movs	r2, #130	; 0x82
 800156a:	701a      	strb	r2, [r3, #0]
	}
      break;
 800156c:	e00f      	b.n	800158e <PWMISR+0x42a>
      break;
 800156e:	bf00      	nop
 8001570:	e00e      	b.n	8001590 <PWMISR+0x42c>
      break;
 8001572:	bf00      	nop
 8001574:	e00c      	b.n	8001590 <PWMISR+0x42c>
      break;
 8001576:	bf00      	nop
 8001578:	e00a      	b.n	8001590 <PWMISR+0x42c>
      break;
 800157a:	bf00      	nop
 800157c:	e008      	b.n	8001590 <PWMISR+0x42c>
      break;
 800157e:	bf00      	nop
 8001580:	e006      	b.n	8001590 <PWMISR+0x42c>
      break;
 8001582:	bf00      	nop
 8001584:	e004      	b.n	8001590 <PWMISR+0x42c>
      break;
 8001586:	bf00      	nop
 8001588:	e002      	b.n	8001590 <PWMISR+0x42c>
      break;
 800158a:	bf00      	nop
 800158c:	e000      	b.n	8001590 <PWMISR+0x42c>
      break;
 800158e:	bf00      	nop
  } // end of startstate state machine


  switch(phase)
 8001590:	4b3e      	ldr	r3, [pc, #248]	; (800168c <PWMISR+0x528>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b05      	cmp	r3, #5
 8001596:	d827      	bhi.n	80015e8 <PWMISR+0x484>
 8001598:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <PWMISR+0x43c>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	080015b9 	.word	0x080015b9
 80015a4:	080015c1 	.word	0x080015c1
 80015a8:	080015c9 	.word	0x080015c9
 80015ac:	080015d1 	.word	0x080015d1
 80015b0:	080015d9 	.word	0x080015d9
 80015b4:	080015e1 	.word	0x080015e1
  {
    case 0: // ab
      bemfchannel=8; // read phase c
 80015b8:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <PWMISR+0x548>)
 80015ba:	2208      	movs	r2, #8
 80015bc:	701a      	strb	r2, [r3, #0]
      break;
 80015be:	e013      	b.n	80015e8 <PWMISR+0x484>
    case 1: // ac
      bemfchannel=7; // read phase b
 80015c0:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <PWMISR+0x548>)
 80015c2:	2207      	movs	r2, #7
 80015c4:	701a      	strb	r2, [r3, #0]
      break;
 80015c6:	e00f      	b.n	80015e8 <PWMISR+0x484>
    case 2:  // bc
      bemfchannel=6; // read phase a
 80015c8:	4b38      	ldr	r3, [pc, #224]	; (80016ac <PWMISR+0x548>)
 80015ca:	2206      	movs	r2, #6
 80015cc:	701a      	strb	r2, [r3, #0]
      break;
 80015ce:	e00b      	b.n	80015e8 <PWMISR+0x484>
    case 3:  // ba
      bemfchannel=8; // read phase c
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <PWMISR+0x548>)
 80015d2:	2208      	movs	r2, #8
 80015d4:	701a      	strb	r2, [r3, #0]
      break;
 80015d6:	e007      	b.n	80015e8 <PWMISR+0x484>
    case 4:  // ca
      bemfchannel=7; // read phase b
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <PWMISR+0x548>)
 80015da:	2207      	movs	r2, #7
 80015dc:	701a      	strb	r2, [r3, #0]
      break;
 80015de:	e003      	b.n	80015e8 <PWMISR+0x484>
    case 5:  // cb
      bemfchannel=6; // read phase a
 80015e0:	4b32      	ldr	r3, [pc, #200]	; (80016ac <PWMISR+0x548>)
 80015e2:	2206      	movs	r2, #6
 80015e4:	701a      	strb	r2, [r3, #0]
      break;
 80015e6:	bf00      	nop

  } // end of phase switch statement


  ADC1->SQR3=0x00000000; // current sense adc channel
 80015e8:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <PWMISR+0x54c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34
  ADC1->CR2=0x00000001;  // start ADC conversion of bemf
 80015f0:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <PWMISR+0x54c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2201      	movs	r2, #1
 80015f6:	609a      	str	r2, [r3, #8]
  globalcounter++;
 80015f8:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <PWMISR+0x550>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	3301      	adds	r3, #1
 80015fe:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <PWMISR+0x550>)
 8001600:	6013      	str	r3, [r2, #0]
  while((ADC1->SR & b1)==0) ; // wait for conversion to complete
 8001602:	bf00      	nop
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <PWMISR+0x54c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f8      	beq.n	8001604 <PWMISR+0x4a0>
  ifb= ADC1->DR-ifboffset;
 8001612:	4b27      	ldr	r3, [pc, #156]	; (80016b0 <PWMISR+0x54c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001618:	b29a      	uxth	r2, r3
 800161a:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <PWMISR+0x554>)
 800161c:	881b      	ldrh	r3, [r3, #0]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	b21a      	sxth	r2, r3
 8001624:	4b25      	ldr	r3, [pc, #148]	; (80016bc <PWMISR+0x558>)
 8001626:	801a      	strh	r2, [r3, #0]
  ifbsum = ifbsum + ifb;
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <PWMISR+0x558>)
 800162a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162e:	461a      	mov	r2, r3
 8001630:	4b1b      	ldr	r3, [pc, #108]	; (80016a0 <PWMISR+0x53c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4413      	add	r3, r2
 8001636:	4a1a      	ldr	r2, [pc, #104]	; (80016a0 <PWMISR+0x53c>)
 8001638:	6013      	str	r3, [r2, #0]
  ifbcount++;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <PWMISR+0x540>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	b29b      	uxth	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	b29b      	uxth	r3, r3
 8001646:	b21a      	sxth	r2, r3
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <PWMISR+0x540>)
 800164a:	801a      	strh	r2, [r3, #0]



  TIM1->SR=0;  // clear interrupt
 800164c:	4b10      	ldr	r3, [pc, #64]	; (8001690 <PWMISR+0x52c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	821a      	strh	r2, [r3, #16]

}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200000ce 	.word	0x200000ce
 8001660:	200000bc 	.word	0x200000bc
 8001664:	200000cf 	.word	0x200000cf
 8001668:	200000a4 	.word	0x200000a4
 800166c:	2000010e 	.word	0x2000010e
 8001670:	200000b4 	.word	0x200000b4
 8001674:	200000f2 	.word	0x200000f2
 8001678:	200000a6 	.word	0x200000a6
 800167c:	200000b8 	.word	0x200000b8
 8001680:	200000a9 	.word	0x200000a9
 8001684:	200000f6 	.word	0x200000f6
 8001688:	200000b0 	.word	0x200000b0
 800168c:	200000d2 	.word	0x200000d2
 8001690:	20000054 	.word	0x20000054
 8001694:	08001afc 	.word	0x08001afc
 8001698:	200000d4 	.word	0x200000d4
 800169c:	200000ec 	.word	0x200000ec
 80016a0:	200000a0 	.word	0x200000a0
 80016a4:	200000b6 	.word	0x200000b6
 80016a8:	200000d8 	.word	0x200000d8
 80016ac:	20000110 	.word	0x20000110
 80016b0:	2000009c 	.word	0x2000009c
 80016b4:	20000108 	.word	0x20000108
 80016b8:	200000d0 	.word	0x200000d0
 80016bc:	200000ee 	.word	0x200000ee

080016c0 <motorstartinit>:


void  motorstartinit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  TIM1->CCER = alloff;
 80016c4:	4b40      	ldr	r3, [pc, #256]	; (80017c8 <motorstartinit+0x108>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f643 0288 	movw	r2, #14472	; 0x3888
 80016cc:	841a      	strh	r2, [r3, #32]
  TIM1->BDTR= b15+b12+b11+16;  // 2 usec dead time and set MOE
 80016ce:	4b3e      	ldr	r3, [pc, #248]	; (80017c8 <motorstartinit+0x108>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f649 0210 	movw	r2, #38928	; 0x9810
 80016d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  maxdc=1000;
 80016da:	4b3c      	ldr	r3, [pc, #240]	; (80017cc <motorstartinit+0x10c>)
 80016dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016e0:	801a      	strh	r2, [r3, #0]
  rpmcmd=500;
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <motorstartinit+0x110>)
 80016e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016e8:	801a      	strh	r2, [r3, #0]
  rpmref=0;
 80016ea:	4b3a      	ldr	r3, [pc, #232]	; (80017d4 <motorstartinit+0x114>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	801a      	strh	r2, [r3, #0]
  transitioncounter=0;
 80016f0:	4b39      	ldr	r3, [pc, #228]	; (80017d8 <motorstartinit+0x118>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
  errorint=0;
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <motorstartinit+0x11c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
  position=520000;
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <motorstartinit+0x120>)
 80016fe:	4a39      	ldr	r2, [pc, #228]	; (80017e4 <motorstartinit+0x124>)
 8001700:	601a      	str	r2, [r3, #0]
  positionest= position * 4096;
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <motorstartinit+0x120>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	031b      	lsls	r3, r3, #12
 8001708:	4a37      	ldr	r2, [pc, #220]	; (80017e8 <motorstartinit+0x128>)
 800170a:	6013      	str	r3, [r2, #0]
  speedest=0;
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <motorstartinit+0x12c>)
 800170e:	2200      	movs	r2, #0
 8001710:	801a      	strh	r2, [r3, #0]
  rpm=0;
 8001712:	4b37      	ldr	r3, [pc, #220]	; (80017f0 <motorstartinit+0x130>)
 8001714:	2200      	movs	r2, #0
 8001716:	801a      	strh	r2, [r3, #0]
  phase = 0;
 8001718:	4b36      	ldr	r3, [pc, #216]	; (80017f4 <motorstartinit+0x134>)
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
  holdcounter=0;
 800171e:	4b36      	ldr	r3, [pc, #216]	; (80017f8 <motorstartinit+0x138>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
  startstate=0;
 8001724:	4b35      	ldr	r3, [pc, #212]	; (80017fc <motorstartinit+0x13c>)
 8001726:	2200      	movs	r2, #0
 8001728:	701a      	strb	r2, [r3, #0]
  commcounter=0;
 800172a:	4b35      	ldr	r3, [pc, #212]	; (8001800 <motorstartinit+0x140>)
 800172c:	2200      	movs	r2, #0
 800172e:	801a      	strh	r2, [r3, #0]
  step=3670;
 8001730:	4b34      	ldr	r3, [pc, #208]	; (8001804 <motorstartinit+0x144>)
 8001732:	f640 6256 	movw	r2, #3670	; 0xe56
 8001736:	801a      	strh	r2, [r3, #0]
  autostep = 0;
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <motorstartinit+0x148>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
  risingedge = 0;
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <motorstartinit+0x14c>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
  zcfound=0;
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <motorstartinit+0x150>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
  alignmentcounter=0;
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <motorstartinit+0x154>)
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
  rampspeed=1;
 8001750:	4b31      	ldr	r3, [pc, #196]	; (8001818 <motorstartinit+0x158>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]
  runningdc = 500;
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <motorstartinit+0x15c>)
 8001758:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800175c:	801a      	strh	r2, [r3, #0]
  commthreshold=0;
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <motorstartinit+0x160>)
 8001760:	2200      	movs	r2, #0
 8001762:	801a      	strh	r2, [r3, #0]
  risingdelay=127;
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <motorstartinit+0x164>)
 8001766:	227f      	movs	r2, #127	; 0x7f
 8001768:	701a      	strb	r2, [r3, #0]
  fallingdelay=127;
 800176a:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <motorstartinit+0x168>)
 800176c:	227f      	movs	r2, #127	; 0x7f
 800176e:	701a      	strb	r2, [r3, #0]
  ledoff;
 8001770:	4b2e      	ldr	r3, [pc, #184]	; (800182c <motorstartinit+0x16c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <motorstartinit+0x16c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800177e:	60da      	str	r2, [r3, #12]
  ledstate=0;
 8001780:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <motorstartinit+0x170>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
  flashcount=0;
 8001786:	4b2b      	ldr	r3, [pc, #172]	; (8001834 <motorstartinit+0x174>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
  overcurrent=0;
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <motorstartinit+0x178>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
  ifb=0;
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <motorstartinit+0x17c>)
 8001794:	2200      	movs	r2, #0
 8001796:	801a      	strh	r2, [r3, #0]
  overloaddclimit=1200;
 8001798:	4b29      	ldr	r3, [pc, #164]	; (8001840 <motorstartinit+0x180>)
 800179a:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 800179e:	801a      	strh	r2, [r3, #0]
  overloadcounter=0;
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <motorstartinit+0x184>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
  overloadflag=0;
 80017a6:	4b28      	ldr	r3, [pc, #160]	; (8001848 <motorstartinit+0x188>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	701a      	strb	r2, [r3, #0]
  ifbsum=0;
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <motorstartinit+0x18c>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
  ifbave=0;
 80017b2:	4b27      	ldr	r3, [pc, #156]	; (8001850 <motorstartinit+0x190>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	801a      	strh	r2, [r3, #0]
  ifbcount=0;
 80017b8:	4b26      	ldr	r3, [pc, #152]	; (8001854 <motorstartinit+0x194>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	801a      	strh	r2, [r3, #0]


} // end of motor start init function
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000054 	.word	0x20000054
 80017cc:	200000f0 	.word	0x200000f0
 80017d0:	200000cc 	.word	0x200000cc
 80017d4:	200000ba 	.word	0x200000ba
 80017d8:	200000e0 	.word	0x200000e0
 80017dc:	200000dc 	.word	0x200000dc
 80017e0:	200000b0 	.word	0x200000b0
 80017e4:	0007ef40 	.word	0x0007ef40
 80017e8:	20000120 	.word	0x20000120
 80017ec:	20000126 	.word	0x20000126
 80017f0:	200000e4 	.word	0x200000e4
 80017f4:	200000d2 	.word	0x200000d2
 80017f8:	200000c8 	.word	0x200000c8
 80017fc:	200000b8 	.word	0x200000b8
 8001800:	200000a6 	.word	0x200000a6
 8001804:	2000010e 	.word	0x2000010e
 8001808:	200000a9 	.word	0x200000a9
 800180c:	200000ce 	.word	0x200000ce
 8001810:	200000cf 	.word	0x200000cf
 8001814:	20000114 	.word	0x20000114
 8001818:	2000011c 	.word	0x2000011c
 800181c:	200000da 	.word	0x200000da
 8001820:	200000f2 	.word	0x200000f2
 8001824:	200000b4 	.word	0x200000b4
 8001828:	200000f6 	.word	0x200000f6
 800182c:	20000070 	.word	0x20000070
 8001830:	200000a8 	.word	0x200000a8
 8001834:	200000fc 	.word	0x200000fc
 8001838:	20000118 	.word	0x20000118
 800183c:	200000ee 	.word	0x200000ee
 8001840:	200000d6 	.word	0x200000d6
 8001844:	20000100 	.word	0x20000100
 8001848:	2000010c 	.word	0x2000010c
 800184c:	200000a0 	.word	0x200000a0
 8001850:	200000d8 	.word	0x200000d8
 8001854:	200000b6 	.word	0x200000b6

08001858 <assert_failed>:
 *                  - line: assert error line source number
 * Output         : None
 * Return         : None
 *******************************************************************************/
void assert_failed(u8* file, u32 line)
{ 
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
 8001862:	e7fe      	b.n	8001862 <assert_failed+0xa>

08001864 <NMIException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void NMIException(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <HardFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void HardFaultException(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001874:	e7fe      	b.n	8001874 <HardFaultException+0x4>

08001876 <MemManageException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void MemManageException(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800187a:	e7fe      	b.n	800187a <MemManageException+0x4>

0800187c <BusFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void BusFaultException(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001880:	e7fe      	b.n	8001880 <BusFaultException+0x4>

08001882 <UsageFaultException>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void UsageFaultException(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001886:	e7fe      	b.n	8001886 <UsageFaultException+0x4>

08001888 <DebugMonitor>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void DebugMonitor(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <SVCHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SVCHandler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <PendSVC>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PendSVC(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <SysTickHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SysTickHandler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0


}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <WWDG_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void WWDG_IRQHandler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <PVD_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void PVD_IRQHandler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
}
 80018c8:	bf00      	nop
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr

080018d0 <TAMPER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TAMPER_IRQHandler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <RTC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTC_IRQHandler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <FLASH_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_IRQHandler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <RCC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_IRQHandler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <EXTI0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI0_IRQHandler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <EXTI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI1_IRQHandler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <EXTI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI2_IRQHandler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <EXTI3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI3_IRQHandler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <EXTI4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI4_IRQHandler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr

0800193c <USB_HP_CAN_TX_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_HP_CAN_TX_IRQHandler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <USB_LP_CAN_RX0_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <CAN_RX1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_RX1_IRQHandler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <CAN_SCE_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void CAN_SCE_IRQHandler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <EXTI9_5_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI9_5_IRQHandler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <TIM1_BRK_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_BRK_IRQHandler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
TIM1->SR = 0; // clear tim1 brk interrupt
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <TIM1_BRK_IRQHandler+0x1c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	821a      	strh	r2, [r3, #16]

overcurrent=255;
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <TIM1_BRK_IRQHandler+0x20>)
 8001986:	22ff      	movs	r2, #255	; 0xff
 8001988:	701a      	strb	r2, [r3, #0]
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000054 	.word	0x20000054
 8001998:	20000118 	.word	0x20000118

0800199c <TIM1_UP_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_UP_IRQHandler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bc80      	pop	{r7}
 80019a6:	4770      	bx	lr

080019a8 <TIM1_TRG_COM_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_TRG_COM_IRQHandler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
}
 80019ac:	bf00      	nop
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <TIM1_CC_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM1_CC_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
PWMISR();
 80019b8:	f7ff fbd4 	bl	8001164 <PWMISR>
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <TIM2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM2_IRQHandler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <TIM3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM3_IRQHandler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <TIM4_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void TIM4_IRQHandler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
} // end of tim4 interrupt service routine
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <I2C1_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_EV_IRQHandler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <I2C1_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C1_ER_IRQHandler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <I2C2_EV_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_EV_IRQHandler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <I2C2_ER_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void I2C2_ER_IRQHandler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <SPI1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI1_IRQHandler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <SPI2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void SPI2_IRQHandler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <USART1_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART1_IRQHandler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <USART2_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART2_IRQHandler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <USART3_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USART3_IRQHandler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <EXTI15_10_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
}
 8001a54:	bf00      	nop
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr

08001a5c <RTCAlarm_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RTCAlarm_IRQHandler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <USBWakeUp_IRQHandler>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void USBWakeUp_IRQHandler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <_init>:
 8001a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a76:	bf00      	nop
 8001a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7a:	bc08      	pop	{r3}
 8001a7c:	469e      	mov	lr, r3
 8001a7e:	4770      	bx	lr

08001a80 <_fini>:
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	bf00      	nop
 8001a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a86:	bc08      	pop	{r3}
 8001a88:	469e      	mov	lr, r3
 8001a8a:	4770      	bx	lr
